diff '--color=auto' -urpN a/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi b/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi
--- a/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi	2024-04-17 11:19:38.000000000 +0200
+++ b/arch/arm64/boot/dts/allwinner/sun50i-h616.dtsi	2024-04-27 23:28:01.058959613 +0200
@@ -7,8 +7,12 @@
 #include <dt-bindings/clock/sun50i-h616-ccu.h>
 #include <dt-bindings/clock/sun50i-h6-r-ccu.h>
 #include <dt-bindings/clock/sun6i-rtc.h>
+#include <dt-bindings/clock/sun8i-de2.h>
+#include <dt-bindings/clock/sun8i-tcon-top.h>
 #include <dt-bindings/reset/sun50i-h616-ccu.h>
 #include <dt-bindings/reset/sun50i-h6-r-ccu.h>
+#include <dt-bindings/reset/sun8i-de2.h>
+#include <dt-bindings/thermal/thermal.h>
 
 / {
 	interrupt-parent = <&gic>;
@@ -25,6 +29,9 @@
 			reg = <0>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu1: cpu@1 {
@@ -33,6 +40,9 @@
 			reg = <1>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu2: cpu@2 {
@@ -41,6 +51,9 @@
 			reg = <2>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu3: cpu@3 {
@@ -49,21 +62,30 @@
 			reg = <3>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 	};
 
+	de: display-engine {
+		compatible = "allwinner,sun50i-h6-display-engine";
+		allwinner,pipelines = <&mixer0>;
+		status = "disabled";
+	};
+
 	reserved-memory {
 		#address-cells = <2>;
 		#size-cells = <2>;
 		ranges;
 
 		/*
-		 * 256 KiB reserved for Trusted Firmware-A (BL31).
+		 * 512 KiB reserved for Trusted Firmware-A (BL31).
 		 * This is added by BL31 itself, but some bootloaders fail
 		 * to propagate this into the DTB handed to kernels.
 		 */
 		secmon@40000000 {
-			reg = <0x0 0x40000000 0x0 0x40000>;
+			reg = <0x0 0x40000000 0x0 0x80000>;
 			no-map;
 		};
 	};
@@ -108,19 +130,122 @@
 		#size-cells = <1>;
 		ranges = <0x0 0x0 0x0 0x40000000>;
 
+		bus@1000000 {
+			compatible = "allwinner,sun50i-h616-de33",
+				     "allwinner,sun50i-a64-de2";
+			reg = <0x1000000 0x400000>;
+			allwinner,sram = <&de3_sram 1>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+			ranges = <0 0x1000000 0x400000>;
+
+			display_clocks: clock@8000 {
+				compatible = "allwinner,sun50i-h616-de33-clk";
+				reg = <0x8000 0x100>;
+				clocks = <&ccu CLK_DE>, <&ccu CLK_BUS_DE>;
+				clock-names = "mod", "bus";
+				resets = <&ccu RST_BUS_DE>;
+				#clock-cells = <1>;
+				#reset-cells = <1>;
+			};
+
+			mixer0: mixer@100000 {
+				compatible = "allwinner,sun50i-h616-de33-mixer-0";
+				reg = <0x100000 0x100000>,
+				      <0x8100 0x40>,
+				      <0x280000 0x20000>;
+				clocks = <&display_clocks CLK_BUS_MIXER0>,
+					 <&display_clocks CLK_MIXER0>;
+				clock-names = "bus", "mod";
+				resets = <&display_clocks RST_MIXER0>;
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					mixer0_out: port@1 {
+						reg = <1>;
+
+						mixer0_out_tcon_top_mixer0: endpoint {
+							remote-endpoint = <&tcon_top_mixer0_in_mixer0>;
+						};
+					};
+				};
+			};
+		};
+
+		gpu: gpu@1800000 {
+			compatible = "allwinner,sun50i-h616-mali",
+			             "arm,mali-bifrost";
+			reg = <0x1800000 0x40000>;
+			interrupts = <GIC_SPI 95 IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI 96 IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI 97 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "job", "mmu", "gpu";
+			clocks = <&ccu CLK_GPU0>, <&ccu CLK_BUS_GPU>;
+			clock-names = "core", "bus";
+			resets = <&ccu RST_BUS_GPU>;
+			//operating-points-v2 = <&gpu_opp_table>;
+			//#cooling-cells = <2>;
+			status = "disabled";
+		};
+
+		video-codec@1c0e000 {
+			compatible = "allwinner,sun50i-h616-video-engine";
+			reg = <0x01c0e000 0x2000>;
+			clocks = <&ccu CLK_BUS_VE>, <&ccu CLK_VE>,
+				 <&ccu CLK_MBUS_VE>;
+			clock-names = "ahb", "mod", "ram";
+			resets = <&ccu RST_BUS_VE>;
+			interrupts = <GIC_SPI 93 IRQ_TYPE_LEVEL_HIGH>;
+			allwinner,sram = <&ve_sram 1>;
+		};
+
 		syscon: syscon@3000000 {
 			compatible = "allwinner,sun50i-h616-system-control";
-			reg = <0x03000000 0x1000>;
+			reg = <0x03000000 0x30>,<0x03000038 0x0fc8>;
 			#address-cells = <1>;
 			#size-cells = <1>;
 			ranges;
 
+			sram_a2: sram@100000 {
+				compatible = "mmio-sram";
+				reg = <0x00100000 0x18000>;
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0 0x00100000 0x18000>;
+
+				scpi_sram: scpi-sram@17c00 {
+					compatible = "arm,scp-shmem";
+					reg = <0x17c00 0x200>;
+				};
+			};
+
 			sram_c: sram@28000 {
 				compatible = "mmio-sram";
 				reg = <0x00028000 0x30000>;
 				#address-cells = <1>;
 				#size-cells = <1>;
 				ranges = <0 0x00028000 0x30000>;
+
+				de3_sram: sram-section@0 {
+					compatible = "allwinner,sun50i-h616-sram-c",
+						     "allwinner,sun50i-a64-sram-c";
+					reg = <0x0000 0x1e000>;
+				};
+			};
+
+			sram_c1: sram@1a00000 {
+				compatible = "mmio-sram";
+				reg = <0x01a00000 0x200000>;
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0 0x01a00000 0x200000>;
+
+				ve_sram: sram-section@0 {
+					compatible = "allwinner,sun50i-h616-sram-c1";
+					reg = <0x000000 0x200000>;
+				};
 			};
 		};
 
@@ -133,12 +258,79 @@
 			#reset-cells = <1>;
 		};
 
+		sid: efuse@3006000 {
+			compatible = "allwinner,sun50i-h616-sid";
+			reg = <0x03006000 0x1000>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			cpu_speed_grade: cpu-speed-grade@00 {
+				reg = <0x00 0x02>;
+			};
+
+			ths_calibration: thermal-sensor-calibration@14 {
+				reg = <0x14 0x8>;
+			};
+
+			ephy_calibration: ephy-calibration@2c {
+				reg = <0x2c 0x2>;
+			};
+		};
+
 		watchdog: watchdog@30090a0 {
 			compatible = "allwinner,sun50i-h616-wdt",
 				     "allwinner,sun6i-a31-wdt";
 			reg = <0x030090a0 0x20>;
 			interrupts = <GIC_SPI 50 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&osc24M>;
+			status = "okay";
+		};
+
+		pwm: pwm@300a000 {
+			compatible = "allwinner,sun50i-h616-pwm";
+			reg = <0x0300a000 0x400>;
+			clocks = <&osc24M>, <&ccu CLK_BUS_PWM>;
+			clock-names = "mod", "bus";
+			resets = <&ccu RST_BUS_PWM>;
+			pwm-number = <6>;
+			pwm-base = <0x0>;
+			sunxi-pwms = <&pwm0>, <&pwm1>, <&pwm2>, <&pwm3>, <&pwm4>, <&pwm5>;
+			#pwm-cells = <3>;
+			status = "okay";
+		};
+
+		pwm0: pwm0@0300a000 {
+			compatible = "allwinner,sunxi-pwm0";
+		};
+
+		pwm1: pwm1@0300a000 {
+			compatible = "allwinner,sunxi-pwm1";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm1_ph_pin>;
+		};
+
+		pwm2: pwm2@0300a000 {
+			compatible = "allwinner,sunxi-pwm2";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm2_ph_pin>;
+		};
+
+		pwm3: pwm3@0300a000 {
+			compatible = "allwinner,sunxi-pwm3";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm3_ph_pin>;
+		};
+
+		pwm4: pwm4@0300a000 {
+			compatible = "allwinner,sunxi-pwm4";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm4_ph_pin>;
+		};
+
+		pwm5: pwm5@0300a000 {
+			compatible = "allwinner,sunxi-pwm5";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm5_pin>;
 		};
 
 		pio: pinctrl@300b000 {
@@ -168,21 +360,119 @@
 				drive-strength = <40>;
 			};
 
-			i2c0_pins: i2c0-pins {
-				pins = "PI6", "PI7";
+			/omit-if-no-ref/
+			i2c0_pi_pins: i2c0-pi-pins {
+				pins = "PI5", "PI6";
 				function = "i2c0";
 			};
 
+			/omit-if-no-ref/
+			i2c1_ph_pins: i2c1-ph-pins {
+				pins = "PH0", "PH1";
+				function = "i2c1";
+			};
+
+			/omit-if-no-ref/
+			i2c1_pi_pins: i2c1-pi-pins {
+				pins = "PI7", "PI8";
+				function = "i2c1";
+			};
+
+			/omit-if-no-ref/
+			i2c2_ph_pins: i2c2-ph-pins {
+				pins = "PH2", "PH3";
+				function = "i2c2";
+			};
+
+			/omit-if-no-ref/
+			i2c2_pi_pins: i2c2-pi-pins {
+				pins = "PI9", "PI10";
+				function = "i2c2";
+			};
+
+			/omit-if-no-ref/
 			i2c3_ph_pins: i2c3-ph-pins {
 				pins = "PH4", "PH5";
 				function = "i2c3";
 			};
 
+			i2c3_pa_pins: i2c3-pa-pins {
+				pins = "PA10", "PA11";
+				function = "i2c3";
+				bias-pull-up;
+			};
+
+			/omit-if-no-ref/
+			i2c4_ph_pins: i2c4-ph-pins {
+				pins = "PH6", "PH7";
+				function = "i2c4";
+			};
+
+			/omit-if-no-ref/
+			i2s3_pins: i2s3-pins {
+				pins = "PH5", "PH6", "PH7", "PH8", "PH9";
+				function = "i2s3";
+			};
+
 			ir_rx_pin: ir-rx-pin {
 				pins = "PH10";
 				function = "ir_rx";
 			};
 
+			/omit-if-no-ref/
+			pwm1_ph_pin: pwm1-ph-pin {
+				pins = "PH3";
+				function = "pwm1";
+			};
+
+			/omit-if-no-ref/
+			pwm2_ph_pin: pwm2-ph-pin {
+				pins = "PH2";
+				function = "pwm2";
+			};
+
+			/omit-if-no-ref/
+			pwm3_ph_pin: pwm3-ph-pin {
+				pins = "PH0";
+				function = "pwm3";
+			};
+
+			/omit-if-no-ref/
+			pwm4_ph_pin: pwm4-ph-pin {
+				pins = "PH1";
+				function = "pwm4";
+			};
+
+			/omit-if-no-ref/
+			pwm5_pin: pwm5-pin {
+				pins = "PA12";
+				function = "pwm5";
+			};
+
+			/omit-if-no-ref/
+			pwm1_pi_pin: pwm1-pi-pin {
+				pins = "PI11";
+				function = "pwm1";
+			};
+
+			/omit-if-no-ref/
+			pwm2_pi_pin: pwm2-pi-pin {
+				pins = "PI12";
+				function = "pwm2";
+			};
+
+			/omit-if-no-ref/
+			pwm3_pi_pin: pwm3-pi-pin {
+				pins = "PI13";
+				function = "pwm3";
+			};
+
+			/omit-if-no-ref/
+			pwm4_pi_pin: pwm4-pi-pin {
+				pins = "PI14";
+				function = "pwm4";
+			};
+
 			mmc0_pins: mmc0-pins {
 				pins = "PF0", "PF1", "PF2", "PF3",
 				       "PF4", "PF5";
@@ -209,6 +499,13 @@
 				bias-pull-up;
 			};
 
+			rmii_pins: rmii-pins {
+				pins = "PA0", "PA1", "PA2", "PA3", "PA4",
+				       "PA5", "PA6", "PA7", "PA8", "PA9";
+				function = "emac1";
+				drive-strength = <40>;
+			};
+
 			/omit-if-no-ref/
 			spi0_pins: spi0-pins {
 				pins = "PC0", "PC2", "PC4";
@@ -233,22 +530,64 @@
 				function = "spi1";
 			};
 
+			/omit-if-no-ref/
+			spi1_cs1_pin: spi1-cs1-pin {
+				pins = "PH9";
+				function = "spi1";
+			};
+
 			uart0_ph_pins: uart0-ph-pins {
 				pins = "PH0", "PH1";
 				function = "uart0";
 			};
 
 			/omit-if-no-ref/
-			uart1_pins: uart1-pins {
+			uart1_ph_pins: uart1-ph-pins {
 				pins = "PG6", "PG7";
 				function = "uart1";
 			};
 
 			/omit-if-no-ref/
-			uart1_rts_cts_pins: uart1-rts-cts-pins {
+			uart1_ph_rts_cts_pins: uart1-ph-rts-cts-pins {
 				pins = "PG8", "PG9";
 				function = "uart1";
 			};
+
+			/omit-if-no-ref/
+			uart2_ph_pins: uart2-ph-pins {
+				pins = "PH5", "PH6";
+				function = "uart2";
+			};
+
+			/omit-if-no-ref/
+			uart2_ph_rts_cts_pins: uart2-ph-rts-cts-pins {
+				pins = "PH7", "PH8";
+				function = "uart2";
+			};
+
+			/omit-if-no-ref/
+			uart2_pi_pins: uart2-pi-pins {
+				pins = "PI5", "PI6";
+				function = "uart2";
+			};
+
+			/omit-if-no-ref/
+			uart3_pi_pins: uart3-pi-pins {
+				pins = "PI9", "PI10";
+				function = "uart3";
+			};
+
+			/omit-if-no-ref/
+			uart4_pi_pins: uart4-pi-pins {
+				pins = "PI13", "PI14";
+				function = "uart4";
+			};
+
+			/omit-if-no-ref/
+			uart5_ph_pins: uart5-ph-pins {
+				pins = "PH2", "PH3";
+				function = "uart5";
+			};
 		};
 
 		gic: interrupt-controller@3021000 {
@@ -325,6 +664,101 @@
 			#size-cells = <0>;
 		};
 
+		dma: dma-controller@3002000 {
+			compatible = "allwinner,sun50i-h616-dma";
+			reg = <0x03002000 0x1000>;
+			interrupts = <GIC_SPI 42 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_DMA>, <&ccu CLK_MBUS_DMA>;
+			clock-names = "bus", "mbus";
+			dma-channels = <16>;
+			dma-requests = <49>;
+			resets = <&ccu RST_BUS_DMA>;
+			#dma-cells = <1>;
+		};
+
+		codec: codec@05096000 {
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun50i-h616-codec";
+			reg = <0x05096000 0x31c>;
+			interrupts = <GIC_SPI 58 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_AUDIO_CODEC>,
+				 <&ccu CLK_AUDIO_CODEC_1X>,
+				 <&ccu CLK_AUDIO_CODEC_4X>;
+			clock-names = "apb", "audio-codec-1x", "audio-codec-4x";
+			resets = <&ccu RST_BUS_AUDIO_CODEC>;
+			dmas = <&dma 6>;
+			dma-names = "tx";
+			status = "disabled";
+		};
+
+		ahub_dam_plat:ahub_dam_plat@5097000 {
+			#sound-dai-cells = <0>;
+			/* sound card without pcm for hardware mix setting */
+			compatible	= "allwinner,sunxi-snd-plat-ahub_dam";
+			reg		= <0x05097000 0x1000>;
+			resets		= <&ccu RST_BUS_AUDIO_HUB>;
+			clocks          = <&ccu CLK_AUDIO_CODEC_1X>,
+			                  <&ccu CLK_AUDIO_CODEC_4X>,
+			                  <&ccu CLK_AUDIO_HUB>,
+			                  <&ccu CLK_BUS_AUDIO_HUB>;
+			clock-names     = "clk_pll_audio",
+			                  "clk_pll_audio_4x",
+			                  "clk_audio_hub",
+			                  "clk_bus_audio_hub";
+			status		= "disabled";
+		};
+
+		ahub_dam_mach:ahub_dam_mach {
+			compatible = "allwinner,sunxi-snd-mach";
+			soundcard-mach,name = "ahubdam";
+			status		= "disabled";
+			soundcard-mach,cpu {
+				sound-dai = <&ahub_dam_plat>;
+			};
+			soundcard-mach,codec {
+			};
+		};
+
+		ahub1_plat:ahub1_plat {
+			#sound-dai-cells = <0>;
+			compatible	= "allwinner,sunxi-snd-plat-ahub";
+			apb_num		= <1>;	/* for dma port 4 */
+			dmas		= <&dma 4>, <&dma 4>;
+			dma-names	= "tx", "rx";
+			playback_cma	= <128>;
+			capture_cma	= <128>;
+			tx_fifo_size	= <128>;
+			rx_fifo_size	= <128>;
+
+			tdm_num		= <1>;
+			tx_pin		= <0>;
+			rx_pin		= <0>;
+			status		= "disabled";
+		};
+
+		ahub1_mach:ahub1_mach {
+			compatible = "allwinner,sunxi-snd-mach";
+			soundcard-mach,name = "ahubhdmi";
+
+			soundcard-mach,format		= "i2s";
+			soundcard-mach,frame-master	= <&ahub1_cpu>;
+			soundcard-mach,bitclock-master	= <&ahub1_cpu>;
+			/* soundcard-mach,frame-inversion; */
+			/* soundcard-mach,bitclock-inversion; */
+			soundcard-mach,slot-num		= <2>;
+			soundcard-mach,slot-width	= <32>;
+			status		= "disabled";
+			ahub1_cpu: soundcard-mach,cpu {
+				sound-dai = <&ahub1_plat>;
+				soundcard-mach,pll-fs	= <4>;
+				soundcard-mach,mclk-fs	= <0>;
+			};
+
+			ahub1_codec: soundcard-mach,codec {
+				sound-dai = <&hdmi>;
+			};
+		};
+
 		uart0: serial@5000000 {
 			compatible = "snps,dw-apb-uart";
 			reg = <0x05000000 0x400>;
@@ -400,7 +834,7 @@
 			clocks = <&ccu CLK_BUS_I2C0>;
 			resets = <&ccu RST_BUS_I2C0>;
 			pinctrl-names = "default";
-			pinctrl-0 = <&i2c0_pins>;
+			pinctrl-0 = <&i2c0_pi_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -414,6 +848,8 @@
 			interrupts = <GIC_SPI 7 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C1>;
 			resets = <&ccu RST_BUS_I2C1>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c1_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -427,6 +863,8 @@
 			interrupts = <GIC_SPI 8 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C2>;
 			resets = <&ccu RST_BUS_I2C2>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c2_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -440,6 +878,8 @@
 			interrupts = <GIC_SPI 9 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C3>;
 			resets = <&ccu RST_BUS_I2C3>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c3_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -453,6 +893,8 @@
 			interrupts = <GIC_SPI 10 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C4>;
 			resets = <&ccu RST_BUS_I2C4>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c4_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -466,6 +908,10 @@
 			clocks = <&ccu CLK_BUS_SPI0>, <&ccu CLK_SPI0>;
 			clock-names = "ahb", "mod";
 			resets = <&ccu RST_BUS_SPI0>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi0_pins>;
+			dmas = <&dma 22>, <&dma 22>;
+			dma-names = "rx", "tx";
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -479,6 +925,10 @@
 			clocks = <&ccu CLK_BUS_SPI1>, <&ccu CLK_SPI1>;
 			clock-names = "ahb", "mod";
 			resets = <&ccu RST_BUS_SPI1>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi1_pins>, <&spi1_cs1_pin>;
+			dmas = <&dma 23>, <&dma 23>;
+			dma-names = "rx", "tx";
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -504,6 +954,35 @@
 			};
 		};
 
+		emac1: ethernet@5030000 {
+			compatible = "allwinner,sunxi-gmac";
+			reg = <0x05030000 0x10000>,
+			      <0x03000034 0x4>;
+			reg-names = "gmac1_reg","ephy_reg";
+			interrupts = <GIC_SPI 15 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "gmacirq";
+			resets = <&ccu RST_BUS_EMAC1>;
+			reset-names = "stmmaceth";
+			clocks = <&ccu CLK_BUS_EMAC1>,<&ccu CLK_EMAC_25M>;
+			clock-names = "bus-emac1","emac-25m";
+			pinctrl-0 = <&rmii_pins>;
+			pinctrl-names = "default";
+			phy-mode = "rmii";
+			tx-delay = <7>;
+			rx-delay = <31>;
+			phy-rst;
+			gmac-power0;
+			gmac-power1;
+			gmac-power2;
+			status = "disabled";
+
+			mdio1: mdio {
+				compatible = "ethernet-phy-ieee802.3-c22";
+				#address-cells = <1>;
+				#size-cells = <0>;
+			};
+		};
+
 		usbotg: usb@5100000 {
 			compatible = "allwinner,sun50i-h616-musb",
 				     "allwinner,sun8i-h3-musb";
@@ -559,9 +1038,11 @@
 			interrupts = <GIC_SPI 26 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI0>,
 				 <&ccu CLK_BUS_EHCI0>,
-				 <&ccu CLK_USB_OHCI0>;
+				 <&ccu CLK_USB_OHCI0>,
+				 <&ccu CLK_USB_PHY2>;
 			resets = <&ccu RST_BUS_OHCI0>,
-				 <&ccu RST_BUS_EHCI0>;
+				 <&ccu RST_BUS_EHCI0>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 0>;
 			phy-names = "usb";
 			status = "disabled";
@@ -573,8 +1054,10 @@
 			reg = <0x05101400 0x100>;
 			interrupts = <GIC_SPI 27 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI0>,
-				 <&ccu CLK_USB_OHCI0>;
-			resets = <&ccu RST_BUS_OHCI0>;
+				 <&ccu CLK_USB_OHCI0>,
+				 <&ccu CLK_USB_PHY2>;
+			resets = <&ccu RST_BUS_OHCI0>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 0>;
 			phy-names = "usb";
 			status = "disabled";
@@ -587,9 +1070,11 @@
 			interrupts = <GIC_SPI 28 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI1>,
 				 <&ccu CLK_BUS_EHCI1>,
-				 <&ccu CLK_USB_OHCI1>;
+				 <&ccu CLK_USB_OHCI1>,
+				 <&ccu CLK_USB_PHY2>;
 			resets = <&ccu RST_BUS_OHCI1>,
-				 <&ccu RST_BUS_EHCI1>;
+				 <&ccu RST_BUS_EHCI1>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 1>;
 			phy-names = "usb";
 			status = "disabled";
@@ -601,8 +1086,10 @@
 			reg = <0x05200400 0x100>;
 			interrupts = <GIC_SPI 29 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI1>,
-				 <&ccu CLK_USB_OHCI1>;
-			resets = <&ccu RST_BUS_OHCI1>;
+				 <&ccu CLK_USB_OHCI1>,
+				 <&ccu CLK_USB_PHY2>;
+			resets = <&ccu RST_BUS_OHCI1>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 1>;
 			phy-names = "usb";
 			status = "disabled";
@@ -643,9 +1130,11 @@
 			interrupts = <GIC_SPI 32 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI3>,
 				 <&ccu CLK_BUS_EHCI3>,
-				 <&ccu CLK_USB_OHCI3>;
+				 <&ccu CLK_USB_OHCI3>,
+				 <&ccu CLK_USB_PHY2>;
 			resets = <&ccu RST_BUS_OHCI3>,
-				 <&ccu RST_BUS_EHCI3>;
+				 <&ccu RST_BUS_EHCI3>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 3>;
 			phy-names = "usb";
 			status = "disabled";
@@ -657,13 +1146,156 @@
 			reg = <0x05311400 0x100>;
 			interrupts = <GIC_SPI 33 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI3>,
-				 <&ccu CLK_USB_OHCI3>;
-			resets = <&ccu RST_BUS_OHCI3>;
+				 <&ccu CLK_USB_OHCI3>,
+				 <&ccu CLK_USB_PHY2>;
+			resets = <&ccu RST_BUS_OHCI3>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 3>;
 			phy-names = "usb";
 			status = "disabled";
 		};
 
+		hdmi: hdmi@6000000 {
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun50i-h616-dw-hdmi",
+				     "allwinner,sun50i-h6-dw-hdmi";
+			reg = <0x06000000 0x10000>;
+			reg-io-width = <1>;
+			interrupts = <GIC_SPI 63 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_HDMI>, <&ccu CLK_HDMI_SLOW>,
+				 <&ccu CLK_HDMI>, <&ccu CLK_HDMI_CEC>,
+				 <&ccu CLK_HDCP>, <&ccu CLK_BUS_HDCP>;
+			clock-names = "iahb", "isfr", "tmds", "cec", "hdcp",
+				      "hdcp-bus";
+			resets = <&ccu RST_BUS_HDMI>, <&ccu RST_BUS_HDCP>;
+			reset-names = "ctrl", "hdcp";
+			phys = <&hdmi_phy>;
+			phy-names = "phy";
+			status = "disabled";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				hdmi_in: port@0 {
+					reg = <0>;
+
+					hdmi_in_tcon_top: endpoint {
+						remote-endpoint = <&tcon_top_hdmi_out_hdmi>;
+					};
+				};
+
+				hdmi_out: port@1 {
+					reg = <1>;
+				};
+			};
+		};
+
+		hdmi_phy: hdmi-phy@6010000 {
+			compatible = "allwinner,sun50i-h616-hdmi-phy";
+			reg = <0x06010000 0x10000>;
+			clocks = <&ccu CLK_BUS_HDMI>, <&ccu CLK_HDMI_SLOW>;
+			clock-names = "bus", "mod";
+			resets = <&ccu RST_BUS_HDMI_SUB>;
+			reset-names = "phy";
+			#phy-cells = <0>;
+		};
+
+		tcon_top: tcon-top@6510000 {
+			compatible = "allwinner,sun50i-h6-tcon-top";
+			reg = <0x06510000 0x1000>;
+			clocks = <&ccu CLK_BUS_TCON_TOP>,
+				 <&ccu CLK_TCON_TV0>;
+			clock-names = "bus",
+				      "tcon-tv0";
+			clock-output-names = "tcon-top-tv0";
+			resets = <&ccu RST_BUS_TCON_TOP>;
+			#clock-cells = <1>;
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				tcon_top_mixer0_in: port@0 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <0>;
+
+					tcon_top_mixer0_in_mixer0: endpoint@0 {
+						reg = <0>;
+						remote-endpoint = <&mixer0_out_tcon_top_mixer0>;
+					};
+				};
+
+				tcon_top_mixer0_out: port@1 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <1>;
+
+					tcon_top_mixer0_out_tcon_tv: endpoint@2 {
+						reg = <2>;
+						remote-endpoint = <&tcon_tv_in_tcon_top_mixer0>;
+					};
+				};
+
+				tcon_top_hdmi_in: port@4 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <4>;
+
+					tcon_top_hdmi_in_tcon_tv: endpoint@0 {
+						reg = <0>;
+						remote-endpoint = <&tcon_tv_out_tcon_top>;
+					};
+				};
+
+				tcon_top_hdmi_out: port@5 {
+					reg = <5>;
+
+					tcon_top_hdmi_out_hdmi: endpoint {
+						remote-endpoint = <&hdmi_in_tcon_top>;
+					};
+				};
+			};
+		};
+
+		tcon_tv: lcd-controller@6515000 {
+			compatible = "allwinner,sun50i-h6-tcon-tv",
+				     "allwinner,sun8i-r40-tcon-tv";
+			reg = <0x06515000 0x1000>;
+			interrupts = <GIC_SPI 66 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_TCON_TV0>,
+				 <&tcon_top CLK_TCON_TOP_TV0>;
+			clock-names = "ahb",
+				      "tcon-ch1";
+			resets = <&ccu RST_BUS_TCON_TV0>;
+			reset-names = "lcd";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				tcon_tv_in: port@0 {
+					reg = <0>;
+
+					tcon_tv_in_tcon_top_mixer0: endpoint {
+						remote-endpoint = <&tcon_top_mixer0_out_tcon_tv>;
+					};
+				};
+
+				tcon_tv_out: port@1 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <1>;
+
+					tcon_tv_out_tcon_top: endpoint@1 {
+						reg = <1>;
+						remote-endpoint = <&tcon_top_hdmi_in_tcon_tv>;
+					};
+				};
+			};
+		};
+
 		rtc: rtc@7000000 {
 			compatible = "allwinner,sun50i-h616-rtc";
 			reg = <0x07000000 0x400>;
@@ -688,11 +1320,14 @@
 		r_pio: pinctrl@7022000 {
 			compatible = "allwinner,sun50i-h616-r-pinctrl";
 			reg = <0x07022000 0x400>;
+			interrupts = <GIC_SPI 43 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&r_ccu CLK_R_APB1>, <&osc24M>,
 				 <&rtc CLK_OSC32K>;
 			clock-names = "apb", "hosc", "losc";
 			gpio-controller;
 			#gpio-cells = <3>;
+			interrupt-controller;
+			#interrupt-cells = <3>;
 
 			/omit-if-no-ref/
 			r_i2c_pins: r-i2c-pins {
@@ -747,5 +1382,162 @@
 			#address-cells = <1>;
 			#size-cells = <0>;
 		};
+
+		ths: thermal-sensor@5070400 {
+			/* The Thermal Sensor Controller(THS) embeds four thermal sensors,
+			sensor0 is located in GPU
+			sensor1 is located in VE
+			sensor2 is located in CPU
+			sensor3 is located in DDR
+			*/
+			compatible = "allwinner,sun50i-h616-ths";
+			reg = <0x05070400 0x400>;
+			interrupts = <GIC_SPI 19 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_THS>;
+			clock-names = "bus";
+			resets = <&ccu RST_BUS_THS>;
+			nvmem-cells = <&ths_calibration>;
+			nvmem-cell-names = "calibration";
+			#thermal-sensor-cells = <1>;
+		};
+
+		dump_reg: dump_reg@20000 {
+			compatible = "allwinner,sunxi-dump-reg";
+			reg = <0x0 0x03001000 0x0 0x0f20>;
+			status = "okay";
+		};
+
+		sunxi-info {
+			compatible = "allwinner,sun50i-h616-sys-info";
+			status = "okay";
+		};
+
+		addr_mgt: addr-mgt {
+			compatible = "allwinner,sunxi-addr_mgt";
+			type_addr_wifi = <0x2>;
+			type_addr_bt = <0x2>;
+			type_addr_eth = <0x2>;
+			status = "okay";
+		};
+
+		r_lradc: lradc@5070800 {
+			compatible = "allwinner,sun50i-h616-lradc";
+			reg = <0x05070800 0x400>;
+			interrupts = <GIC_SPI 20 IRQ_TYPE_EDGE_RISING>;
+			clocks = <&ccu CLK_BUS_KEYADC>;
+			resets = <&ccu RST_BUS_KEYADC>;
+			status = "disabled";
+		};
+	};
+
+	thermal-zones {
+		cpu-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 2>;
+
+			trips {
+				cpu_alert: cpu-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+
+				cpu-crit {
+					temperature = <100000>;
+					hysteresis = <0>;
+					type = "critical";
+				};
+			};
+
+			cooling-maps {
+				map0 {
+					trip = <&cpu_alert>;
+					cooling-device = <&cpu0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+					                 <&cpu1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+					                 <&cpu2 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+					                 <&cpu3 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+				};
+			};
+		};
+
+		gpu-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 0>;
+
+			trips {
+				gpu_alert: gpu-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+
+				gpu-crit {
+					temperature = <100000>;
+					hysteresis = <0>;
+					type = "critical";
+				};
+			};
+
+			cooling-maps {
+				map0 {
+					trip = <&gpu_alert>;
+					cooling-device = <&gpu THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+				};
+			};
+		};
+
+		ve-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 1>;
+
+			trips {
+				ve_alert: ve-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+			};
+		};
+
+		ddr-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 3>;
+
+			trips {
+				ddr_alert: ddr-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+			};
+		};
+	};
+
+	gpu_opp_table: gpu-opp-table {
+		compatible = "operating-points-v2";
+		opp-125000000 {
+			opp-hz = /bits/ 64 <125000000>;
+			opp-microvolt = <810000>;
+		};
+		opp-250000000 {
+			opp-hz = /bits/ 64 <250000000>;
+			opp-microvolt = <810000>;
+		};
+		opp-432000000 {
+			opp-hz = /bits/ 64 <432000000>;
+			opp-microvolt = <810000>;
+		};
+		opp-600000000 {
+			opp-hz = /bits/ 64 <600000000>;
+			opp-microvolt = <960000>;
+		};
+		opp-800000000 {
+			opp-hz = /bits/ 64 <800000000>;
+			opp-microvolt = <1080000>;
+		};
 	};
 };
diff '--color=auto' -urpN a/arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dts b/arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dts
--- a/arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dts	1970-01-01 01:00:00.000000000 +0100
+++ b/arch/arm64/boot/dts/allwinner/sun50i-h618-orangepi-zero2w.dts	2024-04-27 23:28:07.967003456 +0200
@@ -0,0 +1,472 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright (C) 2020 Arm Ltd.
+ */
+
+/dts-v1/;
+
+#include "sun50i-h616.dtsi"
+#include "sun50i-h616-cpu-opp.dtsi"
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/interrupt-controller/arm-gic.h>
+#include <dt-bindings/input/input.h>
+#include <dt-bindings/leds/common.h>
+
+/ {
+	model = "OrangePi Zero2 W";
+	compatible = "xunlong,orangepi-zero2w", "allwinner,sun50i-h616";
+
+	aliases {
+		serial0 = &uart0;
+		serial2 = &uart2;
+		serial3 = &uart3;
+		serial4 = &uart4;
+		serial5 = &uart5;
+		ethernet0 = &emac1;
+	};
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+
+	connector {
+		compatible = "hdmi-connector";
+		type = "d";
+
+		port {
+			hdmi_con_in: endpoint {
+				remote-endpoint = <&hdmi_out_con>;
+			};
+		};
+	};
+
+	leds: leds {
+		compatible = "gpio-leds";
+
+		led-green {
+			label = "green_led";
+			gpios = <&pio 2 13 GPIO_ACTIVE_HIGH>; /* PC13 */
+			linux,default-trigger = "heartbeat";
+		};
+
+		100m_link {
+			label = "100m_link";
+			gpios = <&pio 2 15 GPIO_ACTIVE_HIGH>; /* PC15 */
+			default-state = "off";
+		};
+
+		100m_act {
+			label = "100m_act";
+			gpios = <&pio 2 16 GPIO_ACTIVE_HIGH>; /* PC16 */
+			default-state = "off";
+		};
+	};
+
+	reg_vcc5v: vcc5v {
+		/* board wide 5V supply directly from the USB-C socket */
+		compatible = "regulator-fixed";
+		regulator-name = "vcc-5v";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-always-on;
+	};
+
+	reg_vcc33_wifi: vcc33-wifi {
+		/* Always on 3.3V regulator for WiFi and BT */
+		compatible = "regulator-fixed";
+		regulator-name = "vcc33-wifi";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+		vin-supply = <&reg_vcc5v>;
+	};
+
+	reg_vcc_wifi_io: vcc-wifi-io {
+		/* Always on 1.8V/300mA regulator for WiFi and BT IO */
+		compatible = "regulator-fixed";
+		regulator-name = "vcc-wifi-io";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+		regulator-always-on;
+		vin-supply = <&reg_vcc33_wifi>;
+	};
+
+	wifi_pwrseq: wifi-pwrseq {
+		compatible = "mmc-pwrseq-simple";
+		clocks = <&rtc 1>;
+		clock-names = "osc32k-out";
+		reset-gpios = <&pio 6 18 GPIO_ACTIVE_LOW>; /* PG18 */
+		post-power-on-delay-ms = <200>;
+	};
+
+	ac200_pwm_clk: ac200_clk {
+		compatible = "pwm-clock";
+		#clock-cells = <0>;
+		// pwm5 period_ns = 500 > 334 for select 24M clock.
+		pwms = <&pwm 5 500 0>;
+		clock-frequency = <2000000>;
+		status = "okay";
+	};
+};
+
+&pwm5 {
+	// clk_bypass_output = 1 for Clock direct output without frequency division
+	// so pwm5 output is 24MHz for AC200 & AC300 clock
+	clk_bypass_output = <0x1>;
+	status = "okay";
+};
+
+&de {
+	status = "okay";
+};
+
+&hdmi {
+	//hvcc-supply = <&reg_bldo1>;
+	status = "okay";
+};
+
+&hdmi_out {
+	hdmi_out_con: endpoint {
+		remote-endpoint = <&hdmi_con_in>;
+	};
+};
+
+&gpu {
+	mali-supply = <&reg_dcdc1>;
+	status = "disabled";
+};
+
+&mmc0 {
+	vmmc-supply = <&reg_dldo1>;
+	cd-gpios = <&pio 5 6 GPIO_ACTIVE_LOW>;	/* PF6 */
+	bus-width = <4>;
+	max-frequency = <50000000>;
+	status = "okay";
+};
+
+&mmc1 {
+	vmmc-supply = <&reg_vcc33_wifi>;
+	vqmmc-supply = <&reg_vcc_wifi_io>;
+	mmc-pwrseq = <&wifi_pwrseq>;
+	bus-width = <4>;
+	non-removable;
+	mmc-ddr-1_8v;
+	status = "okay";
+};
+
+&r_i2c {
+	status = "okay";
+
+	axp313a: pmic@36 {
+		compatible = "x-powers,axp313a";
+		reg = <0x36>;
+		wakeup-source;
+
+		interrupt-parent = <&pio>;
+		interrupts = <2 9 IRQ_TYPE_LEVEL_LOW>; /* PC9 */
+		interrupt-controller;
+		#interrupt-cells = <1>;
+
+		regulators{
+			reg_dcdc1: dcdc1 {
+				regulator-name = "axp313a-dcdc1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1100000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+
+			reg_dcdc2: dcdc2 {
+				regulator-name = "axp313a-dcdc2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1200000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-ramp-delay = <200>;
+				regulator-always-on;
+			};
+
+			reg_dcdc3: dcdc3 {
+				regulator-name = "axp313a-dcdc3";
+				regulator-min-microvolt = <1100000>;
+				regulator-max-microvolt = <1100000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+
+			reg_aldo1: ldo1 {
+				regulator-name = "axp313a-aldo1";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+
+			reg_dldo1: ldo2 {
+				regulator-name = "axp313a-dldo1";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+		};
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_ph_pins>;
+	status = "okay";
+};
+
+&usbotg {
+	/*
+	 * PHY0 pins are connected to a USB-C socket, but a role switch
+	 * is not implemented: both CC pins are pulled to GND.
+	 * The VBUS pins power the device, so a fixed peripheral mode
+	 * is the best choice.
+	 * The board can be powered via GPIOs, in this case port0 *can*
+	 * act as a host (with a cable/adapter ignoring CC), as VBUS is
+	 * then provided by the GPIOs. Any user of this setup would
+	 * need to adjust the DT accordingly: dr_mode set to "host",
+	 * enabling OHCI0 and EHCI0.
+	 */
+	dr_mode = "peripheral";
+	status = "okay";
+};
+
+&usbphy {
+	status = "okay";
+};
+
+&ehci0 {
+	status = "disabled";
+};
+
+&ehci1 {
+	status = "okay";
+};
+
+&ehci2 {
+	status = "okay";
+};
+
+&ehci3 {
+	status = "okay";
+};
+
+&ohci0 {
+	status = "disabled";
+};
+
+&ohci1 {
+	status = "okay";
+};
+
+&ohci2 {
+	status = "okay";
+};
+
+&ohci3 {
+	status = "okay";
+};
+
+&ir {
+	pinctrl-names = "default";
+	pinctrl-0 = <&ir_rx_pin>;
+	status = "okay";
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pi_pins>;
+	status = "disabled";
+};
+
+&i2c1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c1_pi_pins>;
+	status = "disabled";
+};
+
+&i2c2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c2_pi_pins>;
+	status = "disabled";
+};
+
+&i2c3 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c3_pa_pins>;
+
+	ac200_x: mfd@10 {
+		compatible = "x-powers,ac200";
+		reg = <0x10>;
+		clocks = <&ac200_pwm_clk>;
+		// ephy id
+		nvmem-cells = <&ephy_calibration>;
+		nvmem-cell-names = "calibration";
+
+		ac200_ephy: phy {
+			compatible = "x-powers,ac200-ephy";
+			status = "okay";
+		};
+	};
+};
+
+&i2c4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c4_ph_pins>;
+	status = "disabled";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart2_pi_pins>;
+	status = "disabled";
+};
+
+&uart3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart3_pi_pins>;
+	status = "disabled";
+};
+
+&uart4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart4_pi_pins>;
+	status = "disabled";
+};
+
+&uart5 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart5_ph_pins>;
+	status = "disabled";
+};
+
+&spi0  {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins>, <&spi0_cs0_pin>;
+
+	spidev@0 {
+		status = "disabled";
+		compatible = "rohm,dh2228fv";
+		reg = <0>;
+		spi-max-frequency = <1000000>;
+	};
+
+	flash@0 {
+		status = "okay";
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "jedec,spi-nor";
+		reg = <0>;
+		spi-max-frequency = <40000000>;
+	};
+};
+
+&spi1 {
+	status = "disabled";
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi1_pins>, <&spi1_cs1_pin>;
+
+	spidev@1 {
+		compatible = "rohm,dh2228fv";
+		status = "disabled";
+		reg = <1>;
+		spi-max-frequency = <1000000>;
+	};
+};
+
+&codec {
+	allwinner,audio-routing =
+	        "Line Out", "LINEOUT";
+	status = "okay";
+};
+
+&ahub_dam_plat {
+	status = "okay";
+};
+
+&ahub_dam_mach {
+	status = "okay";
+};
+
+&ahub1_plat {
+	status = "okay";
+};
+
+&ahub1_mach {
+	status = "okay";
+};
+
+&cpu0 {
+	cpu-supply = <&reg_dcdc2>;
+	status = "okay";
+};
+
+&pwm1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm1_pi_pin>;
+};
+
+&pwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm2_pi_pin>;
+};
+
+&pwm3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm3_pi_pin>;
+};
+
+&pwm4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm4_pi_pin>;
+};
+
+&emac1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&rmii_pins>;
+	phy-mode = "rmii";
+	phy-handle = <&rmii_phy>;
+	phy-supply = <&reg_dldo1>;
+	allwinner,rx-delay-ps = <3100>;
+	allwinner,tx-delay-ps = <700>;
+	status = "okay";
+};
+
+&mdio1 {
+	rmii_phy: ethernet-phy@1 {
+		compatible = "ethernet-phy-ieee802.3-c22";
+		reg = <1>;
+	};
+};
+
+&r_lradc {
+	vref-supply = <&reg_aldo1>;
+	status = "okay";
+
+	button-500 {
+		label = "KEY_1";
+		linux,code = <KEY_1>;
+		channel = <0>;
+		voltage = <500000>;
+	};
+
+	button-800 {
+		label = "KEY_ENTER";
+		linux,code = <KEY_ENTER>;
+		channel = <0>;
+		voltage = <800000>;
+	};
+};
diff '--color=auto' -urpN a/drivers/input/keyboard/sun4i-lradc-keys.c b/drivers/input/keyboard/sun4i-lradc-keys.c
--- a/drivers/input/keyboard/sun4i-lradc-keys.c	2024-04-17 11:19:38.000000000 +0200
+++ b/drivers/input/keyboard/sun4i-lradc-keys.c	2024-04-27 23:43:23.708778828 +0200
@@ -87,6 +87,13 @@ static const struct lradc_variant lradc_
 	.has_clock_reset = true,
 };
 
+static const struct lradc_variant lradc_variant_h616 = {
+	.divisor_numerator = 3,
+	.divisor_denominator = 4,
+	.has_clock_reset = true,
+};
+
+
 struct sun4i_lradc_keymap {
 	u32 voltage;
 	u32 keycode;
@@ -345,6 +352,8 @@ static const struct of_device_id sun4i_l
 		.data = &r_lradc_variant_a83t },
 	{ .compatible = "allwinner,sun50i-r329-lradc",
 		.data = &lradc_variant_r329 },
+	{ .compatible = "allwinner,sun50i-h616-lradc",
+		.data = &lradc_variant_h616 },
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, sun4i_lradc_of_match);
diff '--color=auto' -urpN a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
--- a/drivers/mfd/Kconfig	2024-04-17 11:19:38.000000000 +0200
+++ b/drivers/mfd/Kconfig	2024-04-27 23:31:25.060251705 +0200
@@ -191,6 +191,15 @@ config MFD_AC100
 	  This driver include only the core APIs. You have to select individual
 	  components like codecs or RTC under the corresponding menus.
 
+config MFD_AC200
+	bool "X-Powers AC200"
+	select MFD_CORE
+	depends on I2C
+	help
+	  If you say Y here you get support for the X-Powers AC200 IC.
+	  This driver include only the core APIs. You have to select individual
+	  components like Ethernet PHY or RTC under the corresponding menus.
+
 config MFD_AXP20X
 	tristate
 	select MFD_CORE
diff '--color=auto' -urpN a/drivers/mfd/Makefile b/drivers/mfd/Makefile
--- a/drivers/mfd/Makefile	2024-04-17 11:19:38.000000000 +0200
+++ b/drivers/mfd/Makefile	2024-04-27 23:32:42.732742493 +0200
@@ -139,6 +139,7 @@ obj-$(CONFIG_PMIC_DA9052)	+= da9052-core
 obj-$(CONFIG_MFD_DA9052_SPI)	+= da9052-spi.o
 obj-$(CONFIG_MFD_DA9052_I2C)	+= da9052-i2c.o
 
+obj-$(CONFIG_MFD_AC200)		+= sunxi-ac200.o
 obj-$(CONFIG_MFD_AC100)		+= ac100.o
 obj-$(CONFIG_MFD_AXP20X)	+= axp20x.o
 obj-$(CONFIG_MFD_AXP20X_I2C)	+= axp20x-i2c.o
diff '--color=auto' -urpN a/drivers/mfd/sunxi-ac200.c b/drivers/mfd/sunxi-ac200.c
--- a/drivers/mfd/sunxi-ac200.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/mfd/sunxi-ac200.c	2024-04-27 23:33:16.900958233 +0200
@@ -0,0 +1,286 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * MFD core driver for X-Powers' AC200 IC
+ *
+ * The AC200 is a chip which is co-packaged with Allwinner H6 SoC and
+ * includes analog audio codec, analog TV encoder, ethernet PHY, eFuse
+ * and RTC.
+ *
+ * Copyright (c) 2020 Jernej Skrabec <jernej.skrabec@siol.net>
+ */
+
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/mfd/core.h>
+#include <linux/mfd/ac200.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/nvmem-consumer.h>
+
+#define SUNXI_AC300_KEY	(0x1 << 8)
+
+/* Interrupts */
+#define AC200_IRQ_RTC  0
+#define AC200_IRQ_EPHY 1
+#define AC200_IRQ_TVE  2
+
+/* IRQ enable register */
+#define AC200_SYS_IRQ_ENABLE_OUT_EN BIT(15)
+#define AC200_SYS_IRQ_ENABLE_RTC    BIT(12)
+#define AC200_SYS_IRQ_ENABLE_EPHY   BIT(8)
+#define AC200_SYS_IRQ_ENABLE_TVE    BIT(4)
+
+static const struct regmap_range_cfg ac200_range_cfg[] = {
+	{
+		.range_min = AC200_SYS_VERSION,
+		.range_max = AC200_IC_CHARA1,
+		.selector_reg = AC200_TWI_REG_ADDR_H,
+		.selector_mask = 0xff,
+		.selector_shift = 0,
+		.window_start = 0,
+		.window_len = 256,
+	}
+};
+
+static const struct regmap_config ac200_regmap_config = {
+	.name = "ac200",
+	.reg_bits	= 8,
+	.val_bits	= 16,
+	.ranges		= ac200_range_cfg,
+	.num_ranges	= ARRAY_SIZE(ac200_range_cfg),
+	.max_register	= AC200_IC_CHARA1,
+};
+
+static const struct regmap_irq ac200_regmap_irqs[] = {
+	REGMAP_IRQ_REG(AC200_IRQ_RTC,  0, AC200_SYS_IRQ_ENABLE_RTC),
+	REGMAP_IRQ_REG(AC200_IRQ_EPHY, 0, AC200_SYS_IRQ_ENABLE_EPHY),
+	REGMAP_IRQ_REG(AC200_IRQ_TVE,  0, AC200_SYS_IRQ_ENABLE_TVE),
+};
+
+static const struct regmap_irq_chip ac200_regmap_irq_chip = {
+	.name			= "ac200_irq_chip",
+	.status_base		= AC200_SYS_IRQ_STATUS,
+	.mask_base		= AC200_SYS_IRQ_ENABLE,
+	.mask_invert		= true,
+	.irqs			= ac200_regmap_irqs,
+	.num_irqs		= ARRAY_SIZE(ac200_regmap_irqs),
+	.num_regs		= 1,
+};
+
+static const struct resource ephy_resource[] = {
+	DEFINE_RES_IRQ(AC200_IRQ_EPHY),
+};
+
+static const struct mfd_cell ac200_cells[] = {
+	{
+		.name		= "ac200-ephy",
+		.num_resources	= ARRAY_SIZE(ephy_resource),
+		.resources	= ephy_resource,
+		.of_compatible	= "x-powers,ac200-ephy",
+	},
+	{
+		.name = "acx00-codec",
+		.of_compatible	= "x-powers,ac200-codec",
+	},
+};
+
+atomic_t ac200_en;
+
+int ac200_enable(void)
+{
+    return atomic_read(&ac200_en);
+}
+
+static uint16_t ephy_caldata = 0;
+
+static int sun50i_ephy_get_calibrate(struct device *dev)
+{
+	struct nvmem_cell *calcell;
+	uint16_t *caldata;
+	size_t callen;
+	int ret = 0;
+
+	calcell = devm_nvmem_cell_get(dev, "calibration");
+	if (IS_ERR(calcell)) {
+		dev_err_probe(dev, PTR_ERR(calcell),
+			      "Failed to get calibration nvmem cell (%pe)\n",
+			      calcell);
+
+		if (PTR_ERR(calcell) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		goto out;
+	}
+
+	caldata = nvmem_cell_read(calcell, &callen);
+	if (IS_ERR(caldata)) {
+		ret = PTR_ERR(caldata);
+		dev_err(dev, "Failed to read calibration data (%pe)\n",
+			caldata);
+		goto out;
+	}
+
+    ephy_caldata = *caldata;
+	kfree(caldata);
+out:
+	return ret;
+}
+
+uint16_t sun50i_ephy_calibrate_value(void)
+{
+    return ephy_caldata;
+}
+
+static int ac200_i2c_probe(struct i2c_client *i2c,
+                           const struct i2c_device_id *id)
+{
+    struct device *dev = &i2c->dev;
+    struct ac200_dev *ac200;
+    uint32_t ephy_cal;
+    int ret;
+
+    // 24Mhz clock for both ac200 and ac300 devices
+    ac200 = devm_kzalloc(dev, sizeof(*ac200), GFP_KERNEL);
+    if (!ac200)
+        return -ENOMEM;
+
+    ac200->clk = devm_clk_get(dev, NULL);
+    if (IS_ERR(ac200->clk)) {
+        dev_err(dev, "Can't obtain the clock!\n");
+        return PTR_ERR(ac200->clk);
+    }
+
+    ret = clk_prepare_enable(ac200->clk);
+    if (ret) {
+        dev_err(dev, "rclk_prepare_enable failed! \n");
+        return ret;
+    }
+
+    ret = sun50i_ephy_get_calibrate(dev);
+	if (ret) {
+        dev_err(dev, "sun50i get ephy id failed\n");
+        return ret;
+    }
+    ephy_cal = sun50i_ephy_calibrate_value();
+
+    if (ephy_cal & SUNXI_AC300_KEY) {
+        pr_warn("it's ac300, skip the ac200 init!\n");
+        return -EINVAL;
+    } else {
+        pr_warn("it's ac200, ac200 init start!\n");
+    }
+
+    i2c_set_clientdata(i2c, ac200);
+
+    ac200->regmap = devm_regmap_init_i2c(i2c, &ac200_regmap_config);
+    if (IS_ERR(ac200->regmap))
+    {
+        ret = PTR_ERR(ac200->regmap);
+        dev_err(dev, "regmap init failed: %d\n", ret);
+        return ret;
+    }
+
+    /* do a reset to put chip in a known state */
+    ret = regmap_write(ac200->regmap, AC200_SYS_CONTROL, 0);
+    if (ret)
+    {
+        dev_err(dev, "AC200_SYS_CONTROL 0 failed! \n");
+        return ret;
+    }
+	atomic_set(&ac200_en, 0);
+
+    ret = regmap_write(ac200->regmap, AC200_SYS_CONTROL, 1);
+    if (ret)
+    {
+        dev_err(dev, "AC200_SYS_CONTROL 1 failed! \n");
+        return ret;
+    }
+	atomic_set(&ac200_en, 1);
+
+    ret = devm_mfd_add_devices(dev, PLATFORM_DEVID_NONE, ac200_cells,
+                               ARRAY_SIZE(ac200_cells), NULL, 0, NULL);
+    if (ret)
+    {
+        dev_err(dev, "failed to add MFD devices: %d\n", ret);
+        return ret;
+    }
+    else
+    {
+        dev_err(dev, "add MFD devices success! \n");
+    }
+
+    return 0;
+}
+
+static void ac200_i2c_remove(struct i2c_client *i2c)
+{
+	struct ac200_dev *ac200 = i2c_get_clientdata(i2c);
+
+	regmap_write(ac200->regmap, AC200_SYS_CONTROL, 0);
+
+	mfd_remove_devices(&i2c->dev);
+}static void ac200_i2c_shutdown(struct i2c_client *i2c)
+{
+    struct ac200_dev *ac200 = i2c_get_clientdata(i2c);
+
+    regmap_write(ac200->regmap, AC200_SYS_CONTROL, 0);
+}
+
+static int ac200_i2c_suspend(struct device *dev)
+{
+	struct ac200_dev *ac200 = dev_get_drvdata(dev);
+
+	if (!IS_ERR_OR_NULL(ac200->clk))
+		clk_disable_unprepare(ac200->clk);
+
+	atomic_set(&ac200_en, 0);
+	return 0;
+}
+
+static int ac200_i2c_resume(struct device *dev)
+{
+	struct ac200_dev *ac200 = dev_get_drvdata(dev);
+
+	if (!IS_ERR_OR_NULL(ac200->clk))
+		clk_prepare_enable(ac200->clk);
+
+	atomic_set(&ac200_en, 0);
+	msleep(40);
+    regmap_write(ac200->regmap, AC200_SYS_CONTROL, 1);
+	atomic_set(&ac200_en, 1);
+	return 0;
+}
+
+static const struct dev_pm_ops ac200_core_pm_ops = {
+	.suspend_late = ac200_i2c_suspend,
+	.resume_early = ac200_i2c_resume,
+};
+
+static const struct i2c_device_id ac200_ids[] = {
+	{ "ac200", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(i2c, ac200_ids);
+
+static const struct of_device_id ac200_of_match[] = {
+	{ .compatible = "x-powers,ac200" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, ac200_of_match);
+
+static struct i2c_driver ac200_i2c_driver = {
+	.driver = {
+		.name	= "ac200",
+		.of_match_table	= of_match_ptr(ac200_of_match),
+        .pm = &ac200_core_pm_ops,
+	},
+	.probe	= ac200_i2c_probe,
+	.remove = ac200_i2c_remove,
+    .shutdown = ac200_i2c_shutdown,
+	.id_table = ac200_ids,
+};
+module_i2c_driver(ac200_i2c_driver);
+
+MODULE_DESCRIPTION("MFD core driver for AC200");
+MODULE_AUTHOR("Jernej Skrabec <jernej.skrabec@siol.net>");
+MODULE_LICENSE("GPL v2");
diff '--color=auto' -urpN a/drivers/net/ethernet/allwinner/Kconfig b/drivers/net/ethernet/allwinner/Kconfig
--- a/drivers/net/ethernet/allwinner/Kconfig	2024-04-17 11:19:38.000000000 +0200
+++ b/drivers/net/ethernet/allwinner/Kconfig	2024-04-27 23:34:09.737291635 +0200
@@ -34,4 +34,13 @@ config SUN4I_EMAC
 	  To compile this driver as a module, choose M here.  The module
 	  will be called sun4i-emac.
 
+config SUNXI_GMAC
+    tristate "Allwinner GMAC support"
+	depends on ARCH_SUNXI
+	depends on OF
+	select CRC32
+	select MII
+	select PHYLIB
+	select MDIO_SUNXI
+
 endif # NET_VENDOR_ALLWINNER
diff '--color=auto' -urpN a/drivers/net/ethernet/allwinner/Makefile b/drivers/net/ethernet/allwinner/Makefile
--- a/drivers/net/ethernet/allwinner/Makefile	2024-04-17 11:19:38.000000000 +0200
+++ b/drivers/net/ethernet/allwinner/Makefile	2024-04-27 23:34:30.933425333 +0200
@@ -4,3 +4,4 @@
 #
 
 obj-$(CONFIG_SUN4I_EMAC) += sun4i-emac.o
+obj-$(CONFIG_SUNXI_GMAC) += sunxi-gmac.o sunxi_gmac_ops.o
diff '--color=auto' -urpN a/drivers/net/ethernet/allwinner/sunxi-gmac.c b/drivers/net/ethernet/allwinner/sunxi-gmac.c
--- a/drivers/net/ethernet/allwinner/sunxi-gmac.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/net/ethernet/allwinner/sunxi-gmac.c	2024-04-27 23:35:23.393756101 +0200
@@ -0,0 +1,2219 @@
+/*
+ * linux/drivers/net/ethernet/allwinner/sunxi_gmac.c
+ *
+ * Copyright © 2016-2018, fuzhaoke
+ *		Author: fuzhaoke <fuzhaoke@allwinnertech.com>
+ *
+ * This file is provided under a dual BSD/GPL license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ */
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/mii.h>
+#include <linux/gpio.h>
+#include <linux/crc32.h>
+#include <linux/skbuff.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/interrupt.h>
+#include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/crypto.h>
+#include <crypto/algapi.h>
+#include <crypto/hash.h>
+#include <linux/err.h>
+#include <linux/scatterlist.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of_net.h>
+#include <linux/of_gpio.h>
+#include <linux/io.h>
+#include "sunxi-gmac.h"
+#include <linux/timer.h>
+#include <linux/phylink.h>
+#include <linux/reset.h>
+
+
+int sunxi_get_soc_chipid(unsigned char *chipid);
+
+#define DMA_DESC_RX 256
+#define DMA_DESC_TX 256
+#define BUDGET      (dma_desc_rx / 4)
+#define TX_THRESH   (dma_desc_tx / 4)
+
+#define HASH_TABLE_SIZE 64
+#define MAX_BUF_SZ      (SZ_2K - 1)
+
+#define POWER_CHAN_NUM  3
+
+#undef PKT_DEBUG
+#undef DESC_PRINT
+
+#define circ_cnt(head, tail, size) (((head) > (tail)) ? ((head) - (tail)) : ((head) - (tail)) & ((size) - 1))
+
+#define circ_space(head, tail, size) circ_cnt((tail), ((head) + 1), (size))
+
+#define circ_inc(n, s) (((n) + 1) % (s))
+
+#define GETH_MAC_ADDRESS "01:02:03:04:05:06"
+static char *mac_str = GETH_MAC_ADDRESS;
+module_param(mac_str, charp, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(mac_str, "MAC Address String.(xx:xx:xx:xx:xx:xx)");
+
+static int rxmode = 1;
+module_param(rxmode, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(rxmode, "DMA threshold control value");
+
+static int txmode = 1;
+module_param(txmode, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(txmode, "DMA threshold control value");
+
+static int pause = 0x400;
+module_param(pause, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(pause, "Flow Control Pause Time");
+
+#define TX_TIMEO 5000
+static int watchdog = TX_TIMEO;
+module_param(watchdog, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(watchdog, "Transmit timeout in milliseconds");
+
+static int dma_desc_rx = DMA_DESC_RX;
+module_param(dma_desc_rx, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(watchdog, "The number of receive's descriptors");
+
+static int dma_desc_tx = DMA_DESC_TX;
+module_param(dma_desc_tx, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(watchdog, "The number of transmit's descriptors");
+
+/* - 0: Flow Off
+ * - 1: Rx Flow
+ * - 2: Tx Flow
+ * - 3: Rx & Tx Flow
+ */
+static int flow_ctrl;
+module_param(flow_ctrl, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(flow_ctrl, "Flow control [0: off, 1: rx, 2: tx, 3: both]");
+
+static unsigned long tx_delay;
+module_param(tx_delay, ulong, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(tx_delay, "Adjust transmit clock delay, value: 0~7");
+
+static unsigned long rx_delay;
+module_param(rx_delay, ulong, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(rx_delay, "Adjust receive clock delay, value: 0~31");
+
+/* whether using ephy_clk */
+static int g_use_ephy_clk;
+static int g_phy_addr;
+
+struct geth_priv {
+    struct dma_desc *dma_tx;
+    struct sk_buff **tx_sk;
+    unsigned int tx_clean;
+    unsigned int tx_dirty;
+    dma_addr_t dma_tx_phy;
+
+    struct reset_control *ephy_rst;
+
+    unsigned long buf_sz;
+
+    struct dma_desc *dma_rx;
+    struct sk_buff **rx_sk;
+    unsigned int rx_clean;
+    unsigned int rx_dirty;
+    dma_addr_t dma_rx_phy;
+
+    struct net_device *ndev;
+    struct device *dev;
+    struct napi_struct napi;
+
+    struct geth_extra_stats xstats;
+
+    struct mii_bus *mii;
+    int link;
+    int speed;
+    int duplex;
+#define INT_PHY 0
+#define EXT_PHY 1
+    int phy_ext;
+    int phy_interface;
+
+    void __iomem *base;
+    void __iomem *base_phy;
+    struct clk *geth_clk;
+    struct clk *ephy_clk;
+    struct pinctrl *pinctrl;
+
+    struct regulator *gmac_power[POWER_CHAN_NUM];
+    bool is_suspend;
+    int phyrst;
+    u8 rst_active_low;
+    /* definition spinlock */
+    spinlock_t lock;
+    spinlock_t tx_lock;
+
+    /* resume work */
+    struct work_struct eth_work;
+};
+
+static u64 geth_dma_mask = DMA_BIT_MASK(32);
+
+void sunxi_udelay(int n)
+{
+    udelay(n);
+}
+
+static int geth_stop(struct net_device *ndev);
+static int geth_open(struct net_device *ndev);
+static void geth_tx_complete(struct geth_priv *priv);
+static void geth_rx_refill(struct net_device *ndev);
+
+#ifdef CONFIG_GETH_ATTRS
+static ssize_t adjust_bgs_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+    int value = 0;
+    u32 efuse_value;
+    struct net_device *ndev = to_net_dev(dev);
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    if (priv->phy_ext == INT_PHY) {
+        value = readl(priv->base_phy) >> 28;
+        if (sunxi_efuse_read(EFUSE_OEM_NAME, &efuse_value) != 0)
+            pr_err("get PHY efuse fail!\n");
+        else
+#if defined(CONFIG_ARCH_SUN50IW2)
+            value = value - ((efuse_value >> 24) & 0x0F);
+#else
+            pr_warn("miss config come from efuse!\n");
+#endif
+    }
+
+    return sprintf(buf, "bgs: %d\n", value);
+}
+
+static ssize_t adjust_bgs_write(struct device *dev, struct device_attribute *attr,
+                                const char *buf, size_t count)
+{
+    unsigned int out = 0;
+    struct net_device *ndev = to_net_dev(dev);
+    struct geth_priv *priv = netdev_priv(ndev);
+    u32 clk_value = readl(priv->base_phy);
+    u32 efuse_value;
+
+    out = simple_strtoul(buf, NULL, 10);
+
+    if (priv->phy_ext == INT_PHY) {
+        clk_value &= ~(0xF << 28);
+        if (sunxi_efuse_read(EFUSE_OEM_NAME, &efuse_value) != 0)
+            pr_err("get PHY efuse fail!\n");
+        else
+#if defined(CONFIG_ARCH_SUN50IW2)
+            clk_value |= (((efuse_value >> 24) & 0x0F) + out) << 28;
+#else
+            pr_warn("miss config come from efuse!\n");
+#endif
+    }
+
+    writel(clk_value, priv->base_phy);
+
+    return count;
+}
+
+static struct device_attribute adjust_reg[] = {
+    __ATTR(adjust_bgs, 0664, adjust_bgs_show, adjust_bgs_write),
+};
+
+static int geth_create_attrs(struct net_device *ndev)
+{
+    int j, ret;
+
+    for (j = 0; j < ARRAY_SIZE(adjust_reg); j++) {
+        ret = device_create_file(&ndev->dev, &adjust_reg[j]);
+        if (ret)
+            goto sysfs_failed;
+    }
+    goto succeed;
+
+sysfs_failed:
+    while (j--)
+        device_remove_file(&ndev->dev, &adjust_reg[j]);
+succeed:
+    return ret;
+}
+#endif
+
+#ifdef DEBUG
+static void desc_print(struct dma_desc *desc, int size)
+{
+#ifdef DESC_PRINT
+    int i;
+
+    for (i = 0; i < size; i++) {
+        u32 *x = (u32 *)(desc + i);
+
+        pr_info("\t%d [0x%08lx]: %08x %08x %08x %08x\n",
+                i, (unsigned long)(&desc[i]),
+                x[0], x[1], x[2], x[3]);
+    }
+    pr_info("\n");
+#endif
+}
+#endif
+
+static ssize_t gphy_test_show(struct device *dev,
+                              struct device_attribute *attr, char *buf)
+{
+    struct net_device *ndev = dev_get_drvdata(dev);
+
+    if (!dev) {
+        pr_err("Argment is invalid\n");
+        return 0;
+    }
+
+    if (!ndev) {
+        pr_err("Net device is null\n");
+        return 0;
+    }
+
+    return sprintf(buf, "Usage:\necho [0/1/2/3/4] > gphy_test\n"
+                        "0 - Normal Mode\n"
+                        "1 - Transmit Jitter Test\n"
+                        "2 - Transmit Jitter Test(MASTER mode)\n"
+                        "3 - Transmit Jitter Test(SLAVE mode)\n"
+                        "4 - Transmit Distortion Test\n\n");
+}
+
+static ssize_t gphy_test_store(struct device *dev,
+                               struct device_attribute *attr, const char *buf, size_t count)
+{
+    struct net_device *ndev = dev_get_drvdata(dev);
+    struct geth_priv *priv = netdev_priv(ndev);
+    u16 value = 0;
+    int ret = 0;
+    u16 data = 0;
+
+    if (!dev) {
+        pr_err("Argument is invalid\n");
+        return count;
+    }
+
+    if (!ndev) {
+        pr_err("Net device is null\n");
+        return count;
+    }
+
+    data = sunxi_mdio_read(priv->base, g_phy_addr, MII_CTRL1000);
+
+    ret = kstrtou16(buf, 0, &value);
+    if (ret)
+        return ret;
+
+    if (value >= 0 && value <= 4) {
+        data &= ~(0x7 << 13);
+        data |= value << 13;
+        sunxi_mdio_write(priv->base, g_phy_addr, MII_CTRL1000, data);
+        pr_info("Set MII_CTRL1000(0x09) Reg: 0x%x\n", data);
+    } else {
+        pr_info("unknown value (%d)\n", value);
+    }
+
+    return count;
+}
+
+static DEVICE_ATTR(gphy_test, 0664, gphy_test_show, gphy_test_store);
+
+static struct mii_reg_dump mii_reg;
+
+static ssize_t mii_read_show(struct device *dev,
+                             struct device_attribute *attr, char *buf)
+{
+    struct net_device *ndev;
+    struct geth_priv *priv;
+
+    if (!dev) {
+        pr_err("Argment is invalid\n");
+        return 0;
+    }
+
+    ndev = dev_get_drvdata(dev);
+    if (!ndev) {
+        pr_err("Net device is null\n");
+        return 0;
+    }
+
+    priv = netdev_priv(ndev);
+    if (!priv) {
+        pr_err("geth_priv is null\n");
+        return 0;
+    }
+
+    if (!netif_running(ndev)) {
+        pr_warn("eth is down!\n");
+        return 0;
+    }
+
+    mii_reg.value = sunxi_mdio_read(priv->base, mii_reg.addr, mii_reg.reg);
+    return sprintf(buf, "ADDR[0x%02x]:REG[0x%02x] = 0x%04x\n",
+               mii_reg.addr, mii_reg.reg, mii_reg.value);
+}
+
+static ssize_t mii_read_store(struct device *dev,
+                              struct device_attribute *attr, const char *buf, size_t count)
+{
+    struct net_device *ndev;
+    struct geth_priv *priv;
+    int ret = 0;
+    u16 reg, addr;
+    char *ptr;
+
+    ptr = (char *)buf;
+
+    if (!dev) {
+        pr_err("Argment is invalid\n");
+        return count;
+    }
+
+    ndev = dev_get_drvdata(dev);
+    if (!ndev) {
+        pr_err("Net device is null\n");
+        return count;
+    }
+
+    priv = netdev_priv(ndev);
+    if (!priv) {
+        pr_err("geth_priv is null\n");
+        return count;
+    }
+
+    if (!netif_running(ndev)) {
+        pr_warn("eth is down!\n");
+        return count;
+    }
+
+    ret = sunxi_parse_read_str(ptr, &addr, &reg);
+    if (ret)
+        return ret;
+
+    mii_reg.addr = addr;
+    mii_reg.reg = reg;
+
+    return count;
+}
+
+static DEVICE_ATTR(mii_read, 0664, mii_read_show, mii_read_store);
+
+static ssize_t mii_write_show(struct device *dev,
+                              struct device_attribute *attr, char *buf)
+{
+    struct net_device *ndev;
+    struct geth_priv *priv;
+    u16 bef_val, aft_val;
+
+    if (!dev) {
+        pr_err("Argment is invalid\n");
+        return 0;
+    }
+
+    ndev = dev_get_drvdata(dev);
+    if (!ndev) {
+        pr_err("Net device is null\n");
+        return 0;
+    }
+
+    priv = netdev_priv(ndev);
+    if (!priv) {
+        pr_err("geth_priv is null\n");
+        return 0;
+    }
+
+    if (!netif_running(ndev)) {
+        pr_warn("eth is down!\n");
+        return 0;
+    }
+
+    bef_val = sunxi_mdio_read(priv->base, mii_reg.addr, mii_reg.reg);
+    sunxi_mdio_write(priv->base, mii_reg.addr, mii_reg.reg, mii_reg.value);
+    aft_val = sunxi_mdio_read(priv->base, mii_reg.addr, mii_reg.reg);
+    return sprintf(buf, "before ADDR[0x%02x]:REG[0x%02x] = 0x%04x\n"
+                "after  ADDR[0x%02x]:REG[0x%02x] = 0x%04x\n",
+                mii_reg.addr, mii_reg.reg, bef_val,
+                mii_reg.addr, mii_reg.reg, aft_val);
+}
+
+static ssize_t mii_write_store(struct device *dev,
+                               struct device_attribute *attr, const char *buf, size_t count)
+{
+    struct net_device *ndev;
+    struct geth_priv *priv;
+    int ret = 0;
+    u16 reg, addr, val;
+    char *ptr;
+
+    ptr = (char *)buf;
+
+    if (!dev) {
+        pr_err("Argment is invalid\n");
+        return count;
+    }
+
+    ndev = dev_get_drvdata(dev);
+    if (!ndev) {
+        pr_err("Net device is null\n");
+        return count;
+    }
+
+    priv = netdev_priv(ndev);
+    if (!priv) {
+        pr_err("geth_priv is null\n");
+        return count;
+    }
+
+    if (!netif_running(ndev)) {
+        pr_warn("eth is down!\n");
+        return count;
+    }
+
+    ret = sunxi_parse_write_str(ptr, &addr, &reg, &val);
+    if (ret)
+        return ret;
+
+    mii_reg.reg = reg;
+    mii_reg.addr = addr;
+    mii_reg.value = val;
+
+    return count;
+}
+
+static DEVICE_ATTR(mii_write, 0664, mii_write_show, mii_write_store);
+
+static int geth_power_on(struct geth_priv *priv)
+{
+    int value;
+    int i;
+
+    value = readl(priv->base_phy);
+    if (priv->phy_ext == INT_PHY) {
+        value |= (1 << 15);
+        value &= ~(1 << 16);
+        value |= (3 << 17);
+    } else {
+        value &= ~(1 << 15);
+
+        for (i = 0; i < POWER_CHAN_NUM; i++) {
+            if (IS_ERR_OR_NULL(priv->gmac_power[i]))
+                continue;
+            if (regulator_enable(priv->gmac_power[i]) != 0) {
+                pr_err("gmac-power%d enable error\n", i);
+                return -EINVAL;
+            }
+        }
+    }
+
+    writel(value, priv->base_phy);
+
+    return 0;
+}
+
+static void geth_power_off(struct geth_priv *priv)
+{
+    int value;
+    int i;
+
+    if (priv->phy_ext == INT_PHY) {
+        value = readl(priv->base_phy);
+        value |= (1 << 16);
+        writel(value, priv->base_phy);
+    } else {
+        for (i = 0; i < POWER_CHAN_NUM; i++) {
+            if (IS_ERR_OR_NULL(priv->gmac_power[i]))
+                continue;
+            regulator_disable(priv->gmac_power[i]);
+        }
+    }
+}
+
+/* PHY interface operations */
+static int geth_mdio_read(struct mii_bus *bus, int phyaddr, int phyreg)
+{
+    struct net_device *ndev = bus->priv;
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    return (int)sunxi_mdio_read(priv->base, phyaddr, phyreg);
+}
+
+static int geth_mdio_write(struct mii_bus *bus, int phyaddr, int phyreg, u16 data)
+{
+    struct net_device *ndev = bus->priv;
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    sunxi_mdio_write(priv->base, phyaddr, phyreg, data);
+
+    return 0;
+}
+
+static int geth_mdio_reset(struct mii_bus *bus)
+{
+    struct net_device *ndev = bus->priv;
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    return sunxi_mdio_reset(priv->base);
+}
+
+static void geth_adjust_link(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct phy_device *phydev = ndev->phydev;
+    unsigned long flags;
+    int new_state = 0;
+
+    if (!phydev)
+        return;
+
+    spin_lock_irqsave(&priv->lock, flags);
+    if (phydev->link) {
+        /* Now we make sure that we can be in full duplex mode.
+         * If not, we operate in half-duplex mode.
+         */
+        if (phydev->duplex != priv->duplex) {
+            new_state = 1;
+            priv->duplex = phydev->duplex;
+        }
+        /* Flow Control operation */
+        if (phydev->pause)
+            sunxi_flow_ctrl(priv->base, phydev->duplex, flow_ctrl, pause);
+
+        if (phydev->speed != priv->speed) {
+            new_state = 1;
+            priv->speed = phydev->speed;
+        }
+
+        if (priv->link == 0) {
+            new_state = 1;
+            priv->link = phydev->link;
+        }
+
+        if (new_state)
+            sunxi_set_link_mode(priv->base, priv->duplex, priv->speed);
+
+#ifdef LOOPBACK_DEBUG
+        phydev->state = PHY_FORCING;
+#endif
+
+    } else if (priv->link != phydev->link) {
+        new_state = 1;
+        priv->link = 0;
+        priv->speed = 0;
+        priv->duplex = -1;
+    }
+
+    if (new_state)
+        phy_print_status(phydev);
+
+    spin_unlock_irqrestore(&priv->lock, flags);
+}
+
+static int geth_phy_init(struct net_device *ndev)
+{
+    int value;
+    struct mii_bus *new_bus;
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct phy_device *phydev = ndev->phydev;
+    u32 supported = 0, advertising = 0;
+
+    /* Fixup the phy interface type */
+    if (priv->phy_ext == INT_PHY) {
+        priv->phy_interface = PHY_INTERFACE_MODE_MII;
+    } else {
+        /* If config gpio to reset the phy device, we should reset it */
+        if (gpio_is_valid(priv->phyrst)) {
+            gpio_direction_output(priv->phyrst, priv->rst_active_low);
+            msleep(50);
+            gpio_direction_output(priv->phyrst, !priv->rst_active_low);
+            msleep(50);
+        }
+    }
+
+    new_bus = mdiobus_alloc();
+    if (!new_bus) {
+        netdev_err(ndev, "Failed to alloc new mdio bus\n");
+        return -ENOMEM;
+    }
+
+    new_bus->name = dev_name(priv->dev);
+    new_bus->read = &geth_mdio_read;
+    new_bus->write = &geth_mdio_write;
+    new_bus->reset = &geth_mdio_reset;
+    snprintf(new_bus->id, MII_BUS_ID_SIZE, "%s-%x", new_bus->name, 0);
+
+    new_bus->parent = priv->dev;
+    new_bus->priv = ndev;
+
+    if (mdiobus_register(new_bus)) {
+        pr_err("%s: Cannot register as MDIO bus\n", new_bus->name);
+        goto reg_fail;
+    }
+
+    priv->mii = new_bus;
+
+    {
+        int addr;
+        for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
+            struct phy_device *phydev_tmp = mdiobus_get_phy(new_bus, addr);
+
+            if (IS_ERR_OR_NULL(phydev_tmp) || phydev_tmp->phy_id == 0xffff) {
+                if (!IS_ERR_OR_NULL(phydev_tmp))
+                    phy_device_remove(phydev_tmp);
+                phydev_tmp = mdiobus_scan(new_bus, addr);
+            }
+
+            if (IS_ERR_OR_NULL(phydev_tmp) || phydev_tmp->phy_id == 0xffff ||
+                phydev_tmp->phy_id == 0x00 || phydev_tmp->phy_id == AC300_ID)
+                continue;
+
+            if (phydev_tmp->phy_id == EPHY_ID || phydev_tmp->phy_id == IP101G_ID) {
+                phydev = phydev_tmp;
+                g_phy_addr = addr;
+                break;
+            }
+        }
+    }
+
+    if (!phydev) {
+        netdev_err(ndev, "No PHY found!\n");
+        goto err;
+    }
+
+    phy_write(phydev, MII_BMCR, BMCR_RESET);
+    while (BMCR_RESET & phy_read(phydev, MII_BMCR))
+        msleep(30);
+
+    value = phy_read(phydev, MII_BMCR);
+    phy_write(phydev, MII_BMCR, (value & ~BMCR_PDOWN));
+
+    phydev->irq = PHY_POLL;
+
+    value = phy_connect_direct(ndev, phydev, &geth_adjust_link, priv->phy_interface);
+    if (value) {
+        netdev_err(ndev, "Could not attach to PHY\n");
+        goto err;
+    } else {
+        netdev_info(ndev, "%s: Type(%d) PHY ID %08x at %d IRQ %s (%s)\n",
+                ndev->name, phydev->interface, phydev->phy_id,
+                phydev->mdio.addr, "poll", dev_name(&phydev->mdio.dev));
+    }
+
+#if 0
+    phydev->supported &= PHY_GBIT_FEATURES; //kandy 000002cf
+    phydev->advertising = phydev->supported;
+#else
+
+    ethtool_convert_link_mode_to_legacy_u32(&supported, phydev->supported);
+
+    advertising = supported &= *PHY_BASIC_FEATURES; // kandy 000002cf
+
+    ethtool_convert_legacy_u32_to_link_mode(phydev->supported, supported);
+    ethtool_convert_legacy_u32_to_link_mode(phydev->advertising, advertising);
+#endif
+
+    if (priv->phy_ext == INT_PHY) {
+        /* EPHY Initial */
+        phy_write(phydev, 0x1f, 0x0100); /* switch to page 1 */
+        phy_write(phydev, 0x12, 0x4824); /* Disable APS */
+        phy_write(phydev, 0x1f, 0x0200); /* switchto page 2 */
+        phy_write(phydev, 0x18, 0x0000); /* PHYAFE TRX optimization */
+        phy_write(phydev, 0x1f, 0x0600); /* switchto page 6 */
+        phy_write(phydev, 0x14, 0x708F); /* PHYAFE TX optimization */
+        phy_write(phydev, 0x19, 0x0000);
+        phy_write(phydev, 0x13, 0xf000); /* PHYAFE RX optimization */
+        phy_write(phydev, 0x15, 0x1530);
+        phy_write(phydev, 0x1f, 0x0800); /* switch to page 8 */
+        phy_write(phydev, 0x18, 0x00bc); /* PHYAFE TRX optimization */
+        phy_write(phydev, 0x1f, 0x0100); /* switchto page 1 */
+        /* reg 0x17 bit3,set 0 to disable iEEE */
+        phy_write(phydev, 0x17, phy_read(phydev, 0x17) & (~(1<<3)));
+        phy_write(phydev, 0x1f, 0x0000); /* switch to page 0 */
+    }
+
+    return 0;
+
+err:
+    mdiobus_unregister(new_bus);
+reg_fail:
+    mdiobus_free(new_bus);
+
+    return -EINVAL;
+}
+
+static int geth_phy_release(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct phy_device *phydev = ndev->phydev;
+    int value = 0;
+
+    /* Stop and disconnect the PHY */
+    if (phydev)
+        phy_stop(phydev);
+
+    priv->link = PHY_DOWN;
+    priv->speed = 0;
+    priv->duplex = -1;
+
+    if (phydev) {
+        value = phy_read(phydev, MII_BMCR);
+        phy_write(phydev, MII_BMCR, (value | BMCR_PDOWN));
+        phy_disconnect(phydev);
+        ndev->phydev = NULL;
+    }
+
+#if 1 // defined(CONFIG_SUNXI_EPHY)
+    gmac_ephy_shutdown(); /* Turn off the clock of PHY for low power consumption  */
+#endif
+
+    if (priv->mii) {
+        mdiobus_unregister(priv->mii);
+        priv->mii->priv = NULL;
+        mdiobus_free(priv->mii);
+        priv->mii = NULL;
+    }
+
+    return 0;
+}
+
+static void geth_rx_refill(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct dma_desc *desc;
+    struct sk_buff *sk = NULL;
+    dma_addr_t paddr;
+
+    while (circ_space(priv->rx_clean, priv->rx_dirty, dma_desc_rx) > 0) {
+        int entry = priv->rx_clean;
+
+        /* Find the dirty's desc and clean it */
+        desc = priv->dma_rx + entry;
+
+        if (priv->rx_sk[entry] == NULL) {
+            sk = netdev_alloc_skb_ip_align(ndev, priv->buf_sz);
+
+            if (unlikely(sk == NULL))
+                break;
+
+            priv->rx_sk[entry] = sk;
+            paddr = dma_map_single(priv->dev, sk->data,
+                           priv->buf_sz, DMA_FROM_DEVICE);
+            desc_buf_set(desc, paddr, priv->buf_sz);
+        }
+
+        /* sync memery */
+        wmb();
+        desc_set_own(desc);
+        priv->rx_clean = circ_inc(priv->rx_clean, dma_desc_rx);
+    }
+}
+
+/* geth_dma_desc_init - initialize the RX/TX descriptor list
+ * @ndev: net device structure
+ * Description: initialize the list for dma.
+ */
+static int geth_dma_desc_init(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    unsigned int buf_sz;
+
+    priv->rx_sk = kzalloc(sizeof(struct sk_buff *) * dma_desc_rx, GFP_KERNEL);
+    if (!priv->rx_sk)
+        return -ENOMEM;
+
+    priv->tx_sk = kzalloc(sizeof(struct sk_buff *) * dma_desc_tx, GFP_KERNEL);
+    if (!priv->tx_sk)
+        goto tx_sk_err;
+
+    /* Set the size of buffer depend on the MTU & max buf size */
+    buf_sz = MAX_BUF_SZ;
+
+    priv->dma_tx = dma_alloc_coherent(priv->dev,
+                                      dma_desc_tx * sizeof(struct dma_desc),
+                                      &priv->dma_tx_phy,
+                                      GFP_KERNEL);
+    if (!priv->dma_tx)
+        goto dma_tx_err;
+
+    priv->dma_rx = dma_alloc_coherent(priv->dev,
+                                      dma_desc_rx * sizeof(struct dma_desc),
+                                      &priv->dma_rx_phy,
+                                      GFP_KERNEL);
+    if (!priv->dma_rx)
+        goto dma_rx_err;
+
+    priv->buf_sz = buf_sz;
+
+    return 0;
+
+dma_rx_err:
+    dma_free_coherent(priv->dev, dma_desc_rx * sizeof(struct dma_desc), priv->dma_tx, priv->dma_tx_phy);
+dma_tx_err:
+    kfree(priv->tx_sk);
+tx_sk_err:
+    kfree(priv->rx_sk);
+
+    return -ENOMEM;
+}
+
+static void geth_free_rx_sk(struct geth_priv *priv)
+{
+    int i;
+
+    for (i = 0; i < dma_desc_rx; i++) {
+        if (priv->rx_sk[i] != NULL) {
+            struct dma_desc *desc = priv->dma_rx + i;
+
+            dma_unmap_single(priv->dev, (u32)desc_buf_get_addr(desc), desc_buf_get_len(desc), DMA_FROM_DEVICE);
+            dev_kfree_skb_any(priv->rx_sk[i]);
+            priv->rx_sk[i] = NULL;
+        }
+    }
+}
+
+static void geth_free_tx_sk(struct geth_priv *priv)
+{
+    int i;
+
+    for (i = 0; i < dma_desc_tx; i++) {
+        if (priv->tx_sk[i] != NULL) {
+            struct dma_desc *desc = priv->dma_tx + i;
+
+            if (desc_buf_get_addr(desc))
+                dma_unmap_single(priv->dev, (u32)desc_buf_get_addr(desc), desc_buf_get_len(desc), DMA_TO_DEVICE);
+            dev_kfree_skb_any(priv->tx_sk[i]);
+            priv->tx_sk[i] = NULL;
+        }
+    }
+}
+
+static void geth_free_dma_desc(struct geth_priv *priv)
+{
+    /* Free the region of consistent memory previously allocated for the DMA */
+    dma_free_coherent(priv->dev, dma_desc_tx * sizeof(struct dma_desc), priv->dma_tx, priv->dma_tx_phy);
+    dma_free_coherent(priv->dev, dma_desc_rx * sizeof(struct dma_desc), priv->dma_rx, priv->dma_rx_phy);
+
+    kfree(priv->rx_sk);
+    kfree(priv->tx_sk);
+}
+
+#ifdef CONFIG_PM
+static int geth_select_gpio_state(struct pinctrl *pctrl, char *name)
+{
+    int ret = 0;
+    struct pinctrl_state *pctrl_state = NULL;
+
+    pctrl_state = pinctrl_lookup_state(pctrl, name);
+    if (IS_ERR(pctrl_state)) {
+        pr_err("gmac pinctrl_lookup_state(%s) failed! return %p\n", name, pctrl_state);
+        return -EINVAL;
+    }
+
+    ret = pinctrl_select_state(pctrl, pctrl_state);
+    if (ret < 0)
+        pr_err("gmac pinctrl_select_state(%s) failed! return %d\n", name, ret);
+
+    return ret;
+}
+
+static int geth_suspend(struct device *dev)
+{
+    struct net_device *ndev = dev_get_drvdata(dev);
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    cancel_work_sync(&priv->eth_work);
+
+    if (!ndev || !netif_running(ndev))
+        return 0;
+
+    spin_lock(&priv->lock);
+    netif_device_detach(ndev);
+    spin_unlock(&priv->lock);
+
+    geth_stop(ndev);
+
+    if (priv->phy_ext == EXT_PHY)
+        geth_select_gpio_state(priv->pinctrl, PINCTRL_STATE_SLEEP);
+
+    return 0;
+}
+
+static void geth_resume_work(struct work_struct *work)
+{
+    struct geth_priv *priv = container_of(work, struct geth_priv, eth_work);
+    struct net_device *ndev = priv->ndev;
+
+    if (!netif_running(ndev))
+        return;
+
+    if (priv->phy_ext == EXT_PHY)
+        geth_select_gpio_state(priv->pinctrl, PINCTRL_STATE_DEFAULT);
+
+    geth_open(ndev);
+
+#if 1 //defined(CONFIG_SUNXI_EPHY)
+    if (!ephy_is_enable()) {
+        pr_info("[geth_resume] ephy is not enable, waiting...\n");
+        msleep(2000);
+        if (!ephy_is_enable()) {
+            netdev_err(ndev, "Wait for ephy resume timeout.\n");
+            return;
+        }
+    }
+#endif
+
+    spin_lock(&priv->lock);
+    netif_device_attach(ndev);
+    spin_unlock(&priv->lock);
+
+}
+
+static void geth_resume(struct device *dev)
+{
+    struct net_device *ndev = dev_get_drvdata(dev);
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    schedule_work(&priv->eth_work);
+}
+
+
+
+static int ucc_geth_suspend(struct platform_device *ofdev, pm_message_t state)
+{
+	struct net_device *ndev = platform_get_drvdata(ofdev);
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    cancel_work_sync(&priv->eth_work);
+
+    if (!ndev || !netif_running(ndev))
+        return 0;
+
+    spin_lock(&priv->lock);
+    netif_device_detach(ndev);
+    spin_unlock(&priv->lock);
+
+    geth_stop(ndev);
+
+    if (priv->phy_ext == EXT_PHY)
+        geth_select_gpio_state(priv->pinctrl, PINCTRL_STATE_SLEEP);
+
+
+	return 0;
+}
+
+static int ucc_geth_resume(struct platform_device *ofdev)
+{
+	struct net_device *ndev = platform_get_drvdata(ofdev);
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    schedule_work(&priv->eth_work);
+
+
+	return 0;
+}
+
+static int geth_freeze(struct device *dev)
+{
+    return 0;
+}
+
+static int geth_restore(struct device *dev)
+{
+    return 0;
+}
+
+static const struct dev_pm_ops geth_pm_ops = {
+    .complete = geth_resume,
+    .prepare = geth_suspend,
+    .suspend = NULL,
+    .resume = NULL,
+    .freeze = geth_freeze,
+    .restore = geth_restore,
+};
+#else
+static const struct dev_pm_ops geth_pm_ops;
+#endif /* CONFIG_PM */
+
+/*#define sunxi_get_soc_chipid(x) {}*/
+static void geth_chip_hwaddr(u8 *addr)
+{
+#define MD5_SIZE 16
+#define CHIP_SIZE 16
+
+    struct crypto_ahash *tfm;
+    struct ahash_request *req;
+    struct scatterlist sg;
+    u8 result[MD5_SIZE];
+    u8 chipid[CHIP_SIZE];
+    int i = 0;
+    int ret = -1;
+
+    memset(chipid, 0, sizeof(chipid));
+    memset(result, 0, sizeof(result));
+
+    sunxi_get_soc_chipid((u8 *)chipid);
+
+    tfm = crypto_alloc_ahash("md5", 0, CRYPTO_ALG_ASYNC);
+    if (IS_ERR(tfm)) {
+        pr_err("Failed to alloc md5\n");
+        return;
+    }
+
+    req = ahash_request_alloc(tfm, GFP_KERNEL);
+    if (!req)
+        goto out;
+
+    ahash_request_set_callback(req, 0, NULL, NULL);
+
+    ret = crypto_ahash_init(req);
+    if (ret) {
+        pr_err("crypto_ahash_init() failed\n");
+        goto out;
+    }
+
+    sg_init_one(&sg, chipid, sizeof(chipid));
+    ahash_request_set_crypt(req, &sg, result, sizeof(chipid));
+    ret = crypto_ahash_update(req);
+    if (ret) {
+        pr_err("crypto_ahash_update() failed for id\n");
+        goto out;
+    }
+
+    ret = crypto_ahash_final(req);
+    if (ret) {
+        pr_err("crypto_ahash_final() failed for result\n");
+        goto out;
+    }
+
+    ahash_request_free(req);
+
+    /* Choose md5 result's [0][2][4][6][8][10] byte as mac address */
+    for (i = 0; i < ETH_ALEN; i++)
+        addr[i] = result[2 * i];
+    addr[0] &= 0xfe; /* clear multicast bit */
+    addr[0] |= 0x02; /* set local assignment bit (IEEE802) */
+
+out:
+    crypto_free_ahash(tfm);
+}
+
+static void geth_check_addr(struct net_device *ndev, unsigned char *mac)
+{
+    int i;
+    char *p = mac;
+    u8 addr[ETH_ALEN];
+
+    if (!is_valid_ether_addr(ndev->dev_addr)) {
+        for (i = 0; i < ETH_ALEN; i++, p++)
+            addr[i] = simple_strtoul(p, &p, 16);
+
+        if (!is_valid_ether_addr(addr))
+            geth_chip_hwaddr(addr);
+
+        if (!is_valid_ether_addr(addr)) {
+            eth_random_addr(addr);
+            pr_warn("%s: Use random mac address\n", ndev->name);
+        }
+    }
+
+    eth_hw_addr_set(ndev, addr);
+}
+
+static void geth_clk_enable(struct geth_priv *priv)
+{
+    int phy_interface = 0;
+    u32 clk_value;
+    u32 efuse_value;
+
+    if (clk_prepare_enable(priv->geth_clk))
+        pr_err("try to enable geth_clk failed!\n");
+
+    if (((priv->phy_ext == INT_PHY) || g_use_ephy_clk) && !IS_ERR_OR_NULL(priv->ephy_clk)) {
+        if (clk_prepare_enable(priv->ephy_clk))
+            pr_err("try to enable ephy_clk failed!\n");
+    }
+
+    phy_interface = priv->phy_interface;
+
+    clk_value = readl(priv->base_phy);
+    if (phy_interface == PHY_INTERFACE_MODE_RGMII)
+        clk_value |= 0x00000004;
+    else
+        clk_value &= (~0x00000004);
+
+    clk_value &= (~0x00002003);
+    if (phy_interface == PHY_INTERFACE_MODE_RGMII || phy_interface == PHY_INTERFACE_MODE_GMII)
+        clk_value |= 0x00000002;
+    else if (phy_interface == PHY_INTERFACE_MODE_RMII)
+        clk_value |= 0x00002001;
+
+    if (priv->phy_ext == INT_PHY) {
+//         if (0 != sunxi_efuse_read(EFUSE_OEM_NAME, &efuse_value))
+//             pr_err("get PHY efuse fail!\n");
+//         else
+// #if defined(CONFIG_ARCH_SUN50IW2)
+//             clk_value |= (((efuse_value >> 24) & 0x0F) + 3) << 28;
+// #else
+//             pr_warn("miss config come from efuse!\n");
+// #endif
+    }
+
+    /* Adjust Tx/Rx clock delay */
+    clk_value &= ~(0x07 << 10);
+    clk_value |= ((tx_delay & 0x07) << 10);
+    clk_value &= ~(0x1F << 5);
+    clk_value |= ((rx_delay & 0x1F) << 5);
+
+    writel(clk_value, priv->base_phy);
+}
+
+static void geth_clk_disable(struct geth_priv *priv)
+{
+    if (((priv->phy_ext == INT_PHY) || g_use_ephy_clk) && !IS_ERR_OR_NULL(priv->ephy_clk))
+        clk_disable_unprepare(priv->ephy_clk);
+
+    clk_disable_unprepare(priv->geth_clk);
+}
+
+static void geth_tx_err(struct geth_priv *priv)
+{
+    netif_stop_queue(priv->ndev);
+
+    sunxi_stop_tx(priv->base);
+
+    geth_free_tx_sk(priv);
+    memset(priv->dma_tx, 0, dma_desc_tx * sizeof(struct dma_desc));
+    desc_init_chain(priv->dma_tx, (unsigned long)priv->dma_tx_phy, dma_desc_tx);
+    priv->tx_dirty = 0;
+    priv->tx_clean = 0;
+    sunxi_start_tx(priv->base, priv->dma_tx_phy);
+
+    priv->ndev->stats.tx_errors++;
+    netif_wake_queue(priv->ndev);
+}
+
+static inline void geth_schedule(struct geth_priv *priv)
+{
+    if (likely(napi_schedule_prep(&priv->napi))) {
+        sunxi_int_disable(priv->base);
+        __napi_schedule(&priv->napi);
+    }
+}
+
+static irqreturn_t geth_interrupt(int irq, void *dev_id)
+{
+    struct net_device *ndev = (struct net_device *)dev_id;
+    struct geth_priv *priv = netdev_priv(ndev);
+    int status;
+
+    if (unlikely(!ndev)) {
+        pr_err("%s: invalid ndev pointer\n", __func__);
+        return IRQ_NONE;
+    }
+
+    status = sunxi_int_status(priv->base, (void *)(&priv->xstats));
+
+    if (likely(status == handle_tx_rx))
+        geth_schedule(priv);
+    else if (unlikely(status == tx_hard_error_bump_tc))
+        netdev_info(ndev, "Do nothing for bump tc\n");
+    else if (unlikely(status == tx_hard_error))
+        geth_tx_err(priv);
+    else
+        netdev_info(ndev, "Do nothing.....\n");
+
+    return IRQ_HANDLED;
+}
+
+static int geth_open(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    int ret = 0;
+
+    ret = geth_dma_desc_init(ndev);
+    if (ret) {
+        ret = -EINVAL;
+        return ret;
+    }
+
+    ret = geth_power_on(priv);
+    if (ret) {
+        netdev_err(ndev, "Power on is failed\n");
+        ret = -EINVAL;
+        goto power_err;
+    }
+
+    geth_clk_enable(priv);
+
+    ret = geth_phy_init(ndev);
+    if (ret) {
+        netdev_err(ndev, "phy init again...\n");
+        ret = geth_phy_init(ndev);
+        if (ret) {
+            netdev_err(ndev, "phy init failed\n");
+            ret = -EINVAL;
+            goto phy_err;
+        }
+    }
+
+    ret = sunxi_mac_reset((void *)priv->base, &sunxi_udelay, 10000);
+    if (ret) {
+        netdev_err(ndev, "Initialize hardware error\n");
+        goto mac_err;
+    }
+
+    sunxi_mac_init(priv->base, txmode, rxmode);
+    sunxi_set_umac(priv->base, ndev->dev_addr, 0);
+
+    memset(priv->dma_tx, 0, dma_desc_tx * sizeof(struct dma_desc));
+    memset(priv->dma_rx, 0, dma_desc_rx * sizeof(struct dma_desc));
+
+    desc_init_chain(priv->dma_rx, (unsigned long)priv->dma_rx_phy, dma_desc_rx);
+    desc_init_chain(priv->dma_tx, (unsigned long)priv->dma_tx_phy, dma_desc_tx);
+
+    priv->rx_clean = 0;
+    priv->rx_dirty = 0;
+    priv->tx_clean = 0;
+    priv->tx_dirty = 0;
+    geth_rx_refill(ndev);
+
+    /* Extra statistics */
+    memset(&priv->xstats, 0, sizeof(struct geth_extra_stats));
+
+    if (ndev->phydev)
+        phy_start(ndev->phydev);
+
+    sunxi_start_rx(priv->base, (unsigned long)((struct dma_desc *)priv->dma_rx_phy + priv->rx_dirty));
+    sunxi_start_tx(priv->base, (unsigned long)((struct dma_desc *)priv->dma_tx_phy + priv->tx_clean));
+
+    /* Enable the Rx/Tx */
+    sunxi_mac_enable(priv->base);
+
+    netif_carrier_on(ndev);
+
+    napi_enable(&priv->napi);
+    netif_start_queue(ndev);
+
+    return 0;
+
+mac_err:
+    geth_phy_release(ndev);
+phy_err:
+    geth_clk_disable(priv);
+
+    geth_power_off(priv);
+
+power_err:
+    geth_free_dma_desc(priv);
+
+    return ret;
+}
+
+static int geth_stop(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    netif_stop_queue(ndev);
+    napi_disable(&priv->napi);
+
+    netif_carrier_off(ndev);
+
+    /* Release PHY resources */
+    geth_phy_release(ndev);
+
+    /* Disable Rx/Tx */
+    sunxi_mac_disable(priv->base);
+
+    geth_clk_disable(priv);
+    geth_power_off(priv);
+
+    netif_tx_lock_bh(ndev);
+    /* Release the DMA TX/RX socket buffers */
+    geth_free_rx_sk(priv);
+    geth_free_tx_sk(priv);
+    netif_tx_unlock_bh(ndev);
+
+    /* Ensure that hareware have been stopped */
+    geth_free_dma_desc(priv);
+
+    return 0;
+}
+
+static void geth_tx_complete(struct geth_priv *priv)
+{
+    unsigned int entry = 0;
+    struct sk_buff *skb = NULL;
+    struct dma_desc *desc = NULL;
+    int tx_stat;
+
+    spin_lock(&priv->tx_lock);
+    while (circ_cnt(priv->tx_dirty, priv->tx_clean, dma_desc_tx) > 0) {
+        entry = priv->tx_clean;
+        desc = priv->dma_tx + entry;
+
+        /* Check if the descriptor is owned by the DMA. */
+        if (desc_get_own(desc))
+            break;
+
+        /* Verify tx error by looking at the last segment */
+        if (desc_get_tx_ls(desc)) {
+            tx_stat = desc_get_tx_status(desc, (void *)(&priv->xstats));
+
+            if (likely(!tx_stat))
+                priv->ndev->stats.tx_packets++;
+            else
+                priv->ndev->stats.tx_errors++;
+        }
+
+        dma_unmap_single(priv->dev, (u32)desc_buf_get_addr(desc), desc_buf_get_len(desc), DMA_TO_DEVICE);
+
+        skb = priv->tx_sk[entry];
+        priv->tx_sk[entry] = NULL;
+        desc_init(desc);
+
+        /* Find next dirty desc */
+        priv->tx_clean = circ_inc(entry, dma_desc_tx);
+
+        if (unlikely(skb == NULL))
+            continue;
+
+        dev_kfree_skb(skb);
+    }
+
+    if (unlikely(netif_queue_stopped(priv->ndev)) && circ_space(priv->tx_dirty, priv->tx_clean, dma_desc_tx) > TX_THRESH) {
+        netif_wake_queue(priv->ndev);
+    }
+    spin_unlock(&priv->tx_lock);
+}
+
+static netdev_tx_t geth_xmit(struct sk_buff *skb, struct net_device *ndev)
+{
+    struct geth_priv  *priv = netdev_priv(ndev);
+    unsigned int entry;
+    struct dma_desc *desc, *first;
+    unsigned int len, tmp_len = 0;
+    int i, csum_insert;
+    int nfrags = skb_shinfo(skb)->nr_frags;
+    dma_addr_t paddr;
+
+    spin_lock(&priv->tx_lock);
+    if (unlikely(circ_space(priv->tx_dirty, priv->tx_clean, dma_desc_tx) < (nfrags + 1))) {
+        if (!netif_queue_stopped(ndev)) {
+            netdev_err(ndev, "%s: BUG! Tx Ring full when queue awake\n", __func__);
+            netif_stop_queue(ndev);
+        }
+        spin_unlock(&priv->tx_lock);
+
+        return NETDEV_TX_BUSY;
+    }
+
+    csum_insert = (skb->ip_summed == CHECKSUM_PARTIAL);
+    entry = priv->tx_dirty;
+    first = priv->dma_tx + entry;
+    desc = priv->dma_tx + entry;
+
+    len = skb_headlen(skb);
+    priv->tx_sk[entry] = skb;
+
+#ifdef PKT_DEBUG
+    printk("======TX PKT DATA: ============\n");
+    /* dump the packet */
+    print_hex_dump(KERN_DEBUG, "skb->data: ", DUMP_PREFIX_NONE,
+                   16, 1, skb->data, 64, true);
+#endif
+
+    /* Every desc max size is 2K */
+    while (len != 0) {
+        desc = priv->dma_tx + entry;
+        tmp_len = ((len > MAX_BUF_SZ) ? MAX_BUF_SZ : len);
+
+        paddr = dma_map_single(priv->dev, skb->data, tmp_len, DMA_TO_DEVICE);
+        if (dma_mapping_error(priv->dev, paddr)) {
+            dev_kfree_skb(skb);
+            return -EIO;
+        }
+        desc_buf_set(desc, paddr, tmp_len);
+        /* Don't set the first's own bit, here */
+        if (first != desc) {
+            priv->tx_sk[entry] = NULL;
+            desc_set_own(desc);
+        }
+
+        entry = circ_inc(entry, dma_desc_tx);
+        len -= tmp_len;
+    }
+
+    for (i = 0; i < nfrags; i++) {
+        const skb_frag_t *frag = &skb_shinfo(skb)->frags[i];
+
+        len = skb_frag_size(frag);
+        desc = priv->dma_tx + entry;
+        paddr = skb_frag_dma_map(priv->dev, frag, 0, len, DMA_TO_DEVICE);
+        if (dma_mapping_error(priv->dev, paddr)) {
+            dev_kfree_skb(skb);
+            return -EIO;
+        }
+
+        desc_buf_set(desc, paddr, len);
+        desc_set_own(desc);
+        priv->tx_sk[entry] = NULL;
+        entry = circ_inc(entry, dma_desc_tx);
+    }
+
+    ndev->stats.tx_bytes += skb->len;
+    priv->tx_dirty = entry;
+    desc_tx_close(first, desc, csum_insert);
+
+    desc_set_own(first);
+    spin_unlock(&priv->tx_lock);
+
+    if (circ_space(priv->tx_dirty, priv->tx_clean, dma_desc_tx) <= (MAX_SKB_FRAGS + 1)) {
+        netif_stop_queue(ndev);
+        if (circ_space(priv->tx_dirty, priv->tx_clean, dma_desc_tx) > TX_THRESH)
+            netif_wake_queue(ndev);
+    }
+
+#ifdef DEBUG
+    printk("=======TX Descriptor DMA: 0x%08llx\n", priv->dma_tx_phy);
+    printk("Tx pointor: dirty: %d, clean: %d\n", priv->tx_dirty, priv->tx_clean);
+    desc_print(priv->dma_tx, dma_desc_tx);
+#endif
+    sunxi_tx_poll(priv->base);
+    geth_tx_complete(priv);
+
+    return NETDEV_TX_OK;
+}
+
+static int geth_rx(struct geth_priv *priv, int limit)
+{
+    unsigned int rxcount = 0;
+    unsigned int entry;
+    struct dma_desc *desc;
+    struct sk_buff *skb;
+    int status;
+    int frame_len;
+
+    while (rxcount < limit) {
+        entry = priv->rx_dirty;
+        desc = priv->dma_rx + entry;
+
+        if (desc_get_own(desc))
+            break;
+
+        rxcount++;
+        priv->rx_dirty = circ_inc(priv->rx_dirty, dma_desc_rx);
+
+        /* Get length & status from hardware */
+        frame_len = desc_rx_frame_len(desc);
+        status = desc_get_rx_status(desc, (void *)(&priv->xstats));
+
+        netdev_dbg(priv->ndev, "Rx frame size %d, status: %d\n", frame_len, status);
+
+        skb = priv->rx_sk[entry];
+        if (unlikely(!skb)) {
+            netdev_err(priv->ndev, "Skb is null\n");
+            priv->ndev->stats.rx_dropped++;
+            break;
+        }
+
+#ifdef PKT_DEBUG
+        printk("======RX PKT DATA: ============\n");
+        /* dump the packet */
+        print_hex_dump(KERN_DEBUG, "skb->data: ", DUMP_PREFIX_NONE,
+                       16, 1, skb->data, 64, true);
+#endif
+
+        if (status == discard_frame) {
+            netdev_dbg(priv->ndev, "Get error pkt\n");
+            priv->ndev->stats.rx_errors++;
+            continue;
+        }
+
+        if (unlikely(status != llc_snap))
+            frame_len -= ETH_FCS_LEN;
+
+        priv->rx_sk[entry] = NULL;
+
+        skb_put(skb, frame_len);
+        dma_unmap_single(priv->dev, (u32)desc_buf_get_addr(desc), desc_buf_get_len(desc), DMA_FROM_DEVICE);
+
+        skb->protocol = eth_type_trans(skb, priv->ndev);
+
+        skb->ip_summed = CHECKSUM_UNNECESSARY;
+        napi_gro_receive(&priv->napi, skb);
+
+        priv->ndev->stats.rx_packets++;
+        priv->ndev->stats.rx_bytes += frame_len;
+    }
+
+#ifdef DEBUG
+    if (rxcount > 0) {
+        printk("======RX Descriptor DMA: 0x%08llx=\n", priv->dma_rx_phy);
+        printk("RX pointor: dirty: %d, clean: %d\n", priv->rx_dirty, priv->rx_clean);
+        desc_print(priv->dma_rx, dma_desc_rx);
+    }
+#endif
+    geth_rx_refill(priv->ndev);
+
+    return rxcount;
+}
+
+static int geth_poll(struct napi_struct *napi, int budget)
+{
+    struct geth_priv *priv = container_of(napi, struct geth_priv, napi);
+    int work_done = 0;
+
+    geth_tx_complete(priv);
+    work_done = geth_rx(priv, budget);
+
+    if (work_done < budget) {
+        napi_complete(napi);
+        sunxi_int_enable(priv->base);
+    }
+
+    return work_done;
+}
+
+static int geth_change_mtu(struct net_device *ndev, int new_mtu)
+{
+    int max_mtu;
+
+    if (netif_running(ndev)) {
+        pr_err("%s: must be stopped to change its MTU\n", ndev->name);
+        return -EBUSY;
+    }
+
+    max_mtu = SKB_MAX_HEAD(NET_SKB_PAD + NET_IP_ALIGN);
+
+    if ((new_mtu < 46) || (new_mtu > max_mtu)) {
+        pr_err("%s: invalid MTU, max MTU is: %d\n", ndev->name, max_mtu);
+        return -EINVAL;
+    }
+
+    ndev->mtu = new_mtu;
+    netdev_update_features(ndev);
+
+    return 0;
+}
+
+static netdev_features_t geth_fix_features(struct net_device *ndev, netdev_features_t features)
+{
+    return features;
+}
+
+static void geth_set_rx_mode(struct net_device *ndev)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    unsigned int value = 0;
+
+    pr_debug("%s: # mcasts %d, # unicast %d\n",
+             __func__, netdev_mc_count(ndev), netdev_uc_count(ndev));
+
+    spin_lock(&priv->lock);
+    if (ndev->flags & IFF_PROMISC) {
+        value = GETH_FRAME_FILTER_PR;
+    } else if ((netdev_mc_count(ndev) > HASH_TABLE_SIZE) ||
+               (ndev->flags & IFF_ALLMULTI)) {
+        value = GETH_FRAME_FILTER_PM; /* pass all multi */
+        sunxi_hash_filter(priv->base, ~0UL, ~0UL);
+    } else if (!netdev_mc_empty(ndev)) {
+        u32 mc_filter[2];
+        struct netdev_hw_addr *ha;
+
+        /* Hash filter for multicast */
+        value = GETH_FRAME_FILTER_HMC;
+
+        memset(mc_filter, 0, sizeof(mc_filter));
+        netdev_for_each_mc_addr(ha, ndev) {
+            /* The upper 6 bits of the calculated CRC are used to
+             *  index the contens of the hash table
+             */
+            int bit_nr = bitrev32(~crc32_le(~0, ha->addr, 6)) >> 26;
+            /* The most significant bit determines the register to
+             * use (H/L) while the other 5 bits determine the bit
+             * within the register.
+             */
+            mc_filter[bit_nr >> 5] |= 1 << (bit_nr & 31);
+        }
+        sunxi_hash_filter(priv->base, mc_filter[0], mc_filter[1]);
+    }
+
+    /* Handle multiple unicast addresses (perfect filtering)*/
+    if (netdev_uc_count(ndev) > 16) {
+        /* Switch to promiscuous mode is more than 8 addrs are required */
+        value |= GETH_FRAME_FILTER_PR;
+    } else {
+        int reg = 1;
+        struct netdev_hw_addr *ha;
+
+        netdev_for_each_uc_addr(ha, ndev) {
+            sunxi_set_umac(priv->base, ha->addr, reg);
+            reg++;
+        }
+    }
+
+#ifdef FRAME_FILTER_DEBUG
+    /* Enable Receive all mode (to debug filtering_fail errors) */
+    value |= GETH_FRAME_FILTER_RA;
+#endif
+    sunxi_set_filter(priv->base, value);
+    spin_unlock(&priv->lock);
+}
+
+static void geth_tx_timeout(struct net_device *ndev, unsigned int txqueue)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    geth_tx_err(priv);
+}
+
+static int geth_ioctl(struct net_device *ndev, struct ifreq *rq, int cmd)
+{
+    if (!netif_running(ndev))
+        return -EINVAL;
+
+    if (!ndev->phydev)
+        return -EINVAL;
+
+    return phy_mii_ioctl(ndev->phydev, rq, cmd);
+}
+
+/* Configuration changes (passed on by ifconfig) */
+static int geth_config(struct net_device *ndev, struct ifmap *map)
+{
+    if (ndev->flags & IFF_UP) /* can't act on a running interface */
+        return -EBUSY;
+
+    /* Don't allow changing the I/O address */
+    if (map->base_addr != ndev->base_addr) {
+        pr_warn("%s: can't change I/O address\n", ndev->name);
+        return -EOPNOTSUPP;
+    }
+
+    /* Don't allow changing the IRQ */
+    if (map->irq != ndev->irq) {
+        pr_warn("%s: can't change IRQ number %d\n", ndev->name, ndev->irq);
+        return -EOPNOTSUPP;
+    }
+
+    return 0;
+}
+
+static int geth_set_mac_address(struct net_device *ndev, void *p)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct sockaddr *addr = p;
+
+    if (!is_valid_ether_addr(addr->sa_data))
+        return -EADDRNOTAVAIL;
+
+	eth_hw_addr_set(ndev, addr->sa_data);
+
+    sunxi_set_umac(priv->base, ndev->dev_addr, 0);
+
+    return 0;
+}
+
+int geth_set_features(struct net_device *ndev, netdev_features_t features)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    if (features & NETIF_F_LOOPBACK && netif_running(ndev))
+        sunxi_mac_loopback(priv->base, 1);
+    else
+        sunxi_mac_loopback(priv->base, 0);
+
+    return 0;
+}
+
+#ifdef CONFIG_NET_POLL_CONTROLLER
+/* Polling receive - used by NETCONSOLE and other diagnostic tools
+ * to allow network I/O with interrupts disabled.
+ */
+static void geth_poll_controller(struct net_device *dev)
+{
+    disable_irq(dev->irq);
+    geth_interrupt(dev->irq, dev);
+    enable_irq(dev->irq);
+}
+#endif
+
+static const struct net_device_ops geth_netdev_ops = {
+    .ndo_init = NULL,
+    .ndo_open = geth_open,
+    .ndo_start_xmit = geth_xmit,
+    .ndo_stop = geth_stop,
+    .ndo_change_mtu = geth_change_mtu,
+    .ndo_fix_features = geth_fix_features,
+    .ndo_set_rx_mode = geth_set_rx_mode,
+    .ndo_tx_timeout = geth_tx_timeout,
+    .ndo_do_ioctl = geth_ioctl,
+    .ndo_set_config = geth_config,
+#ifdef CONFIG_NET_POLL_CONTROLLER
+    .ndo_poll_controller = geth_poll_controller,
+#endif
+    .ndo_set_mac_address = geth_set_mac_address,
+    .ndo_set_features = geth_set_features,
+};
+
+static int geth_check_if_running(struct net_device *ndev)
+{
+    if (!netif_running(ndev))
+        return -EBUSY;
+    return 0;
+}
+
+static int geth_get_sset_count(struct net_device *netdev, int sset)
+{
+    int len;
+
+    switch (sset) {
+    case ETH_SS_STATS:
+        len = 0;
+        return len;
+    default:
+        return -EOPNOTSUPP;
+    }
+}
+
+#if 0
+static int geth_ethtool_getsettings(struct net_device *ndev,
+                    struct ethtool_cmd *cmd)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct phy_device *phy = ndev->phydev;
+    int rc;
+
+    if (phy == NULL) {
+        netdev_err(ndev, "%s: %s: PHY is not registered\n",
+               __func__, ndev->name);
+        return -ENODEV;
+    }
+
+    if (!netif_running(ndev)) {
+        pr_err("%s: interface is disabled: we cannot track "
+               "link speed / duplex setting\n", ndev->name);
+        return -EBUSY;
+    }
+
+    cmd->transceiver = XCVR_INTERNAL;
+    spin_lock_irq(&priv->lock);
+    rc = phy_ethtool_gset(phy, cmd);
+    spin_unlock_irq(&priv->lock);
+
+    return rc;
+}
+
+static int geth_ethtool_setsettings(struct net_device *ndev,
+                    struct ethtool_cmd *cmd)
+{
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct phy_device *phy = ndev->phydev;
+    int rc;
+
+    spin_lock(&priv->lock);
+    rc = phy_ethtool_sset(phy, cmd);
+    spin_unlock(&priv->lock);
+
+    return rc;
+}
+#endif
+
+static void geth_ethtool_getdrvinfo(struct net_device *ndev,
+                                    struct ethtool_drvinfo *info)
+{
+    strlcpy(info->driver, "sunxi_geth", sizeof(info->driver));
+
+#define DRV_MODULE_VERSION "SUNXI Gbgit driver V1.1"
+
+    strcpy(info->version, DRV_MODULE_VERSION);
+    info->fw_version[0] = '\0';
+}
+
+static const struct ethtool_ops geth_ethtool_ops = {
+    .begin = geth_check_if_running,
+    // .get_settings = geth_ethtool_getsettings,
+    // .set_settings = geth_ethtool_setsettings,
+    .get_link_ksettings = phy_ethtool_get_link_ksettings,
+    .set_link_ksettings = phy_ethtool_set_link_ksettings,
+    .get_link = ethtool_op_get_link,
+    .get_pauseparam = NULL,
+    .set_pauseparam = NULL,
+    .get_ethtool_stats = NULL,
+    .get_strings = NULL,
+    .get_wol = NULL,
+    .set_wol = NULL,
+    .get_sset_count = geth_get_sset_count,
+    .get_drvinfo = geth_ethtool_getdrvinfo,
+};
+
+struct gpio_config {
+	u32	gpio;
+	u32	mul_sel;
+	u32	pull;
+	u32	drv_level;
+	u32	data;
+};
+
+/* config hardware resource */
+static int geth_hw_init(struct platform_device *pdev)
+{
+    struct net_device *ndev = platform_get_drvdata(pdev);
+    struct geth_priv *priv = netdev_priv(ndev);
+    struct device_node *np = pdev->dev.of_node;
+    int ret = 0;
+    struct resource *res;
+    u32 value;
+    struct gpio_config cfg;
+    const char *gmac_power;
+    char power[20];
+    int i;
+
+// #ifdef CONFIG_SUNXI_EXT_PHY
+    priv->phy_ext = EXT_PHY;
+// #else
+//     priv->phy_ext = INT_PHY;
+// #endif
+
+    /* config memery resource */
+    res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+    if (unlikely(!res)) {
+        pr_err("%s: ERROR: get gmac memory failed", __func__);
+        return -ENODEV;
+    }
+
+    priv->base = devm_ioremap_resource(&pdev->dev, res);
+    if (!priv->base) {
+        pr_err("%s: ERROR: gmac memory mapping failed", __func__);
+        return -ENOMEM;
+    }
+
+    res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+    if (unlikely(!res)) {
+        pr_err("%s: ERROR: get phy memory failed", __func__);
+        ret = -ENODEV;
+        goto mem_err;
+    }
+
+    priv->base_phy = devm_ioremap_resource(&pdev->dev, res);
+    if (unlikely(!priv->base_phy)) {
+        pr_err("%s: ERROR: phy memory mapping failed", __func__);
+        ret = -ENOMEM;
+        goto mem_err;
+    }
+
+    /* config IRQ */
+    ndev->irq = platform_get_irq_byname(pdev, "gmacirq");
+    if (ndev->irq == -ENXIO) {
+        pr_err("%s: ERROR: MAC IRQ not found\n", __func__);
+        ret = -ENXIO;
+        goto irq_err;
+    }
+
+    ret = request_irq(ndev->irq, geth_interrupt, IRQF_SHARED, dev_name(&pdev->dev), ndev);
+    if (unlikely(ret < 0)) {
+        pr_err("Could not request irq %d, error: %d\n", ndev->irq, ret);
+        goto irq_err;
+    }
+
+    /* config clock */
+    priv->geth_clk = of_clk_get_by_name(np, "bus-emac1");
+    if (unlikely(!priv->geth_clk || IS_ERR(priv->geth_clk))) {
+        pr_err("Get gmac clock failed!\n");
+        ret = -EINVAL;
+        goto clk_err;
+    }
+
+    if (INT_PHY == priv->phy_ext) {
+        priv->ephy_clk = of_clk_get_by_name(np, "emac-25m");
+        if (unlikely(IS_ERR_OR_NULL(priv->ephy_clk))) {
+            pr_err("Get ephy clock failed!\n");
+            ret = -EINVAL;
+            goto clk_err;
+        }
+    }
+#if 1 // defined(CONFIG_ARCH_SUN8IW12) || defined(CONFIG_ARCH_SUN50IW9)
+    else {
+        if (!of_property_read_u32(np, "use_ephy25m", &g_use_ephy_clk)
+                && g_use_ephy_clk) {
+            priv->ephy_clk = of_clk_get_by_name(np, "ephy");
+            if (unlikely(IS_ERR_OR_NULL(priv->ephy_clk))) {
+                pr_err("Get ephy clk failed!\n");
+                ret = -EINVAL;
+                goto clk_err;
+            }
+        }
+    }
+#endif
+
+    /* config power regulator */
+    if (EXT_PHY == priv->phy_ext) {
+        for (i = 0; i < POWER_CHAN_NUM; i++) {
+            snprintf(power, 15, "gmac-power%d", i);
+            ret = of_property_read_string(np, power, &gmac_power);
+            if (ret) {
+                priv->gmac_power[i] = NULL;
+                pr_info("gmac-power%d: NULL\n", i);
+                continue;
+            }
+            priv->gmac_power[i] = regulator_get(NULL, gmac_power);
+            if (IS_ERR(priv->gmac_power[i])) {
+                pr_err("gmac-power%d get error!\n", i);
+                ret = -EINVAL;
+                goto clk_err;
+            }
+        }
+    }
+
+    // /* config other parameters */
+    // priv->phy_interface = of_get_phy_mode(np);
+    // if (priv->phy_interface != PHY_INTERFACE_MODE_MII &&
+    //     priv->phy_interface != PHY_INTERFACE_MODE_RGMII &&
+    //     priv->phy_interface != PHY_INTERFACE_MODE_RMII) {
+    //     pr_err("Not support phy type!\n");
+    //     priv->phy_interface = PHY_INTERFACE_MODE_MII;
+    // }
+
+    priv->phy_interface = PHY_INTERFACE_MODE_RMII;
+
+    if (!of_property_read_u32(np, "tx-delay", &value))
+        tx_delay = value;
+
+    if (!of_property_read_u32(np, "rx-delay", &value))
+        rx_delay = value;
+
+    /* config pinctrl */
+    if (EXT_PHY == priv->phy_ext) {
+        priv->phyrst = of_get_named_gpio_flags(np, "phy-rst", 0, (enum of_gpio_flags *)&cfg);
+        priv->rst_active_low = (cfg.data == OF_GPIO_ACTIVE_LOW) ? 1 : 0;
+
+        if (gpio_is_valid(priv->phyrst)) {
+            if (gpio_request(priv->phyrst, "phy-rst") < 0) {
+                pr_err("gmac gpio request fail!\n");
+                ret = -EINVAL;
+                goto pin_err;
+            }
+        }
+
+        priv->pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
+        if (IS_ERR_OR_NULL(priv->pinctrl)) {
+            pr_err("gmac pinctrl error!\n");
+            priv->pinctrl = NULL;
+            ret = -EINVAL;
+            goto pin_err;
+        }
+    }
+
+    priv->ephy_rst = devm_reset_control_get_optional(&pdev->dev, "stmmaceth");
+    reset_control_assert(priv->ephy_rst);
+    reset_control_deassert(priv->ephy_rst);
+
+    msleep(800);
+
+    return 0;
+
+pin_err:
+    if (EXT_PHY == priv->phy_ext) {
+        for (i = 0; i < POWER_CHAN_NUM; i++) {
+            if (IS_ERR_OR_NULL(priv->gmac_power[i]))
+                continue;
+            regulator_put(priv->gmac_power[i]);
+        }
+    }
+clk_err:
+    free_irq(ndev->irq, ndev);
+irq_err:
+    devm_iounmap(&pdev->dev, priv->base_phy);
+mem_err:
+    devm_iounmap(&pdev->dev, priv->base);
+
+    return ret;
+}
+
+static void geth_hw_release(struct platform_device *pdev)
+{
+    struct net_device *ndev = platform_get_drvdata(pdev);
+    struct geth_priv *priv = netdev_priv(ndev);
+    int i;
+
+    devm_iounmap(&pdev->dev, (priv->base_phy));
+    devm_iounmap(&pdev->dev, priv->base);
+    free_irq(ndev->irq, ndev);
+    if (priv->geth_clk)
+        clk_put(priv->geth_clk);
+
+    if (EXT_PHY == priv->phy_ext) {
+        for (i = 0; i < POWER_CHAN_NUM; i++) {
+            if (IS_ERR_OR_NULL(priv->gmac_power[i]))
+                continue;
+            regulator_put(priv->gmac_power[i]);
+        }
+
+        if (!IS_ERR_OR_NULL(priv->pinctrl))
+            devm_pinctrl_put(priv->pinctrl);
+
+        if (gpio_is_valid(priv->phyrst))
+            gpio_free(priv->phyrst);
+    }
+
+    if (!IS_ERR_OR_NULL(priv->ephy_clk))
+        clk_put(priv->ephy_clk);
+}
+
+/**
+ * geth_probe
+ * @pdev: platform device pointer
+ * Description: the driver is initialized through platform_device.
+ */
+static int geth_probe(struct platform_device *pdev)
+{
+    int ret = 0;
+    struct net_device *ndev = NULL;
+    struct geth_priv *priv;
+
+#ifdef CONFIG_OF
+    pdev->dev.dma_mask = &geth_dma_mask;
+    pdev->dev.coherent_dma_mask = DMA_BIT_MASK(32);
+#endif
+
+    ndev = alloc_etherdev(sizeof(struct geth_priv));
+    if (!ndev) {
+        dev_err(&pdev->dev, "could not allocate device.\n");
+        return -ENOMEM;
+    }
+    SET_NETDEV_DEV(ndev, &pdev->dev);
+
+    priv = netdev_priv(ndev);
+    platform_set_drvdata(pdev, ndev);
+
+    /* Must set private data to pdev, before call it */
+    ret = geth_hw_init(pdev);
+    if (0 != ret) {
+        pr_err("geth_hw_init fail!\n");
+        goto hw_err;
+    }
+
+    /* setup the netdevice, fill the field of netdevice */
+    ether_setup(ndev);
+    ndev->netdev_ops = &geth_netdev_ops;
+    netdev_set_default_ethtool_ops(ndev, &geth_ethtool_ops);
+    ndev->base_addr = (unsigned long)priv->base;
+
+    priv->ndev = ndev;
+    priv->dev = &pdev->dev;
+
+    /* TODO: support the VLAN frames */
+    ndev->hw_features = NETIF_F_SG | NETIF_F_HIGHDMA | NETIF_F_IP_CSUM |
+                        NETIF_F_IPV6_CSUM | NETIF_F_RXCSUM;
+
+    ndev->features |= ndev->hw_features;
+    ndev->hw_features |= NETIF_F_LOOPBACK;
+    ndev->priv_flags |= IFF_UNICAST_FLT;
+
+    ndev->watchdog_timeo = msecs_to_jiffies(watchdog);
+
+    netif_napi_add(ndev, &priv->napi, geth_poll);
+
+    spin_lock_init(&priv->lock);
+    spin_lock_init(&priv->tx_lock);
+
+    /* The last val is mdc clock ratio */
+    sunxi_geth_register((void *)ndev->base_addr, HW_VERSION, 0x03);
+
+    ret = register_netdev(ndev);
+    if (ret) {
+        netif_napi_del(&priv->napi);
+        pr_err("Error: Register %s failed\n", ndev->name);
+        goto reg_err;
+    }
+
+    /* Before open the device, the mac address should be set */
+    geth_check_addr(ndev, mac_str);
+
+#ifdef CONFIG_GETH_ATTRS
+    geth_create_attrs(ndev);
+#endif
+    device_create_file(&pdev->dev, &dev_attr_gphy_test);
+    device_create_file(&pdev->dev, &dev_attr_mii_read);
+    device_create_file(&pdev->dev, &dev_attr_mii_write);
+
+    device_enable_async_suspend(&pdev->dev);
+
+#ifdef CONFIG_PM
+    INIT_WORK(&priv->eth_work, geth_resume_work);
+#endif
+
+    return 0;
+
+reg_err:
+    geth_hw_release(pdev);
+hw_err:
+    platform_set_drvdata(pdev, NULL);
+    free_netdev(ndev);
+
+    return ret;
+}
+
+static int geth_remove(struct platform_device *pdev)
+{
+    struct net_device *ndev = platform_get_drvdata(pdev);
+    struct geth_priv *priv = netdev_priv(ndev);
+
+    device_remove_file(&pdev->dev, &dev_attr_gphy_test);
+    device_remove_file(&pdev->dev, &dev_attr_mii_read);
+    device_remove_file(&pdev->dev, &dev_attr_mii_write);
+
+    netif_napi_del(&priv->napi);
+    unregister_netdev(ndev);
+    geth_hw_release(pdev);
+    platform_set_drvdata(pdev, NULL);
+    free_netdev(ndev);
+
+    return 0;
+}
+
+static const struct of_device_id geth_of_match[] = {
+    {.compatible = "allwinner,sunxi-gmac",},
+    {},
+};
+MODULE_DEVICE_TABLE(of, geth_of_match);
+
+static struct platform_driver geth_driver = {
+    .probe = geth_probe,
+    .remove = geth_remove,
+	.suspend	= ucc_geth_suspend,
+	.resume		= ucc_geth_resume,
+    .driver = {
+        .name = "sunxi-gmac",
+        .owner = THIS_MODULE,
+        .pm = &geth_pm_ops,
+        .of_match_table = geth_of_match,
+    },
+};
+module_platform_driver(geth_driver);
+
+#ifndef MODULE
+static int __init set_mac_addr(char *str)
+{
+    char *p = str;
+
+    if (str && strlen(str))
+        memcpy(mac_str, p, 18);
+
+    return 0;
+}
+__setup("mac_addr=", set_mac_addr);
+#endif
+
+MODULE_DESCRIPTION("Allwinner Gigabit Ethernet driver");
+MODULE_AUTHOR("fuzhaoke <fuzhaoke@allwinnertech.com>");
+MODULE_LICENSE("Dual BSD/GPL");
diff '--color=auto' -urpN a/drivers/net/ethernet/allwinner/sunxi-gmac.h b/drivers/net/ethernet/allwinner/sunxi-gmac.h
--- a/drivers/net/ethernet/allwinner/sunxi-gmac.h	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/net/ethernet/allwinner/sunxi-gmac.h	2024-04-27 23:35:23.393756101 +0200
@@ -0,0 +1,270 @@
+/*
+ * linux/drivers/net/ethernet/allwinner/sunxi_gmac.h
+ *
+ * Copyright © 2016-2018, fuzhaoke
+ *		Author: fuzhaoke <fuzhaoke@allwinnertech.com>
+ *
+ * This file is provided under a dual BSD/GPL license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ */
+#ifndef __SUNXI_GETH_H__
+#define __SUNXI_GETH_H__
+
+#include <linux/etherdevice.h>
+#include <linux/netdevice.h>
+#include <linux/phy.h>
+#include <linux/module.h>
+#include <linux/init.h>
+
+/* GETH_FRAME_FILTER  register value */
+#define GETH_FRAME_FILTER_PR	0x00000001	/* Promiscuous Mode */
+#define GETH_FRAME_FILTER_HUC	0x00000002	/* Hash Unicast */
+#define GETH_FRAME_FILTER_HMC	0x00000004	/* Hash Multicast */
+#define GETH_FRAME_FILTER_DAIF	0x00000008	/* DA Inverse Filtering */
+#define GETH_FRAME_FILTER_PM	0x00000010	/* Pass all multicast */
+#define GETH_FRAME_FILTER_DBF	0x00000020	/* Disable Broadcast frames */
+#define GETH_FRAME_FILTER_SAIF	0x00000100	/* Inverse Filtering */
+#define GETH_FRAME_FILTER_SAF	0x00000200	/* Source Address Filter */
+#define GETH_FRAME_FILTER_HPF	0x00000400	/* Hash or perfect Filter */
+#define GETH_FRAME_FILTER_RA	0x80000000	/* Receive all mode */
+
+/* Default tx descriptor */
+#define TX_SINGLE_DESC0		0x80000000
+#define TX_SINGLE_DESC1		0x63000000
+
+/* Default rx descriptor */
+#define RX_SINGLE_DESC0		0x80000000
+#define RX_SINGLE_DESC1		0x83000000
+
+#define EPHY_ID			0x00441400
+#define AC300_ID		0xc0000000
+#define EPHY_ID_RTL8211F	0x001CC916
+#define IP101G_ID		0x02430c54
+
+typedef union {
+	struct {
+		/* TDES0 */
+		unsigned int deferred:1;	/* Deferred bit (only half-duplex) */
+		unsigned int under_err:1;	/* Underflow error */
+		unsigned int ex_deferral:1;	/* Excessive deferral */
+		unsigned int coll_cnt:4;	/* Collision count */
+		unsigned int vlan_tag:1;	/* VLAN Frame */
+		unsigned int ex_coll:1;		/* Excessive collision */
+		unsigned int late_coll:1;	/* Late collision */
+		unsigned int no_carr:1;		/* No carrier */
+		unsigned int loss_carr:1;	/* Loss of collision */
+		unsigned int ipdat_err:1;	/* IP payload error */
+		unsigned int frm_flu:1;		/* Frame flushed */
+		unsigned int jab_timeout:1;	/* Jabber timeout */
+		unsigned int err_sum:1;		/* Error summary */
+		unsigned int iphead_err:1;	/* IP header error */
+		unsigned int ttss:1;		/* Transmit time stamp status */
+		unsigned int reserved0:13;
+		unsigned int own:1;		/* Own bit. CPU:0, DMA:1 */
+	} tx;
+
+	/* bits 5 7 0 | Frame status
+	 * ----------------------------------------------------------
+	 *      0 0 0 | IEEE 802.3 Type frame (length < 1536 octects)
+	 *      1 0 0 | IPv4/6 No CSUM errorS.
+	 *      1 0 1 | IPv4/6 CSUM PAYLOAD error
+	 *      1 1 0 | IPv4/6 CSUM IP HR error
+	 *      1 1 1 | IPv4/6 IP PAYLOAD AND HEADER errorS
+	 *      0 0 1 | IPv4/6 unsupported IP PAYLOAD
+	 *      0 1 1 | COE bypassed.. no IPv4/6 frame
+	 *      0 1 0 | Reserved.
+	 */
+	struct {
+		/* RDES0 */
+		unsigned int chsum_err:1;	/* Payload checksum error */
+		unsigned int crc_err:1;		/* CRC error */
+		unsigned int dribbling:1;	/* Dribble bit error */
+		unsigned int mii_err:1;		/* Received error (bit3) */
+		unsigned int recv_wt:1;		/* Received watchdog timeout */
+		unsigned int frm_type:1;	/* Frame type */
+		unsigned int late_coll:1;	/* Late Collision */
+		unsigned int ipch_err:1;	/* IPv header checksum error (bit7) */
+		unsigned int last_desc:1;	/* Laset descriptor */
+		unsigned int first_desc:1;	/* First descriptor */
+		unsigned int vlan_tag:1;	/* VLAN Tag */
+		unsigned int over_err:1;	/* Overflow error (bit11) */
+		unsigned int len_err:1;		/* Length error */
+		unsigned int sou_filter:1;	/* Source address filter fail */
+		unsigned int desc_err:1;	/* Descriptor error */
+		unsigned int err_sum:1;		/* Error summary (bit15) */
+		unsigned int frm_len:14;	/* Frame length */
+		unsigned int des_filter:1;	/* Destination address filter fail */
+		unsigned int own:1;		/* Own bit. CPU:0, DMA:1 */
+	#define RX_PKT_OK		0x7FFFB77C
+	#define RX_LEN			0x3FFF0000
+	} rx;
+
+	unsigned int all;
+} desc0_u;
+
+typedef union {
+	struct {
+		/* TDES1 */
+		unsigned int buf1_size:11;	/* Transmit buffer1 size */
+		unsigned int buf2_size:11;	/* Transmit buffer2 size */
+		unsigned int ttse:1;		/* Transmit time stamp enable */
+		unsigned int dis_pad:1;		/* Disable pad (bit23) */
+		unsigned int adr_chain:1;	/* Second address chained */
+		unsigned int end_ring:1;	/* Transmit end of ring */
+		unsigned int crc_dis:1;		/* Disable CRC */
+		unsigned int cic:2;		/* Checksum insertion control (bit27:28) */
+		unsigned int first_sg:1;	/* First Segment */
+		unsigned int last_seg:1;	/* Last Segment */
+		unsigned int interrupt:1;	/* Interrupt on completion */
+	} tx;
+
+	struct {
+		/* RDES1 */
+		unsigned int buf1_size:11;	/* Received buffer1 size */
+		unsigned int buf2_size:11;	/* Received buffer2 size */
+		unsigned int reserved1:2;
+		unsigned int adr_chain:1;	/* Second address chained */
+		unsigned int end_ring:1;		/* Received end of ring */
+		unsigned int reserved2:5;
+		unsigned int dis_ic:1;		/* Disable interrupt on completion */
+	} rx;
+
+	unsigned int all;
+} desc1_u;
+
+typedef struct dma_desc {
+	desc0_u desc0;
+	desc1_u desc1;
+	/* The address of buffers */
+	unsigned int	desc2;
+	/* Next desc's address */
+	unsigned int	desc3;
+} __attribute__((packed)) dma_desc_t;
+
+enum rx_frame_status { /* IPC status */
+	good_frame = 0,
+	discard_frame = 1,
+	csum_none = 2,
+	llc_snap = 4,
+};
+
+enum tx_dma_irq_status {
+	tx_hard_error = 1,
+	tx_hard_error_bump_tc = 2,
+	handle_tx_rx = 3,
+};
+
+struct geth_extra_stats {
+	/* Transmit errors */
+	unsigned long tx_underflow;
+	unsigned long tx_carrier;
+	unsigned long tx_losscarrier;
+	unsigned long vlan_tag;
+	unsigned long tx_deferred;
+	unsigned long tx_vlan;
+	unsigned long tx_jabber;
+	unsigned long tx_frame_flushed;
+	unsigned long tx_payload_error;
+	unsigned long tx_ip_header_error;
+
+	/* Receive errors */
+	unsigned long rx_desc;
+	unsigned long sa_filter_fail;
+	unsigned long overflow_error;
+	unsigned long ipc_csum_error;
+	unsigned long rx_collision;
+	unsigned long rx_crc;
+	unsigned long dribbling_bit;
+	unsigned long rx_length;
+	unsigned long rx_mii;
+	unsigned long rx_multicast;
+	unsigned long rx_gmac_overflow;
+	unsigned long rx_watchdog;
+	unsigned long da_rx_filter_fail;
+	unsigned long sa_rx_filter_fail;
+	unsigned long rx_missed_cntr;
+	unsigned long rx_overflow_cntr;
+	unsigned long rx_vlan;
+
+	/* Tx/Rx IRQ errors */
+	unsigned long tx_undeflow_irq;
+	unsigned long tx_process_stopped_irq;
+	unsigned long tx_jabber_irq;
+	unsigned long rx_overflow_irq;
+	unsigned long rx_buf_unav_irq;
+	unsigned long rx_process_stopped_irq;
+	unsigned long rx_watchdog_irq;
+	unsigned long tx_early_irq;
+	unsigned long fatal_bus_error_irq;
+
+	/* Extra info */
+	unsigned long threshold;
+	unsigned long tx_pkt_n;
+	unsigned long rx_pkt_n;
+	unsigned long poll_n;
+	unsigned long sched_timer_n;
+	unsigned long normal_irq_n;
+};
+
+struct mii_reg_dump {
+	u32 addr;
+	u16 reg;
+	u16 value;
+};
+
+int sunxi_mdio_read(void *,  int, int);
+int sunxi_mdio_write(void *, int, int, unsigned short);
+int sunxi_mdio_reset(void *);
+void sunxi_set_link_mode(void *iobase, int duplex, int speed);
+void sunxi_int_disable(void *);
+int sunxi_int_status(void *, struct geth_extra_stats *x);
+int sunxi_mac_init(void *, int txmode, int rxmode);
+void sunxi_set_umac(void *, unsigned char *, int);
+void sunxi_mac_enable(void *);
+void sunxi_mac_disable(void *);
+void sunxi_tx_poll(void *);
+void sunxi_int_enable(void *);
+void sunxi_start_rx(void *, unsigned long);
+void sunxi_start_tx(void *, unsigned long);
+void sunxi_stop_tx(void *);
+void sunxi_stop_rx(void *);
+void sunxi_hash_filter(void *iobase, unsigned long low, unsigned long high);
+void sunxi_set_filter(void *iobase, unsigned long flags);
+void sunxi_flow_ctrl(void *iobase, int duplex, int fc, int pause);
+void sunxi_mac_loopback(void *iobase, int enable);
+
+void desc_buf_set(struct dma_desc *p, unsigned long paddr, int size);
+void desc_set_own(struct dma_desc *p);
+void desc_init_chain(struct dma_desc *p, unsigned long paddr,  unsigned int size);
+void desc_tx_close(struct dma_desc *first, struct dma_desc *end, int csum_insert);
+void desc_init(struct dma_desc *p);
+int desc_get_tx_status(struct dma_desc *desc, struct geth_extra_stats *x);
+int desc_buf_get_len(struct dma_desc *desc);
+int desc_buf_get_addr(struct dma_desc *desc);
+int desc_get_rx_status(struct dma_desc *desc, struct geth_extra_stats *x);
+int desc_get_own(struct dma_desc *desc);
+int desc_get_tx_ls(struct dma_desc *desc);
+int desc_rx_frame_len(struct dma_desc *desc);
+
+int sunxi_mac_reset(void *iobase, void (*mdelay)(int), int n);
+int sunxi_geth_register(void *iobase, int version, unsigned int div);
+
+int sunxi_parse_read_str(char *str, u16 *addr, u16 *reg);
+int sunxi_parse_write_str(char *str, u16 *addr, u16 *reg, u16 *val);
+extern int ephy_is_enable(void);
+extern int gmac_ephy_shutdown(void);
+
+#if defined(CONFIG_ARCH_SUN8IW3) \
+	|| defined(CONFIG_ARCH_SUN9IW1) \
+	|| defined(CONFIG_ARCH_SUN7I)
+#define HW_VERSION	0
+#else
+#define HW_VERSION	1
+#endif
+
+#endif
diff '--color=auto' -urpN a/drivers/net/ethernet/allwinner/sunxi_gmac_ops.c b/drivers/net/ethernet/allwinner/sunxi_gmac_ops.c
--- a/drivers/net/ethernet/allwinner/sunxi_gmac_ops.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/net/ethernet/allwinner/sunxi_gmac_ops.c	2024-04-27 23:35:28.757789913 +0200
@@ -0,0 +1,768 @@
+/*
+ * linux/drivers/net/ethernet/allwinner/sunxi_gmac_ops.c
+ *
+ * Copyright © 2016-2018, fuzhaoke
+ *		Author: fuzhaoke <fuzhaoke@allwinnertech.com>
+ *
+ * This file is provided under a dual BSD/GPL license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ */
+#include <linux/kernel.h>
+#include <linux/ctype.h>
+#include <linux/printk.h>
+#include <linux/io.h>
+#include "sunxi-gmac.h"
+
+/******************************************************************************
+ *	sun8iw6 operations
+ *****************************************************************************/
+#define GETH_BASIC_CTL0		0x00
+#define GETH_BASIC_CTL1		0x04
+#define GETH_INT_STA		0x08
+#define GETH_INT_EN		0x0C
+#define GETH_TX_CTL0		0x10
+#define GETH_TX_CTL1		0x14
+#define GETH_TX_FLOW_CTL	0x1C
+#define GETH_TX_DESC_LIST	0x20
+#define GETH_RX_CTL0		0x24
+#define GETH_RX_CTL1		0x28
+#define GETH_RX_DESC_LIST	0x34
+#define GETH_RX_FRM_FLT		0x38
+#define GETH_RX_HASH0		0x40
+#define GETH_RX_HASH1		0x44
+#define GETH_MDIO_ADDR		0x48
+#define GETH_MDIO_DATA		0x4C
+#define GETH_ADDR_HI(reg)	(0x50 + ((reg) << 3))
+#define GETH_ADDR_LO(reg)	(0x54 + ((reg) << 3))
+#define GETH_TX_DMA_STA		0xB0
+#define GETH_TX_CUR_DESC	0xB4
+#define GETH_TX_CUR_BUF		0xB8
+#define GETH_RX_DMA_STA		0xC0
+#define GETH_RX_CUR_DESC	0xC4
+#define GETH_RX_CUR_BUF		0xC8
+#define GETH_RGMII_STA		0xD0
+
+#define RGMII_IRQ		0x00000001
+
+#define	CTL0_LM			0x02
+#define CTL0_DM			0x01
+#define CTL0_SPEED		0x04
+
+#define BURST_LEN		0x3F000000
+#define RX_TX_PRI		0x02
+#define SOFT_RST		0x01
+
+#define TX_FLUSH		0x01
+#define TX_MD			0x02
+#define TX_NEXT_FRM		0x04
+#define TX_TH			0x0700
+
+#define RX_FLUSH		0x01
+#define RX_MD			0x02
+#define RX_RUNT_FRM		0x04
+#define RX_TH			0x0030
+
+#define TX_INT			0x00001
+#define TX_STOP_INT		0x00002
+#define TX_UA_INT		0x00004
+#define TX_TOUT_INT		0x00008
+#define TX_UNF_INT		0x00010
+#define TX_EARLY_INT		0x00020
+#define RX_INT			0x00100
+#define RX_UA_INT		0x00200
+#define RX_STOP_INT		0x00400
+#define RX_TOUT_INT		0x00800
+#define RX_OVF_INT		0x01000
+#define RX_EARLY_INT		0x02000
+#define LINK_STA_INT		0x10000
+
+#define DISCARD_FRAME	-1
+#define GOOD_FRAME	0
+#define CSUM_NONE	2
+#define LLC_SNAP	4
+
+#define SF_DMA_MODE		1
+
+/* Flow Control defines */
+#define FLOW_OFF	0
+#define FLOW_RX		1
+#define FLOW_TX		2
+#define FLOW_AUTO	(FLOW_TX | FLOW_RX)
+
+#define HASH_TABLE_SIZE 64
+#define PAUSE_TIME 0x200
+#define GMAC_MAX_UNICAST_ADDRESSES	8
+
+/* PHY address */
+#define PHY_ADDR		0x01
+#define PHY_DM			0x0010
+#define PHY_AUTO_NEG		0x0020
+#define PHY_POWERDOWN		0x0080
+#define PHY_NEG_EN		0x1000
+
+#define MII_BUSY		0x00000001
+#define MII_WRITE		0x00000002
+#define MII_PHY_MASK		0x0000FFC0
+#define MII_CR_MASK		0x0000001C
+#define MII_CLK			0x00000008
+/* bits 4 3 2 | AHB1 Clock	| MDC Clock
+ * -------------------------------------------------------
+ *      0 0 0 | 60 ~ 100 MHz	| div-42
+ *      0 0 1 | 100 ~ 150 MHz	| div-62
+ *      0 1 0 | 20 ~ 35 MHz	| div-16
+ *      0 1 1 | 35 ~ 60 MHz	| div-26
+ *      1 0 0 | 150 ~ 250 MHz	| div-102
+ *      1 0 1 | 250 ~ 300 MHz	| div-124
+ *      1 1 x | Reserved	|
+ */
+
+enum csum_insertion {
+	cic_dis		= 0, /* Checksum Insertion Control */
+	cic_ip		= 1, /* Only IP header */
+	cic_no_pse	= 2, /* IP header but not pseudoheader */
+	cic_full	= 3, /* IP header and pseudoheader */
+};
+
+struct gethdev {
+	void *iobase;
+	unsigned int ver;
+	unsigned int mdc_div;
+};
+
+static struct gethdev hwdev;
+
+/***************************************************************************
+ * External interface
+ **************************************************************************/
+/* Set a ring desc buffer */
+void desc_init_chain(struct dma_desc *desc, unsigned long addr, unsigned int size)
+{
+	/* In chained mode the desc3 points to the next element in the ring.
+	 * The latest element has to point to the head.
+	 */
+	int i;
+	struct dma_desc *p = desc;
+	unsigned long dma_phy = addr;
+
+	for (i = 0; i < (size - 1); i++) {
+		dma_phy += sizeof(struct dma_desc);
+		p->desc3 = (unsigned int)dma_phy;
+		/* Chain mode */
+		p->desc1.all |= (1 << 24);
+		p++;
+	}
+	p->desc1.all |= (1 << 24);
+	p->desc3 = (unsigned int)addr;
+}
+
+int sunxi_mdio_read(void *iobase, int phyaddr, int phyreg)
+{
+	unsigned int value = 0;
+
+	/* Mask the MDC_DIV_RATIO */
+	value |= ((hwdev.mdc_div & 0x07) << 20);
+	value |= (((phyaddr << 12) & (0x0001F000)) |
+			((phyreg << 4) & (0x000007F0)) |
+			MII_BUSY);
+
+	while (((readl(iobase + GETH_MDIO_ADDR)) & MII_BUSY) == 1)
+		;
+
+	writel(value, iobase + GETH_MDIO_ADDR);
+	while (((readl(iobase + GETH_MDIO_ADDR)) & MII_BUSY) == 1)
+		;
+
+	return (int)readl(iobase + GETH_MDIO_DATA);
+}
+
+int sunxi_mdio_write(void *iobase, int phyaddr, int phyreg, unsigned short data)
+{
+	unsigned int value;
+
+	value = ((0x07 << 20) & readl(iobase + GETH_MDIO_ADDR)) |
+		 (hwdev.mdc_div << 20);
+	value |= (((phyaddr << 12) & (0x0001F000)) |
+		  ((phyreg << 4) & (0x000007F0))) |
+		  MII_WRITE | MII_BUSY;
+
+	/* Wait until any existing MII operation is complete */
+	while (((readl(iobase + GETH_MDIO_ADDR)) & MII_BUSY) == 1)
+		;
+
+	/* Set the MII address register to write */
+	writel(data, iobase + GETH_MDIO_DATA);
+	writel(value, iobase + GETH_MDIO_ADDR);
+
+	/* Wait until any existing MII operation is complete */
+	while (((readl(iobase + GETH_MDIO_ADDR)) & MII_BUSY) == 1)
+		;
+
+	return 0;
+}
+
+int sunxi_mdio_reset(void *iobase)
+{
+	writel((4 << 2), iobase + GETH_MDIO_ADDR);
+	return 0;
+}
+
+void sunxi_set_link_mode(void *iobase, int duplex, int speed)
+{
+	unsigned int ctrl = readl(iobase + GETH_BASIC_CTL0);
+
+	if (!duplex)
+		ctrl &= ~CTL0_DM;
+	else
+		ctrl |= CTL0_DM;
+
+	switch (speed) {
+	case 1000:
+		ctrl &= ~0x0C;
+		break;
+	case 100:
+	case 10:
+	default:
+		ctrl |= 0x08;
+		if (speed == 100)
+			ctrl |= 0x04;
+		else
+			ctrl &= ~0x04;
+		break;
+	}
+
+	writel(ctrl, iobase + GETH_BASIC_CTL0);
+}
+
+void sunxi_mac_loopback(void *iobase, int enable)
+{
+	int reg;
+
+	reg = readl(iobase + GETH_BASIC_CTL0);
+	if (enable)
+		reg |= 0x02;
+	else
+		reg &= ~0x02;
+	writel(reg, iobase + GETH_BASIC_CTL0);
+}
+
+void sunxi_flow_ctrl(void *iobase, int duplex, int fc, int pause)
+{
+	unsigned int flow = 0;
+
+	if (fc & FLOW_RX) {
+		flow = readl(iobase + GETH_RX_CTL0);
+		flow |= 0x10000;
+		writel(flow, iobase + GETH_RX_CTL0);
+	}
+
+	if (fc & FLOW_TX) {
+		flow = readl(iobase + GETH_TX_FLOW_CTL);
+		flow |= 0x00001;
+		writel(flow, iobase + GETH_TX_FLOW_CTL);
+	}
+
+	if (duplex) {
+		flow = readl(iobase + GETH_TX_FLOW_CTL);
+		flow |= (pause << 4);
+		writel(flow, iobase + GETH_TX_FLOW_CTL);
+	}
+}
+
+int sunxi_int_status(void *iobase, struct geth_extra_stats *x)
+{
+	int ret = 0;
+	/* read the status register (CSR5) */
+	unsigned int intr_status;
+
+	intr_status = readl(iobase + GETH_RGMII_STA);
+	if (intr_status & RGMII_IRQ)
+		readl(iobase + GETH_RGMII_STA);
+
+	intr_status = readl(iobase + GETH_INT_STA);
+
+	/* ABNORMAL interrupts */
+	if (intr_status & TX_UNF_INT) {
+		ret = tx_hard_error_bump_tc;
+		x->tx_undeflow_irq++;
+	}
+	if (intr_status & TX_TOUT_INT) {
+		x->tx_jabber_irq++;
+	}
+	if (intr_status & RX_OVF_INT) {
+		x->rx_overflow_irq++;
+	}
+	if (intr_status & RX_UA_INT) {
+		x->rx_buf_unav_irq++;
+	}
+	if (intr_status & RX_STOP_INT) {
+		x->rx_process_stopped_irq++;
+	}
+	if (intr_status & RX_TOUT_INT) {
+		x->rx_watchdog_irq++;
+	}
+	if (intr_status & TX_EARLY_INT) {
+		x->tx_early_irq++;
+	}
+	if (intr_status & TX_STOP_INT) {
+		x->tx_process_stopped_irq++;
+		ret = tx_hard_error;
+	}
+
+	/* TX/RX NORMAL interrupts */
+	if (intr_status & (TX_INT | RX_INT | RX_EARLY_INT | TX_UA_INT)) {
+		x->normal_irq_n++;
+		if (intr_status & (TX_INT | RX_INT))
+			ret = handle_tx_rx;
+	}
+	/* Clear the interrupt by writing a logic 1 to the CSR5[15-0] */
+	writel(intr_status & 0x3FFF, iobase + GETH_INT_STA);
+
+	return ret;
+}
+
+void sunxi_start_rx(void *iobase, unsigned long rxbase)
+{
+	unsigned int value;
+
+	/* Write the base address of Rx descriptor lists into registers */
+	writel(rxbase, iobase + GETH_RX_DESC_LIST);
+
+	value = readl(iobase + GETH_RX_CTL1);
+	value |= 0x40000000;
+	writel(value, iobase + GETH_RX_CTL1);
+}
+
+void sunxi_stop_rx(void *iobase)
+{
+	unsigned int value;
+
+	value = readl(iobase + GETH_RX_CTL1);
+	value &= ~0x40000000;
+	writel(value, iobase + GETH_RX_CTL1);
+}
+
+void sunxi_start_tx(void *iobase, unsigned long txbase)
+{
+	unsigned int value;
+
+	/* Write the base address of Tx descriptor lists into registers */
+	writel(txbase, iobase + GETH_TX_DESC_LIST);
+
+	value = readl(iobase + GETH_TX_CTL1);
+	value |= 0x40000000;
+	writel(value, iobase + GETH_TX_CTL1);
+}
+
+void sunxi_stop_tx(void *iobase)
+{
+	unsigned int value = readl(iobase + GETH_TX_CTL1);
+
+	value &= ~0x40000000;
+	writel(value, iobase + GETH_TX_CTL1);
+}
+
+static int sunxi_dma_init(void *iobase)
+{
+	unsigned int value;
+
+	/* Burst should be 8 */
+	value = (8 << 24);
+
+#ifdef CONFIG_GMAC_DA
+	value |= RX_TX_PRI;	/* Rx has priority over tx */
+#endif
+	writel(value, iobase + GETH_BASIC_CTL1);
+
+	/* Mask interrupts by writing to CSR7 */
+	writel(RX_INT | TX_INT | TX_UNF_INT, iobase + GETH_INT_EN);
+
+	return 0;
+}
+
+int sunxi_mac_init(void *iobase, int txmode, int rxmode)
+{
+	unsigned int value;
+
+	sunxi_dma_init(iobase);
+
+	/* Initialize the core component */
+	value = readl(iobase + GETH_TX_CTL0);
+	value |= (1 << 30);	/* Jabber Disable */
+	writel(value, iobase + GETH_TX_CTL0);
+
+	value = readl(iobase + GETH_RX_CTL0);
+	value |= (1 << 27);	/* Enable CRC & IPv4 Header Checksum */
+	value |= (1 << 28);	/* Automatic Pad/CRC Stripping */
+	value |= (1 << 29);	/* Jumbo Frame Enable */
+	writel(value, iobase + GETH_RX_CTL0);
+
+	writel((hwdev.mdc_div << 20), iobase + GETH_MDIO_ADDR); /* MDC_DIV_RATIO */
+
+	/* Set the Rx&Tx mode */
+	value = readl(iobase + GETH_TX_CTL1);
+	if (txmode == SF_DMA_MODE) {
+		/* Transmit COE type 2 cannot be done in cut-through mode. */
+		value |= TX_MD;
+		/* Operating on second frame increase the performance
+		 * especially when transmit store-and-forward is used.
+		 */
+		value |= TX_NEXT_FRM;
+	} else {
+		value &= ~TX_MD;
+		value &= ~TX_TH;
+		/* Set the transmit threshold */
+		if (txmode <= 64)
+			value |= 0x00000000;
+		else if (txmode <= 128)
+			value |= 0x00000100;
+		else if (txmode <= 192)
+			value |= 0x00000200;
+		else
+			value |= 0x00000300;
+	}
+	writel(value, iobase + GETH_TX_CTL1);
+
+	value = readl(iobase + GETH_RX_CTL1);
+	if (rxmode == SF_DMA_MODE) {
+		value |= RX_MD;
+	} else {
+		value &= ~RX_MD;
+		value &= ~RX_TH;
+		if (rxmode <= 32)
+			value |= 0x10;
+		else if (rxmode <= 64)
+			value |= 0x00;
+		else if (rxmode <= 96)
+			value |= 0x20;
+		else
+			value |= 0x30;
+	}
+	writel(value, iobase + GETH_RX_CTL1);
+
+	return 0;
+}
+
+void sunxi_hash_filter(void *iobase, unsigned long low, unsigned long high)
+{
+	writel(high, iobase + GETH_RX_HASH0);
+	writel(low, iobase + GETH_RX_HASH1);
+}
+
+void sunxi_set_filter(void *iobase, unsigned long flags)
+{
+	int tmp_flags;
+
+	tmp_flags = readl(iobase + GETH_RX_FRM_FLT);
+
+	tmp_flags |= ((flags >> 31) |
+			((flags >> 9) & 0x00000002) |
+			((flags << 1) & 0x00000010) |
+			((flags >> 3) & 0x00000060) |
+			((flags << 7) & 0x00000300) |
+			((flags << 6) & 0x00003000) |
+			((flags << 12) & 0x00030000) |
+			(flags << 31));
+
+	writel(tmp_flags, iobase + GETH_RX_FRM_FLT);
+}
+
+void sunxi_set_umac(void *iobase, unsigned char *addr, int index)
+{
+	unsigned long data;
+
+	data = (addr[5] << 8) | addr[4];
+	writel(data, iobase + GETH_ADDR_HI(index));
+	data = (addr[3] << 24) | (addr[2] << 16) | (addr[1] << 8) | addr[0];
+	writel(data, iobase + GETH_ADDR_LO(index));
+}
+
+void sunxi_mac_enable(void *iobase)
+{
+	unsigned long value;
+
+	value = readl(iobase + GETH_TX_CTL0);
+	value |= (1 << 31);
+	writel(value, iobase + GETH_TX_CTL0);
+
+	value = readl(iobase + GETH_RX_CTL0);
+	value |= (1 << 31);
+	writel(value, iobase + GETH_RX_CTL0);
+}
+
+void sunxi_mac_disable(void *iobase)
+{
+	unsigned long value;
+
+	value = readl(iobase + GETH_TX_CTL0);
+	value &= ~(1 << 31);
+	writel(value, iobase + GETH_TX_CTL0);
+
+	value = readl(iobase + GETH_RX_CTL0);
+	value &= ~(1 << 31);
+	writel(value, iobase + GETH_RX_CTL0);
+}
+
+void sunxi_tx_poll(void *iobase)
+{
+	unsigned int value;
+
+	value = readl(iobase + GETH_TX_CTL1);
+	writel(value | 0x80000000, iobase + GETH_TX_CTL1);
+}
+
+void sunxi_rx_poll(void *iobase)
+{
+	unsigned int value;
+
+	value = readl(iobase + GETH_RX_CTL1);
+	writel(value | 0x80000000, iobase + GETH_RX_CTL1);
+}
+
+void sunxi_int_enable(void *iobase)
+{
+	writel(RX_INT | TX_INT | TX_UNF_INT, iobase + GETH_INT_EN);
+}
+
+void sunxi_int_disable(void *iobase)
+{
+	writel(0, iobase + GETH_INT_EN);
+}
+
+void desc_buf_set(struct dma_desc *desc, unsigned long paddr, int size)
+{
+	desc->desc1.all &= (~((1 << 11) - 1));
+	desc->desc1.all |= (size & ((1 << 11) - 1));
+	desc->desc2 = paddr;
+}
+
+void desc_set_own(struct dma_desc *desc)
+{
+	desc->desc0.all |= 0x80000000;
+}
+
+void desc_tx_close(struct dma_desc *first, struct dma_desc *end, int csum_insert)
+{
+	struct dma_desc *desc = first;
+
+	first->desc1.tx.first_sg = 1;
+	end->desc1.tx.last_seg = 1;
+	end->desc1.tx.interrupt = 1;
+
+	if (csum_insert)
+		do {
+			desc->desc1.tx.cic = 3;
+			desc++;
+		} while (desc <= end);
+}
+
+void desc_init(struct dma_desc *desc)
+{
+	desc->desc1.all = 0;
+	desc->desc2  = 0;
+
+	desc->desc1.all |= (1 << 24);
+}
+
+int desc_get_tx_status(struct dma_desc *desc, struct geth_extra_stats *x)
+{
+	int ret = 0;
+
+	if (desc->desc0.tx.under_err) {
+		x->tx_underflow++;
+		ret = -1;
+	}
+	if (desc->desc0.tx.no_carr) {
+		x->tx_carrier++;
+		ret = -1;
+	}
+	if (desc->desc0.tx.loss_carr) {
+		x->tx_losscarrier++;
+		ret = -1;
+	}
+
+#if 0
+	if ((desc->desc0.tx.ex_deferral) ||
+			(desc->desc0.tx.ex_coll) ||
+			(desc->desc0.tx.late_coll))
+		stats->collisions += desc->desc0.tx.coll_cnt;
+#endif
+
+	if (desc->desc0.tx.deferred)
+		x->tx_deferred++;
+
+	return ret;
+}
+
+int desc_buf_get_len(struct dma_desc *desc)
+{
+	return (desc->desc1.all & ((1 << 11) - 1));
+}
+
+int desc_buf_get_addr(struct dma_desc *desc)
+{
+	return desc->desc2;
+}
+
+int desc_rx_frame_len(struct dma_desc *desc)
+{
+	return desc->desc0.rx.frm_len;
+}
+
+int desc_get_rx_status(struct dma_desc *desc, struct geth_extra_stats *x)
+{
+	int ret = good_frame;
+
+	if (desc->desc0.rx.last_desc == 0) {
+		return discard_frame;
+	}
+
+	if (desc->desc0.rx.err_sum) {
+		if (desc->desc0.rx.desc_err)
+			x->rx_desc++;
+
+		if (desc->desc0.rx.sou_filter)
+			x->sa_filter_fail++;
+
+		if (desc->desc0.rx.over_err)
+			x->overflow_error++;
+
+		if (desc->desc0.rx.ipch_err)
+			x->ipc_csum_error++;
+
+		if (desc->desc0.rx.late_coll)
+			x->rx_collision++;
+
+		if (desc->desc0.rx.crc_err)
+			x->rx_crc++;
+
+		ret = discard_frame;
+	}
+
+	if (desc->desc0.rx.len_err) {
+		ret = discard_frame;
+	}
+	if (desc->desc0.rx.mii_err) {
+		ret = discard_frame;
+	}
+
+	return ret;
+}
+
+int desc_get_own(struct dma_desc *desc)
+{
+	return desc->desc0.all & 0x80000000;
+}
+
+int desc_get_tx_ls(struct dma_desc *desc)
+{
+	return desc->desc1.tx.last_seg;
+}
+
+int sunxi_geth_register(void *iobase, int version, unsigned int div)
+{
+	hwdev.ver = version;
+	hwdev.iobase = iobase;
+	hwdev.mdc_div = div;
+
+	return 0;
+}
+
+int sunxi_mac_reset(void *iobase, void (*delay)(int), int n)
+{
+	unsigned int value;
+
+	/* DMA SW reset */
+	value = readl(iobase + GETH_BASIC_CTL1);
+	value |= SOFT_RST;
+	writel(value, iobase + GETH_BASIC_CTL1);
+
+	delay(n);
+
+	return !!(readl(iobase + GETH_BASIC_CTL1) & SOFT_RST);
+}
+
+/**
+ * sunxi_parse_read_str - parse the input string for write attri.
+ * @str: string to be parsed, eg: "0x00 0x01".
+ * @addr: store the reg address. eg: 0x00.
+ * @reg: store the expect value. eg: 0x01.
+ *
+ * return 0 if success, otherwise failed.
+ */
+int sunxi_parse_read_str(char *str, u16 *addr, u16 *reg)
+{
+	char *ptr = str;
+	char *tstr = NULL;
+	int ret;
+
+	/*
+	 * Skip the leading whitespace, find the true split symbol.
+	 * And it must be 'address value'.
+	 */
+	tstr = strim(str);
+	ptr = strchr(tstr, ' ');
+	if (!ptr)
+		return -EINVAL;
+
+	/*
+	 * Replaced split symbol with a %NUL-terminator temporary.
+	 * Will be fixed at end.
+	 */
+	*ptr = '\0';
+	ret = kstrtos16(tstr, 16, addr);
+	if (ret)
+		goto out;
+
+	ret = kstrtos16(skip_spaces(ptr + 1), 16, reg);
+
+out:
+	return ret;
+}
+
+/**
+ * sunxi_parse_write_str - parse the input string for compare attri.
+ * @str: string to be parsed, eg: "0x00 0x11 0x11".
+ * @addr: store the address. eg: 0x00.
+ * @reg: store the reg. eg: 0x11.
+ * @val: store the value. eg: 0x11.
+ *
+ * return 0 if success, otherwise failed.
+ */
+int sunxi_parse_write_str(char *str, u16 *addr,
+			  u16 *reg, u16 *val)
+{
+	u16 result_addr[3] = { 0 };
+	char *ptr = str;
+	char *ptr2 = NULL;
+	int i, ret = 0;
+
+	for (i = 0; i < ARRAY_SIZE(result_addr); i++) {
+		ptr = skip_spaces(ptr);
+		ptr2 = strchr(ptr, ' ');
+		if (ptr2)
+			*ptr2 = '\0';
+
+		ret = kstrtou16(ptr, 16, &result_addr[i]);
+		if (!ptr2)
+			break;
+
+		*ptr2 = ' ';
+
+		if (ret)
+			break;
+
+		ptr = ptr2 + 1;
+	}
+
+	*addr = result_addr[0];
+	*reg = result_addr[1];
+	*val = result_addr[2];
+
+	return ret;
+}
+MODULE_LICENSE("Dual BSD/GPL");
diff '--color=auto' -urpN a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
--- a/drivers/net/phy/Makefile	2024-04-17 11:19:38.000000000 +0200
+++ b/drivers/net/phy/Makefile	2024-04-27 23:36:30.406178363 +0200
@@ -2,7 +2,7 @@
 # Makefile for Linux PHY drivers
 
 libphy-y			:= phy.o phy-c45.o phy-core.o phy_device.o \
-				   linkmode.o
+				   linkmode.o sunxi-ephy.o
 mdio-bus-y			+= mdio_bus.o mdio_device.o
 
 ifdef CONFIG_MDIO_DEVICE
diff '--color=auto' -urpN a/drivers/net/phy/sunxi-ephy.c b/drivers/net/phy/sunxi-ephy.c
--- a/drivers/net/phy/sunxi-ephy.c	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/net/phy/sunxi-ephy.c	2024-04-27 23:37:19.122485203 +0200
@@ -0,0 +1,518 @@
+/*
+ * Copyright © 2015-2016, Shuge
+ *		Author: Sugar <shugeLinux@gmail.com>
+ *
+ * This file is provided under a dual BSD/GPL license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include <linux/errno.h>
+#include <linux/unistd.h>
+#include <linux/interrupt.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/skbuff.h>
+#include <linux/spinlock.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/mii.h>
+#include <linux/ethtool.h>
+#include <linux/phy.h>
+#include <linux/platform_device.h>
+
+#include <asm/io.h>
+#include <asm/irq.h>
+
+#include <linux/mfd/ac200.h>
+
+#define EPHY_AC200 1
+#define EPHY_AC300 2
+
+#define WAIT_MAX_COUNT 200
+
+struct ephy_res {
+	struct phy_device *ac300;
+	struct ac200_dev *ac200;
+	atomic_t ephy_en;
+};
+
+static struct ephy_res ac200_ephy;
+static struct ephy_res ac300_ephy;
+u8 ephy_type;
+
+static int ac200_reg_read(struct ac200_dev *ac200, unsigned short reg)
+{
+	unsigned int val;
+	int ret;
+
+	ret = regmap_read(ac200->regmap, reg, &val);
+
+	if (ret < 0)
+		return ret;
+	else
+		return val;
+}
+
+static int ac200_reg_write(struct ac200_dev *ac200, unsigned short reg, unsigned short val)
+{
+	return regmap_write(ac200->regmap, reg, val);
+}
+
+int ephy_is_enable(void)
+{
+	if (ephy_type == EPHY_AC200)
+		return atomic_read(&ac200_ephy.ephy_en);
+	else if (ephy_type == EPHY_AC300)
+		return atomic_read(&ac300_ephy.ephy_en);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ephy_is_enable);
+
+static void disable_intelligent_ieee(struct phy_device *phydev)
+{
+	unsigned int value;
+
+	phy_write(phydev, 0x1f, 0x0100); /* switch to page 1 */
+	value = phy_read(phydev, 0x17);  /* read address 0 0x17 register */
+	value &= ~(1 << 3);			  /* reg 0x17 bit 3, set 0 to disable IEEE */
+	phy_write(phydev, 0x17, value);
+	phy_write(phydev, 0x1f, 0x0000); /* switch to page 0 */
+}
+
+static void disable_802_3az_ieee(struct phy_device *phydev)
+{
+	unsigned int value;
+
+	phy_write(phydev, 0xd, 0x7);
+	phy_write(phydev, 0xe, 0x3c);
+	phy_write(phydev, 0xd, 0x1 << 14 | 0x7);
+	value = phy_read(phydev, 0xe);
+	value &= ~(0x1 << 1);
+	phy_write(phydev, 0xd, 0x7);
+	phy_write(phydev, 0xe, 0x3c);
+	phy_write(phydev, 0xd, 0x1 << 14 | 0x7);
+	phy_write(phydev, 0xe, value);
+
+	phy_write(phydev, 0x1f, 0x0200); /* switch to page 2 */
+	phy_write(phydev, 0x18, 0x0000);
+}
+
+static void ephy_config_default(struct phy_device *phydev)
+{
+	phy_write(phydev, 0x1f, 0x0100); /* Switch to Page 1 */
+	phy_write(phydev, 0x12, 0x4824); /* Disable APS */
+
+	phy_write(phydev, 0x1f, 0x0200); /* Switch to Page 2 */
+	phy_write(phydev, 0x18, 0x0000); /* PHYAFE TRX optimization */
+
+	phy_write(phydev, 0x1f, 0x0600); /* Switch to Page 6 */
+	phy_write(phydev, 0x14, 0x708b); /* PHYAFE TX optimization */
+	phy_write(phydev, 0x13, 0xF000); /* PHYAFE RX optimization */
+	phy_write(phydev, 0x15, 0x1530);
+
+	phy_write(phydev, 0x1f, 0x0800); /* Switch to Page 8 */
+	phy_write(phydev, 0x18, 0x00bc); /* PHYAFE TRX optimization */
+}
+
+static void __maybe_unused ephy_config_fixed(struct phy_device *phydev)
+{
+	phy_write(phydev, 0x1f, 0x0100); /*switch to Page 1 */
+	phy_write(phydev, 0x12, 0x4824); /*Disable APS */
+
+	phy_write(phydev, 0x1f, 0x0200); /*switch to Page 2 */
+	phy_write(phydev, 0x18, 0x0000); /*PHYAFE TRX optimization */
+
+	phy_write(phydev, 0x1f, 0x0600); /*switch to Page 6 */
+	phy_write(phydev, 0x14, 0x7809); /*PHYAFE TX optimization */
+	phy_write(phydev, 0x13, 0xf000); /*PHYAFE RX optimization */
+	phy_write(phydev, 0x10, 0x5523);
+	phy_write(phydev, 0x15, 0x3533);
+
+	phy_write(phydev, 0x1f, 0x0800); /*switch to Page 8 */
+	phy_write(phydev, 0x1d, 0x0844); /*disable auto offset */
+	phy_write(phydev, 0x18, 0x00bc); /*PHYAFE TRX optimization */
+}
+
+static void __maybe_unused ephy_config_cali(struct phy_device *phydev, u16 ephy_cali)
+{
+	int value;
+	value = phy_read(phydev, 0x06);
+	value &= ~(0x0F << 12);
+	value |= (0x0F & (0x03 + ephy_cali)) << 12;
+	phy_write(phydev, 0x06, value);
+
+	return;
+}
+
+int ephy_config_init(struct phy_device *phydev)
+{
+	int value;
+#if 1 //defined(CONFIG_ARCH_SUN50IW9)
+	if (ephy_type == EPHY_AC300) {
+		int ret;
+		u16 ephy_cali = 0;
+		ephy_cali = sun50i_ephy_calibrate_value();
+		if (ret) {
+			pr_err("ephy cali efuse read fail!\n");
+			return -1;
+		}
+		ephy_config_cali(ac300_ephy.ac300, ephy_cali);
+		/*
+		* BIT9: the flag of calibration value
+		* 0: Normal
+		* 1: Low level of calibration value
+		*/
+		if (ephy_cali & BIT(9)) {
+			pr_debug("ac300:ephy cali efuse read: fixed!\n");
+			ephy_config_fixed(phydev);
+		} else {
+			pr_debug("ac300:ephy cali efuse read: default!\n");
+			ephy_config_default(phydev);
+		}
+	} else {
+		pr_debug("ac200:ephy cali efuse read: default!\n");
+		ephy_config_default(phydev);
+	}
+#else
+	ephy_config_default(phydev);
+#endif
+
+#if 0
+	/* Disable Auto Power Saving mode */
+	phy_write(phydev, 0x1f, 0x0100); /* Switch to Page 1 */
+	value = phy_read(phydev, 0x17);
+	value &= ~BIT(13);
+	phy_write(phydev, 0x17, value);
+#endif
+	disable_intelligent_ieee(phydev); /* Disable Intelligent IEEE */
+	disable_802_3az_ieee(phydev);  /* Disable 802.3az IEEE */
+	phy_write(phydev, 0x1f, 0x0000); /* Switch to Page 0 */
+
+#if 1 // def CONFIG_MFD_ACX00
+	if (ephy_type == EPHY_AC200) {
+		value = ac200_reg_read(ac200_ephy.ac200, AC200_EPHY_CTL);
+		if (phydev->interface == PHY_INTERFACE_MODE_RMII)
+			value |= (1 << 11);
+		else
+			value &= (~(1 << 11));
+		ac200_reg_write(ac200_ephy.ac200, AC200_EPHY_CTL, value | (1 << 11));
+	} else
+#endif
+	if (ephy_type == EPHY_AC300) {
+		value = phy_read(ac300_ephy.ac300, 0x06);
+		if (phydev->interface == PHY_INTERFACE_MODE_RMII)
+			value |= (1 << 11);
+		else
+			value &= (~(1 << 11));
+		phy_write(ac300_ephy.ac300, 0x06, value | (1 << 1)); /*LED_POL 1:Low active*/
+	}
+
+#if defined(CONFIG_ARCH_SUN50IW6)
+	value = phy_read(phydev, 0x13);
+	value |= 1 << 12;
+	phy_write(phydev, 0x13, value);
+#endif
+
+	return 0;
+}
+EXPORT_SYMBOL(ephy_config_init);
+
+static int ephy_probe(struct phy_device *phydev)
+{
+	return 0;
+}
+
+#if 0
+static int ephy_ack_interrupt(struct phy_device *phydev)
+{
+	int err = phy_read(phydev, IP101A_G_IRQ_CONF_STATUS);
+
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+#endif
+
+
+static struct phy_driver sunxi_phy_driver = {
+	.phy_id = 0x00441400,
+	.name = "ephy",
+	.phy_id_mask = 0x0ffffff0,
+	.features = PHY_BASIC_FEATURES, //| SUPPORTED_Pause |SUPPORTED_Asym_Pause,
+#if 0
+	.flags = PHY_HAS_INTERRUPT,
+	.ack_interrupt = ephy_ack_interrupt,
+#endif
+	.config_init = &ephy_config_init,
+	.config_aneg = &genphy_config_aneg,
+	.read_status = &genphy_read_status,
+	.suspend = genphy_suspend,
+	.resume = genphy_resume,
+	.probe = ephy_probe,
+};
+
+static void ac300_ephy_enable(struct ephy_res *priv)
+{
+	phy_write(priv->ac300, 0x00, 0x1f83); /* release reset */
+
+	phy_write(priv->ac300, 0x00, 0x1fb7); /* clk gating (24MHz clock)*/
+
+	//phy_write(priv->ac300, 0x05, 0xa81f);
+	phy_write(priv->ac300, 0x05, 0xa819);
+
+	phy_write(priv->ac300, 0x06, 0x00);
+
+	msleep(1000); /* FIXME: fix some board compatible issues. */
+
+	atomic_set(&ac300_ephy.ephy_en, 1);
+}
+
+static void ac300_ephy_disable(struct ephy_res *priv)
+{
+	phy_write(priv->ac300, 0x00, 0x1f40);
+	phy_write(priv->ac300, 0x05, 0xa800);
+
+	phy_write(priv->ac300, 0x06, 0x01);
+
+	atomic_set(&ac300_ephy.ephy_en, 0);
+}
+
+static int ac300_ephy_probe(struct phy_device *phydev)
+{
+	ac300_ephy.ac300 = phydev;
+
+	atomic_set(&ac300_ephy.ephy_en, 0);
+	ac300_ephy_enable(&ac300_ephy);
+
+	ephy_type = EPHY_AC300;
+
+	return 0;
+}
+
+static void ac300_ephy_shutdown(struct phy_device *phydev)
+{
+	ac300_ephy.ac300 = phydev;
+
+	phy_write(ac300_ephy.ac300, 0x00, 0x1f40);
+	phy_write(ac300_ephy.ac300, 0x05, 0xa800);
+	phy_write(ac300_ephy.ac300, 0x06, 0x01);
+}
+
+int gmac_ephy_shutdown(void)
+{
+	if (ephy_type == EPHY_AC300)
+		ac300_ephy_disable(&ac300_ephy);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(gmac_ephy_shutdown);
+
+static int ac300_ephy_suspend(struct phy_device *phydev)
+{
+	ac300_ephy_disable(&ac300_ephy);
+
+	return 0;
+}
+
+static int ac300_ephy_resume(struct phy_device *phydev)
+{
+	ac300_ephy_enable(&ac300_ephy);
+
+	return 0;
+}
+
+static struct phy_driver ac300_ephy_driver = {
+	.phy_id = 0xc0000000,
+	.name = "ac300",
+	.phy_id_mask = 0xffffffff,
+	.suspend = ac300_ephy_suspend,
+	.resume = ac300_ephy_resume,
+	.probe = ac300_ephy_probe,
+	// .shutdown = ac300_ephy_shutdown,
+};
+
+
+static void ac200_ephy_enable(struct ephy_res *priv)
+{
+#if 1 //ifdef CONFIG_MFD_ACX00
+	int value;
+	unsigned char i = 0;
+#if 1 // defined(CONFIG_ARCH_SUN50IW6) || defined(CONFIG_ARCH_SUN50IW9)
+	u16 ephy_cali = 0;
+#endif
+
+	if (!ac200_enable()) {
+		for (i = 0; i < WAIT_MAX_COUNT; i++) {
+			msleep(10);
+			if (ac200_enable())
+			break;
+		}
+		if (i == WAIT_MAX_COUNT) {
+			pr_err("acx00 is no enable, and ac200_ephy_enable is fail\n");
+			return;
+		}
+	}
+
+	value = ac200_reg_read(priv->ac200, AC200_SYS_EPHY_CTL0);
+	value |= 0x03;
+	ac200_reg_write(priv->ac200, AC200_SYS_EPHY_CTL0, value);
+	value = ac200_reg_read(priv->ac200, AC200_SYS_EPHY_CTL1);
+
+	value |= 0x0f;
+
+	ac200_reg_write(priv->ac200, AC200_SYS_EPHY_CTL1, value);
+	ac200_reg_write(priv->ac200, AC200_EPHY_CTL, 0x06);
+
+	/*for ephy */
+	value = ac200_reg_read(priv->ac200, AC200_EPHY_CTL);
+	value &= ~(0xf << 12);
+
+#if 1 // defined(CONFIG_ARCH_SUN50IW6) || defined(CONFIG_ARCH_SUN50IW9)
+
+	ephy_cali = sun50i_ephy_calibrate_value();
+	value |= (0x0F & (0x03 + ephy_cali)) << 12;
+#else
+	value |= (0x0F & (0x03 + ac200_reg_read(priv->ac200, AC200_SID))) << 12;
+#endif
+
+	ac200_reg_write(priv->ac200, AC200_EPHY_CTL, value);
+
+	atomic_set(&ac200_ephy.ephy_en, 1);
+#endif
+}
+
+static void ac200_ephy_disable(struct ephy_res *priv)
+{
+	int value;
+
+	/* reset ephy */
+	value = ac200_reg_read(priv->ac200, AC200_SYS_EPHY_CTL0);
+	value &= ~0x01;
+	ac200_reg_write(priv->ac200, AC200_SYS_EPHY_CTL0, value);
+
+	/* shutdown ephy */
+	value = ac200_reg_read(priv->ac200, AC200_EPHY_CTL);
+	value |= 0x01;
+	ac200_reg_write(priv->ac200, AC200_EPHY_CTL, value);
+
+	atomic_set(&priv->ephy_en, 0);
+}
+
+static const struct platform_device_id ac200_ephy_id[] = {
+	{ "ac200-ephy", 0},
+	{ },
+};
+MODULE_DEVICE_TABLE(platform, ac200_ephy_id);
+
+static int ac200_ephy_probe(struct platform_device *pdev)
+{
+	struct ac200_dev *ax = dev_get_drvdata(pdev->dev.parent);
+
+	if (!ax)
+		return -ENODEV;
+
+	ac200_ephy.ac200 = ax;
+	ephy_type = EPHY_AC200;
+	platform_set_drvdata(pdev, &ac200_ephy);
+
+	atomic_set(&ac200_ephy.ephy_en, 0);
+	ac200_ephy_enable(&ac200_ephy);
+
+	return 0;
+}
+
+static int ac200_ephy_remove(struct platform_device *pdev)
+{
+	ac200_ephy_disable(&ac200_ephy);
+
+	return 0;
+}
+
+static int ac200_ephy_suspend(struct device *dev)
+{
+	ac200_ephy_disable(&ac200_ephy);
+
+	return 0;
+}
+
+static int ac200_ephy_resume(struct device *dev)
+{
+	ac200_ephy_enable(&ac200_ephy);
+
+	return 0;
+}
+
+/* Suspend hook structures */
+static const struct dev_pm_ops ac200_ephy_pm_ops = {
+	.suspend = ac200_ephy_suspend,
+	.resume = ac200_ephy_resume,
+};
+
+static struct platform_driver ac200_ephy_driver = {
+	.driver = {
+		.name = "ac200-ephy",
+		.owner = THIS_MODULE,
+		.pm = &ac200_ephy_pm_ops,
+	},
+	.probe = ac200_ephy_probe,
+	.remove = ac200_ephy_remove,
+	.id_table = ac200_ephy_id,
+};
+
+static int ephy_init(void)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&ac200_ephy_driver);
+	if (ret)
+		return ret;
+
+	ret = phy_driver_register(&ac300_ephy_driver, THIS_MODULE);
+	if (ret)
+		goto ac300_ephy_error;
+
+	ret = phy_driver_register(&sunxi_phy_driver, THIS_MODULE);
+	if (ret)
+		goto ephy_driver_error;
+
+	return ret;
+
+ephy_driver_error:
+	phy_driver_unregister(&ac300_ephy_driver);
+
+ac300_ephy_error:
+	platform_driver_unregister(&ac200_ephy_driver);
+
+	return ret;
+}
+
+static void ephy_exit(void)
+{
+	phy_driver_unregister(&sunxi_phy_driver);
+	phy_driver_unregister(&ac300_ephy_driver);
+	platform_driver_unregister(&ac200_ephy_driver);
+}
+
+module_init(ephy_init);
+module_exit(ephy_exit);
+
+static struct mdio_device_id __maybe_unused ephy_tbl[] = {
+	{ 0x00441400, 0x0ffffff0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(mdio, ephy_tbl);
+
+MODULE_DESCRIPTION("Allwinner EPHY drivers");
+MODULE_AUTHOR("Sugar <shugeLinux@gmail.com>");
+MODULE_LICENSE("GPL");
diff '--color=auto' -urpN a/include/linux/mfd/ac200.h b/include/linux/mfd/ac200.h
--- a/include/linux/mfd/ac200.h	1970-01-01 01:00:00.000000000 +0100
+++ b/include/linux/mfd/ac200.h	2024-04-27 23:38:05.234775570 +0200
@@ -0,0 +1,213 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * AC200 register list
+ *
+ * Copyright (C) 2019 Jernej Skrabec <jernej.skrabec@siol.net>
+ */
+
+#ifndef __LINUX_MFD_AC200_H
+#define __LINUX_MFD_AC200_H
+
+#include <linux/regmap.h>
+#include <linux/clk.h>
+
+/* interface registers (can be accessed from any page) */
+#define AC200_TWI_CHANGE_TO_RSB		0x3E
+#define AC200_TWI_PAD_DELAY		0xC4
+#define AC200_TWI_REG_ADDR_H		0xFE
+
+/* General registers */
+#define AC200_SYS_VERSION		0x0000
+#define AC200_SYS_CONTROL		0x0002
+#define AC200_SYS_IRQ_ENABLE		0x0004
+#define AC200_SYS_IRQ_STATUS		0x0006
+#define AC200_SYS_CLK_CTL		0x0008
+#define AC200_SYS_DLDO_OSC_CTL		0x000A
+#define AC200_SYS_PLL_CTL0		0x000C
+#define AC200_SYS_PLL_CTL1		0x000E
+#define AC200_SYS_AUDIO_CTL0		0x0010
+#define AC200_SYS_AUDIO_CTL1		0x0012
+#define AC200_SYS_EPHY_CTL0		0x0014
+#define AC200_SYS_EPHY_CTL1		0x0016
+#define AC200_SYS_TVE_CTL0		0x0018
+#define AC200_SYS_TVE_CTL1		0x001A
+
+/* Audio Codec registers */
+#define AC200_AC_SYS_CLK_CTL		0x2000
+#define AC200_SYS_MOD_RST		0x2002
+#define AC200_SYS_SAMP_CTL		0x2004
+#define AC200_I2S_CTL			0x2100
+#define AC200_I2S_CLK			0x2102
+#define AC200_I2S_FMT0			0x2104
+#define AC200_I2S_FMT1			0x2108
+#define AC200_I2S_MIX_SRC		0x2114
+#define AC200_I2S_MIX_GAIN		0x2116
+#define AC200_I2S_DACDAT_DVC		0x2118
+#define AC200_I2S_ADCDAT_DVC		0x211A
+#define AC200_AC_DAC_DPC		0x2200
+#define AC200_AC_DAC_MIX_SRC		0x2202
+#define AC200_AC_DAC_MIX_GAIN		0x2204
+#define AC200_DACA_OMIXER_CTRL		0x2220
+#define AC200_OMIXER_SR			0x2222
+#define AC200_LINEOUT_CTRL		0x2224
+#define AC200_AC_ADC_DPC		0x2300
+#define AC200_MBIAS_CTRL		0x2310
+#define AC200_ADC_MIC_CTRL		0x2320
+#define AC200_ADCMIXER_SR		0x2322
+#define AC200_ANALOG_TUNING0		0x232A
+#define AC200_ANALOG_TUNING1		0x232C
+#define AC200_AC_AGC_SEL		0x2480
+#define AC200_ADC_DAPLCTRL		0x2500
+#define AC200_ADC_DAPRCTRL		0x2502
+#define AC200_ADC_DAPLSTA		0x2504
+#define AC200_ADC_DAPRSTA		0x2506
+#define AC200_ADC_DAPLTL		0x2508
+#define AC200_ADC_DAPRTL		0x250A
+#define AC200_ADC_DAPLHAC		0x250C
+#define AC200_ADC_DAPLLAC		0x250E
+#define AC200_ADC_DAPRHAC		0x2510
+#define AC200_ADC_DAPRLAC		0x2512
+#define AC200_ADC_DAPLDT		0x2514
+#define AC200_ADC_DAPLAT		0x2516
+#define AC200_ADC_DAPRDT		0x2518
+#define AC200_ADC_DAPRAT		0x251A
+#define AC200_ADC_DAPNTH		0x251C
+#define AC200_ADC_DAPLHNAC		0x251E
+#define AC200_ADC_DAPLLNAC		0x2520
+#define AC200_ADC_DAPRHNAC		0x2522
+#define AC200_ADC_DAPRLNAC		0x2524
+#define AC200_AC_DAPHHPFC		0x2526
+#define AC200_AC_DAPLHPFC		0x2528
+#define AC200_AC_DAPOPT			0x252A
+#define AC200_AC_DAC_DAPCTRL		0x3000
+#define AC200_AC_DRC_HHPFC		0x3002
+#define AC200_AC_DRC_LHPFC		0x3004
+#define AC200_AC_DRC_CTRL		0x3006
+#define AC200_AC_DRC_LPFHAT		0x3008
+#define AC200_AC_DRC_LPFLAT		0x300A
+#define AC200_AC_DRC_RPFHAT		0x300C
+#define AC200_AC_DRC_RPFLAT		0x300E
+#define AC200_AC_DRC_LPFHRT		0x3010
+#define AC200_AC_DRC_LPFLRT		0x3012
+#define AC200_AC_DRC_RPFHRT		0x3014
+#define AC200_AC_DRC_RPFLRT		0x3016
+#define AC200_AC_DRC_LRMSHAT		0x3018
+#define AC200_AC_DRC_LRMSLAT		0x301A
+#define AC200_AC_DRC_RRMSHAT		0x301C
+#define AC200_AC_DRC_RRMSLAT		0x301E
+#define AC200_AC_DRC_HCT		0x3020
+#define AC200_AC_DRC_LCT		0x3022
+#define AC200_AC_DRC_HKC		0x3024
+#define AC200_AC_DRC_LKC		0x3026
+#define AC200_AC_DRC_HOPC		0x3028
+#define AC200_AC_DRC_LOPC		0x302A
+#define AC200_AC_DRC_HLT		0x302C
+#define AC200_AC_DRC_LLT		0x302E
+#define AC200_AC_DRC_HKI		0x3030
+#define AC200_AC_DRC_LKI		0x3032
+#define AC200_AC_DRC_HOPL		0x3034
+#define AC200_AC_DRC_LOPL		0x3036
+#define AC200_AC_DRC_HET		0x3038
+#define AC200_AC_DRC_LET		0x303A
+#define AC200_AC_DRC_HKE		0x303C
+#define AC200_AC_DRC_LKE		0x303E
+#define AC200_AC_DRC_HOPE		0x3040
+#define AC200_AC_DRC_LOPE		0x3042
+#define AC200_AC_DRC_HKN		0x3044
+#define AC200_AC_DRC_LKN		0x3046
+#define AC200_AC_DRC_SFHAT		0x3048
+#define AC200_AC_DRC_SFLAT		0x304A
+#define AC200_AC_DRC_SFHRT		0x304C
+#define AC200_AC_DRC_SFLRT		0x304E
+#define AC200_AC_DRC_MXGHS		0x3050
+#define AC200_AC_DRC_MXGLS		0x3052
+#define AC200_AC_DRC_MNGHS		0x3054
+#define AC200_AC_DRC_MNGLS		0x3056
+#define AC200_AC_DRC_EPSHC		0x3058
+#define AC200_AC_DRC_EPSLC		0x305A
+#define AC200_AC_DRC_HPFHGAIN		0x305E
+#define AC200_AC_DRC_HPFLGAIN		0x3060
+#define AC200_AC_DRC_BISTCR		0x3100
+#define AC200_AC_DRC_BISTST		0x3102
+
+/* TVE registers */
+#define AC200_TVE_CTL0			0x4000
+#define AC200_TVE_CTL1			0x4002
+#define AC200_TVE_MOD0			0x4004
+#define AC200_TVE_MOD1			0x4006
+#define AC200_TVE_DAC_CFG0		0x4008
+#define AC200_TVE_DAC_CFG1		0x400A
+#define AC200_TVE_YC_DELAY		0x400C
+#define AC200_TVE_YC_FILTER		0x400E
+#define AC200_TVE_BURST_FRQ0		0x4010
+#define AC200_TVE_BURST_FRQ1		0x4012
+#define AC200_TVE_FRONT_PORCH		0x4014
+#define AC200_TVE_BACK_PORCH		0x4016
+#define AC200_TVE_TOTAL_LINE		0x401C
+#define AC200_TVE_FIRST_ACTIVE		0x401E
+#define AC200_TVE_BLACK_LEVEL		0x4020
+#define AC200_TVE_BLANK_LEVEL		0x4022
+#define AC200_TVE_PLUG_EN		0x4030
+#define AC200_TVE_PLUG_IRQ_EN		0x4032
+#define AC200_TVE_PLUG_IRQ_STA		0x4034
+#define AC200_TVE_PLUG_STA		0x4038
+#define AC200_TVE_PLUG_DEBOUNCE		0x4040
+#define AC200_TVE_DAC_TEST		0x4042
+#define AC200_TVE_PLUG_PULSE_LEVEL	0x40F4
+#define AC200_TVE_PLUG_PULSE_START	0x40F8
+#define AC200_TVE_PLUG_PULSE_PERIOD	0x40FA
+#define AC200_TVE_IF_CTL		0x5000
+#define AC200_TVE_IF_TIM0		0x5008
+#define AC200_TVE_IF_TIM1		0x500A
+#define AC200_TVE_IF_TIM2		0x500C
+#define AC200_TVE_IF_TIM3		0x500E
+#define AC200_TVE_IF_SYNC0		0x5010
+#define AC200_TVE_IF_SYNC1		0x5012
+#define AC200_TVE_IF_SYNC2		0x5014
+#define AC200_TVE_IF_TIM4		0x5016
+#define AC200_TVE_IF_STATUS		0x5018
+
+/* EPHY registers */
+#define AC200_EPHY_CTL			0x6000
+#define AC200_EPHY_BIST			0x6002
+
+/* eFuse registers (0x8000 - 0x9FFF, layout unknown) */
+
+/* RTC registers */
+#define AC200_LOSC_CTRL0		0xA000
+#define AC200_LOSC_CTRL1		0xA002
+#define AC200_LOSC_AUTO_SWT_STA		0xA004
+#define AC200_INTOSC_CLK_PRESCAL	0xA008
+#define AC200_RTC_YY_MM_DD0		0xA010
+#define AC200_RTC_YY_MM_DD1		0xA012
+#define AC200_RTC_HH_MM_SS0		0xA014
+#define AC200_RTC_HH_MM_SS1		0xA016
+#define AC200_ALARM0_CUR_VLU0		0xA024
+#define AC200_ALARM0_CUR_VLU1		0xA026
+#define AC200_ALARM0_ENABLE		0xA028
+#define AC200_ALARM0_IRQ_EN		0xA02C
+#define AC200_ALARM0_IRQ_STA		0xA030
+#define AC200_ALARM1_WK_HH_MM_SS0	0xA040
+#define AC200_ALARM1_WK_HH_MM_SS1	0xA042
+#define AC200_ALARM1_ENABLE		0xA044
+#define AC200_ALARM1_IRQ_EN		0xA048
+#define AC200_ALARM1_IRQ_STA		0xA04C
+#define AC200_ALARM_CONFIG		0xA050
+#define AC200_LOSC_OUT_GATING		0xA060
+#define AC200_GP_DATA(x)		(0xA100 + (x) * 2)
+#define AC200_RTC_DEB			0xA170
+#define AC200_GPL_HOLD_OUTPUT		0xA180
+#define AC200_VDD_RTC			0xA190
+#define AC200_IC_CHARA0			0xA1F0
+#define AC200_IC_CHARA1			0xA1F2
+
+struct ac200_dev {
+	struct clk			*clk;
+	struct regmap			*regmap;
+	struct regmap_irq_chip_data	*regmap_irqc;
+};
+
+int ac200_enable(void);
+uint16_t sun50i_ephy_calibrate_value(void);
+
+#endif /* __LINUX_MFD_AC200_H */
diff '--color=auto' -urpN a/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h616.dtsi b/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h616.dtsi
--- a/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h616.dtsi	2024-04-17 11:19:38.000000000 +0200
+++ b/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h616.dtsi	2024-04-27 23:28:01.058959613 +0200
@@ -7,8 +7,12 @@
 #include <dt-bindings/clock/sun50i-h616-ccu.h>
 #include <dt-bindings/clock/sun50i-h6-r-ccu.h>
 #include <dt-bindings/clock/sun6i-rtc.h>
+#include <dt-bindings/clock/sun8i-de2.h>
+#include <dt-bindings/clock/sun8i-tcon-top.h>
 #include <dt-bindings/reset/sun50i-h616-ccu.h>
 #include <dt-bindings/reset/sun50i-h6-r-ccu.h>
+#include <dt-bindings/reset/sun8i-de2.h>
+#include <dt-bindings/thermal/thermal.h>
 
 / {
 	interrupt-parent = <&gic>;
@@ -25,6 +29,9 @@
 			reg = <0>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu1: cpu@1 {
@@ -33,6 +40,9 @@
 			reg = <1>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu2: cpu@2 {
@@ -41,6 +51,9 @@
 			reg = <2>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 
 		cpu3: cpu@3 {
@@ -49,21 +62,30 @@
 			reg = <3>;
 			enable-method = "psci";
 			clocks = <&ccu CLK_CPUX>;
+			clock-latency-ns = <244144>; /* 8 32k periods */
+			#cooling-cells = <2>;
+			operating-points-v2 = <&cpu_opp_table>;
 		};
 	};
 
+	de: display-engine {
+		compatible = "allwinner,sun50i-h6-display-engine";
+		allwinner,pipelines = <&mixer0>;
+		status = "disabled";
+	};
+
 	reserved-memory {
 		#address-cells = <2>;
 		#size-cells = <2>;
 		ranges;
 
 		/*
-		 * 256 KiB reserved for Trusted Firmware-A (BL31).
+		 * 512 KiB reserved for Trusted Firmware-A (BL31).
 		 * This is added by BL31 itself, but some bootloaders fail
 		 * to propagate this into the DTB handed to kernels.
 		 */
 		secmon@40000000 {
-			reg = <0x0 0x40000000 0x0 0x40000>;
+			reg = <0x0 0x40000000 0x0 0x80000>;
 			no-map;
 		};
 	};
@@ -108,19 +130,122 @@
 		#size-cells = <1>;
 		ranges = <0x0 0x0 0x0 0x40000000>;
 
+		bus@1000000 {
+			compatible = "allwinner,sun50i-h616-de33",
+				     "allwinner,sun50i-a64-de2";
+			reg = <0x1000000 0x400000>;
+			allwinner,sram = <&de3_sram 1>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+			ranges = <0 0x1000000 0x400000>;
+
+			display_clocks: clock@8000 {
+				compatible = "allwinner,sun50i-h616-de33-clk";
+				reg = <0x8000 0x100>;
+				clocks = <&ccu CLK_DE>, <&ccu CLK_BUS_DE>;
+				clock-names = "mod", "bus";
+				resets = <&ccu RST_BUS_DE>;
+				#clock-cells = <1>;
+				#reset-cells = <1>;
+			};
+
+			mixer0: mixer@100000 {
+				compatible = "allwinner,sun50i-h616-de33-mixer-0";
+				reg = <0x100000 0x100000>,
+				      <0x8100 0x40>,
+				      <0x280000 0x20000>;
+				clocks = <&display_clocks CLK_BUS_MIXER0>,
+					 <&display_clocks CLK_MIXER0>;
+				clock-names = "bus", "mod";
+				resets = <&display_clocks RST_MIXER0>;
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					mixer0_out: port@1 {
+						reg = <1>;
+
+						mixer0_out_tcon_top_mixer0: endpoint {
+							remote-endpoint = <&tcon_top_mixer0_in_mixer0>;
+						};
+					};
+				};
+			};
+		};
+
+		gpu: gpu@1800000 {
+			compatible = "allwinner,sun50i-h616-mali",
+			             "arm,mali-bifrost";
+			reg = <0x1800000 0x40000>;
+			interrupts = <GIC_SPI 95 IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI 96 IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI 97 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "job", "mmu", "gpu";
+			clocks = <&ccu CLK_GPU0>, <&ccu CLK_BUS_GPU>;
+			clock-names = "core", "bus";
+			resets = <&ccu RST_BUS_GPU>;
+			//operating-points-v2 = <&gpu_opp_table>;
+			//#cooling-cells = <2>;
+			status = "disabled";
+		};
+
+		video-codec@1c0e000 {
+			compatible = "allwinner,sun50i-h616-video-engine";
+			reg = <0x01c0e000 0x2000>;
+			clocks = <&ccu CLK_BUS_VE>, <&ccu CLK_VE>,
+				 <&ccu CLK_MBUS_VE>;
+			clock-names = "ahb", "mod", "ram";
+			resets = <&ccu RST_BUS_VE>;
+			interrupts = <GIC_SPI 93 IRQ_TYPE_LEVEL_HIGH>;
+			allwinner,sram = <&ve_sram 1>;
+		};
+
 		syscon: syscon@3000000 {
 			compatible = "allwinner,sun50i-h616-system-control";
-			reg = <0x03000000 0x1000>;
+			reg = <0x03000000 0x30>,<0x03000038 0x0fc8>;
 			#address-cells = <1>;
 			#size-cells = <1>;
 			ranges;
 
+			sram_a2: sram@100000 {
+				compatible = "mmio-sram";
+				reg = <0x00100000 0x18000>;
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0 0x00100000 0x18000>;
+
+				scpi_sram: scpi-sram@17c00 {
+					compatible = "arm,scp-shmem";
+					reg = <0x17c00 0x200>;
+				};
+			};
+
 			sram_c: sram@28000 {
 				compatible = "mmio-sram";
 				reg = <0x00028000 0x30000>;
 				#address-cells = <1>;
 				#size-cells = <1>;
 				ranges = <0 0x00028000 0x30000>;
+
+				de3_sram: sram-section@0 {
+					compatible = "allwinner,sun50i-h616-sram-c",
+						     "allwinner,sun50i-a64-sram-c";
+					reg = <0x0000 0x1e000>;
+				};
+			};
+
+			sram_c1: sram@1a00000 {
+				compatible = "mmio-sram";
+				reg = <0x01a00000 0x200000>;
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0 0x01a00000 0x200000>;
+
+				ve_sram: sram-section@0 {
+					compatible = "allwinner,sun50i-h616-sram-c1";
+					reg = <0x000000 0x200000>;
+				};
 			};
 		};
 
@@ -133,12 +258,79 @@
 			#reset-cells = <1>;
 		};
 
+		sid: efuse@3006000 {
+			compatible = "allwinner,sun50i-h616-sid";
+			reg = <0x03006000 0x1000>;
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			cpu_speed_grade: cpu-speed-grade@00 {
+				reg = <0x00 0x02>;
+			};
+
+			ths_calibration: thermal-sensor-calibration@14 {
+				reg = <0x14 0x8>;
+			};
+
+			ephy_calibration: ephy-calibration@2c {
+				reg = <0x2c 0x2>;
+			};
+		};
+
 		watchdog: watchdog@30090a0 {
 			compatible = "allwinner,sun50i-h616-wdt",
 				     "allwinner,sun6i-a31-wdt";
 			reg = <0x030090a0 0x20>;
 			interrupts = <GIC_SPI 50 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&osc24M>;
+			status = "okay";
+		};
+
+		pwm: pwm@300a000 {
+			compatible = "allwinner,sun50i-h616-pwm";
+			reg = <0x0300a000 0x400>;
+			clocks = <&osc24M>, <&ccu CLK_BUS_PWM>;
+			clock-names = "mod", "bus";
+			resets = <&ccu RST_BUS_PWM>;
+			pwm-number = <6>;
+			pwm-base = <0x0>;
+			sunxi-pwms = <&pwm0>, <&pwm1>, <&pwm2>, <&pwm3>, <&pwm4>, <&pwm5>;
+			#pwm-cells = <3>;
+			status = "okay";
+		};
+
+		pwm0: pwm0@0300a000 {
+			compatible = "allwinner,sunxi-pwm0";
+		};
+
+		pwm1: pwm1@0300a000 {
+			compatible = "allwinner,sunxi-pwm1";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm1_ph_pin>;
+		};
+
+		pwm2: pwm2@0300a000 {
+			compatible = "allwinner,sunxi-pwm2";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm2_ph_pin>;
+		};
+
+		pwm3: pwm3@0300a000 {
+			compatible = "allwinner,sunxi-pwm3";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm3_ph_pin>;
+		};
+
+		pwm4: pwm4@0300a000 {
+			compatible = "allwinner,sunxi-pwm4";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm4_ph_pin>;
+		};
+
+		pwm5: pwm5@0300a000 {
+			compatible = "allwinner,sunxi-pwm5";
+			pinctrl-names = "default";
+			pinctrl-0 = <&pwm5_pin>;
 		};
 
 		pio: pinctrl@300b000 {
@@ -168,21 +360,119 @@
 				drive-strength = <40>;
 			};
 
-			i2c0_pins: i2c0-pins {
-				pins = "PI6", "PI7";
+			/omit-if-no-ref/
+			i2c0_pi_pins: i2c0-pi-pins {
+				pins = "PI5", "PI6";
 				function = "i2c0";
 			};
 
+			/omit-if-no-ref/
+			i2c1_ph_pins: i2c1-ph-pins {
+				pins = "PH0", "PH1";
+				function = "i2c1";
+			};
+
+			/omit-if-no-ref/
+			i2c1_pi_pins: i2c1-pi-pins {
+				pins = "PI7", "PI8";
+				function = "i2c1";
+			};
+
+			/omit-if-no-ref/
+			i2c2_ph_pins: i2c2-ph-pins {
+				pins = "PH2", "PH3";
+				function = "i2c2";
+			};
+
+			/omit-if-no-ref/
+			i2c2_pi_pins: i2c2-pi-pins {
+				pins = "PI9", "PI10";
+				function = "i2c2";
+			};
+
+			/omit-if-no-ref/
 			i2c3_ph_pins: i2c3-ph-pins {
 				pins = "PH4", "PH5";
 				function = "i2c3";
 			};
 
+			i2c3_pa_pins: i2c3-pa-pins {
+				pins = "PA10", "PA11";
+				function = "i2c3";
+				bias-pull-up;
+			};
+
+			/omit-if-no-ref/
+			i2c4_ph_pins: i2c4-ph-pins {
+				pins = "PH6", "PH7";
+				function = "i2c4";
+			};
+
+			/omit-if-no-ref/
+			i2s3_pins: i2s3-pins {
+				pins = "PH5", "PH6", "PH7", "PH8", "PH9";
+				function = "i2s3";
+			};
+
 			ir_rx_pin: ir-rx-pin {
 				pins = "PH10";
 				function = "ir_rx";
 			};
 
+			/omit-if-no-ref/
+			pwm1_ph_pin: pwm1-ph-pin {
+				pins = "PH3";
+				function = "pwm1";
+			};
+
+			/omit-if-no-ref/
+			pwm2_ph_pin: pwm2-ph-pin {
+				pins = "PH2";
+				function = "pwm2";
+			};
+
+			/omit-if-no-ref/
+			pwm3_ph_pin: pwm3-ph-pin {
+				pins = "PH0";
+				function = "pwm3";
+			};
+
+			/omit-if-no-ref/
+			pwm4_ph_pin: pwm4-ph-pin {
+				pins = "PH1";
+				function = "pwm4";
+			};
+
+			/omit-if-no-ref/
+			pwm5_pin: pwm5-pin {
+				pins = "PA12";
+				function = "pwm5";
+			};
+
+			/omit-if-no-ref/
+			pwm1_pi_pin: pwm1-pi-pin {
+				pins = "PI11";
+				function = "pwm1";
+			};
+
+			/omit-if-no-ref/
+			pwm2_pi_pin: pwm2-pi-pin {
+				pins = "PI12";
+				function = "pwm2";
+			};
+
+			/omit-if-no-ref/
+			pwm3_pi_pin: pwm3-pi-pin {
+				pins = "PI13";
+				function = "pwm3";
+			};
+
+			/omit-if-no-ref/
+			pwm4_pi_pin: pwm4-pi-pin {
+				pins = "PI14";
+				function = "pwm4";
+			};
+
 			mmc0_pins: mmc0-pins {
 				pins = "PF0", "PF1", "PF2", "PF3",
 				       "PF4", "PF5";
@@ -209,6 +499,13 @@
 				bias-pull-up;
 			};
 
+			rmii_pins: rmii-pins {
+				pins = "PA0", "PA1", "PA2", "PA3", "PA4",
+				       "PA5", "PA6", "PA7", "PA8", "PA9";
+				function = "emac1";
+				drive-strength = <40>;
+			};
+
 			/omit-if-no-ref/
 			spi0_pins: spi0-pins {
 				pins = "PC0", "PC2", "PC4";
@@ -233,22 +530,64 @@
 				function = "spi1";
 			};
 
+			/omit-if-no-ref/
+			spi1_cs1_pin: spi1-cs1-pin {
+				pins = "PH9";
+				function = "spi1";
+			};
+
 			uart0_ph_pins: uart0-ph-pins {
 				pins = "PH0", "PH1";
 				function = "uart0";
 			};
 
 			/omit-if-no-ref/
-			uart1_pins: uart1-pins {
+			uart1_ph_pins: uart1-ph-pins {
 				pins = "PG6", "PG7";
 				function = "uart1";
 			};
 
 			/omit-if-no-ref/
-			uart1_rts_cts_pins: uart1-rts-cts-pins {
+			uart1_ph_rts_cts_pins: uart1-ph-rts-cts-pins {
 				pins = "PG8", "PG9";
 				function = "uart1";
 			};
+
+			/omit-if-no-ref/
+			uart2_ph_pins: uart2-ph-pins {
+				pins = "PH5", "PH6";
+				function = "uart2";
+			};
+
+			/omit-if-no-ref/
+			uart2_ph_rts_cts_pins: uart2-ph-rts-cts-pins {
+				pins = "PH7", "PH8";
+				function = "uart2";
+			};
+
+			/omit-if-no-ref/
+			uart2_pi_pins: uart2-pi-pins {
+				pins = "PI5", "PI6";
+				function = "uart2";
+			};
+
+			/omit-if-no-ref/
+			uart3_pi_pins: uart3-pi-pins {
+				pins = "PI9", "PI10";
+				function = "uart3";
+			};
+
+			/omit-if-no-ref/
+			uart4_pi_pins: uart4-pi-pins {
+				pins = "PI13", "PI14";
+				function = "uart4";
+			};
+
+			/omit-if-no-ref/
+			uart5_ph_pins: uart5-ph-pins {
+				pins = "PH2", "PH3";
+				function = "uart5";
+			};
 		};
 
 		gic: interrupt-controller@3021000 {
@@ -325,6 +664,101 @@
 			#size-cells = <0>;
 		};
 
+		dma: dma-controller@3002000 {
+			compatible = "allwinner,sun50i-h616-dma";
+			reg = <0x03002000 0x1000>;
+			interrupts = <GIC_SPI 42 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_DMA>, <&ccu CLK_MBUS_DMA>;
+			clock-names = "bus", "mbus";
+			dma-channels = <16>;
+			dma-requests = <49>;
+			resets = <&ccu RST_BUS_DMA>;
+			#dma-cells = <1>;
+		};
+
+		codec: codec@05096000 {
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun50i-h616-codec";
+			reg = <0x05096000 0x31c>;
+			interrupts = <GIC_SPI 58 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_AUDIO_CODEC>,
+				 <&ccu CLK_AUDIO_CODEC_1X>,
+				 <&ccu CLK_AUDIO_CODEC_4X>;
+			clock-names = "apb", "audio-codec-1x", "audio-codec-4x";
+			resets = <&ccu RST_BUS_AUDIO_CODEC>;
+			dmas = <&dma 6>;
+			dma-names = "tx";
+			status = "disabled";
+		};
+
+		ahub_dam_plat:ahub_dam_plat@5097000 {
+			#sound-dai-cells = <0>;
+			/* sound card without pcm for hardware mix setting */
+			compatible	= "allwinner,sunxi-snd-plat-ahub_dam";
+			reg		= <0x05097000 0x1000>;
+			resets		= <&ccu RST_BUS_AUDIO_HUB>;
+			clocks          = <&ccu CLK_AUDIO_CODEC_1X>,
+			                  <&ccu CLK_AUDIO_CODEC_4X>,
+			                  <&ccu CLK_AUDIO_HUB>,
+			                  <&ccu CLK_BUS_AUDIO_HUB>;
+			clock-names     = "clk_pll_audio",
+			                  "clk_pll_audio_4x",
+			                  "clk_audio_hub",
+			                  "clk_bus_audio_hub";
+			status		= "disabled";
+		};
+
+		ahub_dam_mach:ahub_dam_mach {
+			compatible = "allwinner,sunxi-snd-mach";
+			soundcard-mach,name = "ahubdam";
+			status		= "disabled";
+			soundcard-mach,cpu {
+				sound-dai = <&ahub_dam_plat>;
+			};
+			soundcard-mach,codec {
+			};
+		};
+
+		ahub1_plat:ahub1_plat {
+			#sound-dai-cells = <0>;
+			compatible	= "allwinner,sunxi-snd-plat-ahub";
+			apb_num		= <1>;	/* for dma port 4 */
+			dmas		= <&dma 4>, <&dma 4>;
+			dma-names	= "tx", "rx";
+			playback_cma	= <128>;
+			capture_cma	= <128>;
+			tx_fifo_size	= <128>;
+			rx_fifo_size	= <128>;
+
+			tdm_num		= <1>;
+			tx_pin		= <0>;
+			rx_pin		= <0>;
+			status		= "disabled";
+		};
+
+		ahub1_mach:ahub1_mach {
+			compatible = "allwinner,sunxi-snd-mach";
+			soundcard-mach,name = "ahubhdmi";
+
+			soundcard-mach,format		= "i2s";
+			soundcard-mach,frame-master	= <&ahub1_cpu>;
+			soundcard-mach,bitclock-master	= <&ahub1_cpu>;
+			/* soundcard-mach,frame-inversion; */
+			/* soundcard-mach,bitclock-inversion; */
+			soundcard-mach,slot-num		= <2>;
+			soundcard-mach,slot-width	= <32>;
+			status		= "disabled";
+			ahub1_cpu: soundcard-mach,cpu {
+				sound-dai = <&ahub1_plat>;
+				soundcard-mach,pll-fs	= <4>;
+				soundcard-mach,mclk-fs	= <0>;
+			};
+
+			ahub1_codec: soundcard-mach,codec {
+				sound-dai = <&hdmi>;
+			};
+		};
+
 		uart0: serial@5000000 {
 			compatible = "snps,dw-apb-uart";
 			reg = <0x05000000 0x400>;
@@ -400,7 +834,7 @@
 			clocks = <&ccu CLK_BUS_I2C0>;
 			resets = <&ccu RST_BUS_I2C0>;
 			pinctrl-names = "default";
-			pinctrl-0 = <&i2c0_pins>;
+			pinctrl-0 = <&i2c0_pi_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -414,6 +848,8 @@
 			interrupts = <GIC_SPI 7 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C1>;
 			resets = <&ccu RST_BUS_I2C1>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c1_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -427,6 +863,8 @@
 			interrupts = <GIC_SPI 8 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C2>;
 			resets = <&ccu RST_BUS_I2C2>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c2_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -440,6 +878,8 @@
 			interrupts = <GIC_SPI 9 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C3>;
 			resets = <&ccu RST_BUS_I2C3>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c3_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -453,6 +893,8 @@
 			interrupts = <GIC_SPI 10 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_I2C4>;
 			resets = <&ccu RST_BUS_I2C4>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c4_ph_pins>;
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -466,6 +908,10 @@
 			clocks = <&ccu CLK_BUS_SPI0>, <&ccu CLK_SPI0>;
 			clock-names = "ahb", "mod";
 			resets = <&ccu RST_BUS_SPI0>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi0_pins>;
+			dmas = <&dma 22>, <&dma 22>;
+			dma-names = "rx", "tx";
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -479,6 +925,10 @@
 			clocks = <&ccu CLK_BUS_SPI1>, <&ccu CLK_SPI1>;
 			clock-names = "ahb", "mod";
 			resets = <&ccu RST_BUS_SPI1>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi1_pins>, <&spi1_cs1_pin>;
+			dmas = <&dma 23>, <&dma 23>;
+			dma-names = "rx", "tx";
 			status = "disabled";
 			#address-cells = <1>;
 			#size-cells = <0>;
@@ -504,6 +954,35 @@
 			};
 		};
 
+		emac1: ethernet@5030000 {
+			compatible = "allwinner,sunxi-gmac";
+			reg = <0x05030000 0x10000>,
+			      <0x03000034 0x4>;
+			reg-names = "gmac1_reg","ephy_reg";
+			interrupts = <GIC_SPI 15 IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "gmacirq";
+			resets = <&ccu RST_BUS_EMAC1>;
+			reset-names = "stmmaceth";
+			clocks = <&ccu CLK_BUS_EMAC1>,<&ccu CLK_EMAC_25M>;
+			clock-names = "bus-emac1","emac-25m";
+			pinctrl-0 = <&rmii_pins>;
+			pinctrl-names = "default";
+			phy-mode = "rmii";
+			tx-delay = <7>;
+			rx-delay = <31>;
+			phy-rst;
+			gmac-power0;
+			gmac-power1;
+			gmac-power2;
+			status = "disabled";
+
+			mdio1: mdio {
+				compatible = "ethernet-phy-ieee802.3-c22";
+				#address-cells = <1>;
+				#size-cells = <0>;
+			};
+		};
+
 		usbotg: usb@5100000 {
 			compatible = "allwinner,sun50i-h616-musb",
 				     "allwinner,sun8i-h3-musb";
@@ -559,9 +1038,11 @@
 			interrupts = <GIC_SPI 26 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI0>,
 				 <&ccu CLK_BUS_EHCI0>,
-				 <&ccu CLK_USB_OHCI0>;
+				 <&ccu CLK_USB_OHCI0>,
+				 <&ccu CLK_USB_PHY2>;
 			resets = <&ccu RST_BUS_OHCI0>,
-				 <&ccu RST_BUS_EHCI0>;
+				 <&ccu RST_BUS_EHCI0>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 0>;
 			phy-names = "usb";
 			status = "disabled";
@@ -573,8 +1054,10 @@
 			reg = <0x05101400 0x100>;
 			interrupts = <GIC_SPI 27 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI0>,
-				 <&ccu CLK_USB_OHCI0>;
-			resets = <&ccu RST_BUS_OHCI0>;
+				 <&ccu CLK_USB_OHCI0>,
+				 <&ccu CLK_USB_PHY2>;
+			resets = <&ccu RST_BUS_OHCI0>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 0>;
 			phy-names = "usb";
 			status = "disabled";
@@ -587,9 +1070,11 @@
 			interrupts = <GIC_SPI 28 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI1>,
 				 <&ccu CLK_BUS_EHCI1>,
-				 <&ccu CLK_USB_OHCI1>;
+				 <&ccu CLK_USB_OHCI1>,
+				 <&ccu CLK_USB_PHY2>;
 			resets = <&ccu RST_BUS_OHCI1>,
-				 <&ccu RST_BUS_EHCI1>;
+				 <&ccu RST_BUS_EHCI1>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 1>;
 			phy-names = "usb";
 			status = "disabled";
@@ -601,8 +1086,10 @@
 			reg = <0x05200400 0x100>;
 			interrupts = <GIC_SPI 29 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI1>,
-				 <&ccu CLK_USB_OHCI1>;
-			resets = <&ccu RST_BUS_OHCI1>;
+				 <&ccu CLK_USB_OHCI1>,
+				 <&ccu CLK_USB_PHY2>;
+			resets = <&ccu RST_BUS_OHCI1>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 1>;
 			phy-names = "usb";
 			status = "disabled";
@@ -643,9 +1130,11 @@
 			interrupts = <GIC_SPI 32 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI3>,
 				 <&ccu CLK_BUS_EHCI3>,
-				 <&ccu CLK_USB_OHCI3>;
+				 <&ccu CLK_USB_OHCI3>,
+				 <&ccu CLK_USB_PHY2>;
 			resets = <&ccu RST_BUS_OHCI3>,
-				 <&ccu RST_BUS_EHCI3>;
+				 <&ccu RST_BUS_EHCI3>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 3>;
 			phy-names = "usb";
 			status = "disabled";
@@ -657,13 +1146,156 @@
 			reg = <0x05311400 0x100>;
 			interrupts = <GIC_SPI 33 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&ccu CLK_BUS_OHCI3>,
-				 <&ccu CLK_USB_OHCI3>;
-			resets = <&ccu RST_BUS_OHCI3>;
+				 <&ccu CLK_USB_OHCI3>,
+				 <&ccu CLK_USB_PHY2>;
+			resets = <&ccu RST_BUS_OHCI3>,
+				 <&ccu RST_USB_PHY2>;
 			phys = <&usbphy 3>;
 			phy-names = "usb";
 			status = "disabled";
 		};
 
+		hdmi: hdmi@6000000 {
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun50i-h616-dw-hdmi",
+				     "allwinner,sun50i-h6-dw-hdmi";
+			reg = <0x06000000 0x10000>;
+			reg-io-width = <1>;
+			interrupts = <GIC_SPI 63 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_HDMI>, <&ccu CLK_HDMI_SLOW>,
+				 <&ccu CLK_HDMI>, <&ccu CLK_HDMI_CEC>,
+				 <&ccu CLK_HDCP>, <&ccu CLK_BUS_HDCP>;
+			clock-names = "iahb", "isfr", "tmds", "cec", "hdcp",
+				      "hdcp-bus";
+			resets = <&ccu RST_BUS_HDMI>, <&ccu RST_BUS_HDCP>;
+			reset-names = "ctrl", "hdcp";
+			phys = <&hdmi_phy>;
+			phy-names = "phy";
+			status = "disabled";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				hdmi_in: port@0 {
+					reg = <0>;
+
+					hdmi_in_tcon_top: endpoint {
+						remote-endpoint = <&tcon_top_hdmi_out_hdmi>;
+					};
+				};
+
+				hdmi_out: port@1 {
+					reg = <1>;
+				};
+			};
+		};
+
+		hdmi_phy: hdmi-phy@6010000 {
+			compatible = "allwinner,sun50i-h616-hdmi-phy";
+			reg = <0x06010000 0x10000>;
+			clocks = <&ccu CLK_BUS_HDMI>, <&ccu CLK_HDMI_SLOW>;
+			clock-names = "bus", "mod";
+			resets = <&ccu RST_BUS_HDMI_SUB>;
+			reset-names = "phy";
+			#phy-cells = <0>;
+		};
+
+		tcon_top: tcon-top@6510000 {
+			compatible = "allwinner,sun50i-h6-tcon-top";
+			reg = <0x06510000 0x1000>;
+			clocks = <&ccu CLK_BUS_TCON_TOP>,
+				 <&ccu CLK_TCON_TV0>;
+			clock-names = "bus",
+				      "tcon-tv0";
+			clock-output-names = "tcon-top-tv0";
+			resets = <&ccu RST_BUS_TCON_TOP>;
+			#clock-cells = <1>;
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				tcon_top_mixer0_in: port@0 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <0>;
+
+					tcon_top_mixer0_in_mixer0: endpoint@0 {
+						reg = <0>;
+						remote-endpoint = <&mixer0_out_tcon_top_mixer0>;
+					};
+				};
+
+				tcon_top_mixer0_out: port@1 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <1>;
+
+					tcon_top_mixer0_out_tcon_tv: endpoint@2 {
+						reg = <2>;
+						remote-endpoint = <&tcon_tv_in_tcon_top_mixer0>;
+					};
+				};
+
+				tcon_top_hdmi_in: port@4 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <4>;
+
+					tcon_top_hdmi_in_tcon_tv: endpoint@0 {
+						reg = <0>;
+						remote-endpoint = <&tcon_tv_out_tcon_top>;
+					};
+				};
+
+				tcon_top_hdmi_out: port@5 {
+					reg = <5>;
+
+					tcon_top_hdmi_out_hdmi: endpoint {
+						remote-endpoint = <&hdmi_in_tcon_top>;
+					};
+				};
+			};
+		};
+
+		tcon_tv: lcd-controller@6515000 {
+			compatible = "allwinner,sun50i-h6-tcon-tv",
+				     "allwinner,sun8i-r40-tcon-tv";
+			reg = <0x06515000 0x1000>;
+			interrupts = <GIC_SPI 66 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_TCON_TV0>,
+				 <&tcon_top CLK_TCON_TOP_TV0>;
+			clock-names = "ahb",
+				      "tcon-ch1";
+			resets = <&ccu RST_BUS_TCON_TV0>;
+			reset-names = "lcd";
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				tcon_tv_in: port@0 {
+					reg = <0>;
+
+					tcon_tv_in_tcon_top_mixer0: endpoint {
+						remote-endpoint = <&tcon_top_mixer0_out_tcon_tv>;
+					};
+				};
+
+				tcon_tv_out: port@1 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					reg = <1>;
+
+					tcon_tv_out_tcon_top: endpoint@1 {
+						reg = <1>;
+						remote-endpoint = <&tcon_top_hdmi_in_tcon_tv>;
+					};
+				};
+			};
+		};
+
 		rtc: rtc@7000000 {
 			compatible = "allwinner,sun50i-h616-rtc";
 			reg = <0x07000000 0x400>;
@@ -688,11 +1320,14 @@
 		r_pio: pinctrl@7022000 {
 			compatible = "allwinner,sun50i-h616-r-pinctrl";
 			reg = <0x07022000 0x400>;
+			interrupts = <GIC_SPI 43 IRQ_TYPE_LEVEL_HIGH>;
 			clocks = <&r_ccu CLK_R_APB1>, <&osc24M>,
 				 <&rtc CLK_OSC32K>;
 			clock-names = "apb", "hosc", "losc";
 			gpio-controller;
 			#gpio-cells = <3>;
+			interrupt-controller;
+			#interrupt-cells = <3>;
 
 			/omit-if-no-ref/
 			r_i2c_pins: r-i2c-pins {
@@ -747,5 +1382,162 @@
 			#address-cells = <1>;
 			#size-cells = <0>;
 		};
+
+		ths: thermal-sensor@5070400 {
+			/* The Thermal Sensor Controller(THS) embeds four thermal sensors,
+			sensor0 is located in GPU
+			sensor1 is located in VE
+			sensor2 is located in CPU
+			sensor3 is located in DDR
+			*/
+			compatible = "allwinner,sun50i-h616-ths";
+			reg = <0x05070400 0x400>;
+			interrupts = <GIC_SPI 19 IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&ccu CLK_BUS_THS>;
+			clock-names = "bus";
+			resets = <&ccu RST_BUS_THS>;
+			nvmem-cells = <&ths_calibration>;
+			nvmem-cell-names = "calibration";
+			#thermal-sensor-cells = <1>;
+		};
+
+		dump_reg: dump_reg@20000 {
+			compatible = "allwinner,sunxi-dump-reg";
+			reg = <0x0 0x03001000 0x0 0x0f20>;
+			status = "okay";
+		};
+
+		sunxi-info {
+			compatible = "allwinner,sun50i-h616-sys-info";
+			status = "okay";
+		};
+
+		addr_mgt: addr-mgt {
+			compatible = "allwinner,sunxi-addr_mgt";
+			type_addr_wifi = <0x2>;
+			type_addr_bt = <0x2>;
+			type_addr_eth = <0x2>;
+			status = "okay";
+		};
+
+		r_lradc: lradc@5070800 {
+			compatible = "allwinner,sun50i-h616-lradc";
+			reg = <0x05070800 0x400>;
+			interrupts = <GIC_SPI 20 IRQ_TYPE_EDGE_RISING>;
+			clocks = <&ccu CLK_BUS_KEYADC>;
+			resets = <&ccu RST_BUS_KEYADC>;
+			status = "disabled";
+		};
+	};
+
+	thermal-zones {
+		cpu-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 2>;
+
+			trips {
+				cpu_alert: cpu-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+
+				cpu-crit {
+					temperature = <100000>;
+					hysteresis = <0>;
+					type = "critical";
+				};
+			};
+
+			cooling-maps {
+				map0 {
+					trip = <&cpu_alert>;
+					cooling-device = <&cpu0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+					                 <&cpu1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+					                 <&cpu2 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+					                 <&cpu3 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+				};
+			};
+		};
+
+		gpu-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 0>;
+
+			trips {
+				gpu_alert: gpu-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+
+				gpu-crit {
+					temperature = <100000>;
+					hysteresis = <0>;
+					type = "critical";
+				};
+			};
+
+			cooling-maps {
+				map0 {
+					trip = <&gpu_alert>;
+					cooling-device = <&gpu THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+				};
+			};
+		};
+
+		ve-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 1>;
+
+			trips {
+				ve_alert: ve-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+			};
+		};
+
+		ddr-thermal {
+			polling-delay-passive = <0>;
+			polling-delay = <0>;
+			thermal-sensors = <&ths 3>;
+
+			trips {
+				ddr_alert: ddr-alert {
+					temperature = <85000>;
+					hysteresis = <2000>;
+					type = "passive";
+				};
+			};
+		};
+	};
+
+	gpu_opp_table: gpu-opp-table {
+		compatible = "operating-points-v2";
+		opp-125000000 {
+			opp-hz = /bits/ 64 <125000000>;
+			opp-microvolt = <810000>;
+		};
+		opp-250000000 {
+			opp-hz = /bits/ 64 <250000000>;
+			opp-microvolt = <810000>;
+		};
+		opp-432000000 {
+			opp-hz = /bits/ 64 <432000000>;
+			opp-microvolt = <810000>;
+		};
+		opp-600000000 {
+			opp-hz = /bits/ 64 <600000000>;
+			opp-microvolt = <960000>;
+		};
+		opp-800000000 {
+			opp-hz = /bits/ 64 <800000000>;
+			opp-microvolt = <1080000>;
+		};
 	};
 };
diff '--color=auto' -urpN a/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h618-orangepi-zero2w.dts b/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h618-orangepi-zero2w.dts
--- a/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h618-orangepi-zero2w.dts	1970-01-01 01:00:00.000000000 +0100
+++ b/scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h618-orangepi-zero2w.dts	2024-04-27 23:28:07.967003456 +0200
@@ -0,0 +1,472 @@
+// SPDX-License-Identifier: (GPL-2.0+ or MIT)
+/*
+ * Copyright (C) 2020 Arm Ltd.
+ */
+
+/dts-v1/;
+
+#include "sun50i-h616.dtsi"
+#include "sun50i-h616-cpu-opp.dtsi"
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/interrupt-controller/arm-gic.h>
+#include <dt-bindings/input/input.h>
+#include <dt-bindings/leds/common.h>
+
+/ {
+	model = "OrangePi Zero2 W";
+	compatible = "xunlong,orangepi-zero2w", "allwinner,sun50i-h616";
+
+	aliases {
+		serial0 = &uart0;
+		serial2 = &uart2;
+		serial3 = &uart3;
+		serial4 = &uart4;
+		serial5 = &uart5;
+		ethernet0 = &emac1;
+	};
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+
+	connector {
+		compatible = "hdmi-connector";
+		type = "d";
+
+		port {
+			hdmi_con_in: endpoint {
+				remote-endpoint = <&hdmi_out_con>;
+			};
+		};
+	};
+
+	leds: leds {
+		compatible = "gpio-leds";
+
+		led-green {
+			label = "green_led";
+			gpios = <&pio 2 13 GPIO_ACTIVE_HIGH>; /* PC13 */
+			linux,default-trigger = "heartbeat";
+		};
+
+		100m_link {
+			label = "100m_link";
+			gpios = <&pio 2 15 GPIO_ACTIVE_HIGH>; /* PC15 */
+			default-state = "off";
+		};
+
+		100m_act {
+			label = "100m_act";
+			gpios = <&pio 2 16 GPIO_ACTIVE_HIGH>; /* PC16 */
+			default-state = "off";
+		};
+	};
+
+	reg_vcc5v: vcc5v {
+		/* board wide 5V supply directly from the USB-C socket */
+		compatible = "regulator-fixed";
+		regulator-name = "vcc-5v";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-always-on;
+	};
+
+	reg_vcc33_wifi: vcc33-wifi {
+		/* Always on 3.3V regulator for WiFi and BT */
+		compatible = "regulator-fixed";
+		regulator-name = "vcc33-wifi";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+		vin-supply = <&reg_vcc5v>;
+	};
+
+	reg_vcc_wifi_io: vcc-wifi-io {
+		/* Always on 1.8V/300mA regulator for WiFi and BT IO */
+		compatible = "regulator-fixed";
+		regulator-name = "vcc-wifi-io";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+		regulator-always-on;
+		vin-supply = <&reg_vcc33_wifi>;
+	};
+
+	wifi_pwrseq: wifi-pwrseq {
+		compatible = "mmc-pwrseq-simple";
+		clocks = <&rtc 1>;
+		clock-names = "osc32k-out";
+		reset-gpios = <&pio 6 18 GPIO_ACTIVE_LOW>; /* PG18 */
+		post-power-on-delay-ms = <200>;
+	};
+
+	ac200_pwm_clk: ac200_clk {
+		compatible = "pwm-clock";
+		#clock-cells = <0>;
+		// pwm5 period_ns = 500 > 334 for select 24M clock.
+		pwms = <&pwm 5 500 0>;
+		clock-frequency = <2000000>;
+		status = "okay";
+	};
+};
+
+&pwm5 {
+	// clk_bypass_output = 1 for Clock direct output without frequency division
+	// so pwm5 output is 24MHz for AC200 & AC300 clock
+	clk_bypass_output = <0x1>;
+	status = "okay";
+};
+
+&de {
+	status = "okay";
+};
+
+&hdmi {
+	//hvcc-supply = <&reg_bldo1>;
+	status = "okay";
+};
+
+&hdmi_out {
+	hdmi_out_con: endpoint {
+		remote-endpoint = <&hdmi_con_in>;
+	};
+};
+
+&gpu {
+	mali-supply = <&reg_dcdc1>;
+	status = "disabled";
+};
+
+&mmc0 {
+	vmmc-supply = <&reg_dldo1>;
+	cd-gpios = <&pio 5 6 GPIO_ACTIVE_LOW>;	/* PF6 */
+	bus-width = <4>;
+	max-frequency = <50000000>;
+	status = "okay";
+};
+
+&mmc1 {
+	vmmc-supply = <&reg_vcc33_wifi>;
+	vqmmc-supply = <&reg_vcc_wifi_io>;
+	mmc-pwrseq = <&wifi_pwrseq>;
+	bus-width = <4>;
+	non-removable;
+	mmc-ddr-1_8v;
+	status = "okay";
+};
+
+&r_i2c {
+	status = "okay";
+
+	axp313a: pmic@36 {
+		compatible = "x-powers,axp313a";
+		reg = <0x36>;
+		wakeup-source;
+
+		interrupt-parent = <&pio>;
+		interrupts = <2 9 IRQ_TYPE_LEVEL_LOW>; /* PC9 */
+		interrupt-controller;
+		#interrupt-cells = <1>;
+
+		regulators{
+			reg_dcdc1: dcdc1 {
+				regulator-name = "axp313a-dcdc1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1100000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+
+			reg_dcdc2: dcdc2 {
+				regulator-name = "axp313a-dcdc2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1200000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-ramp-delay = <200>;
+				regulator-always-on;
+			};
+
+			reg_dcdc3: dcdc3 {
+				regulator-name = "axp313a-dcdc3";
+				regulator-min-microvolt = <1100000>;
+				regulator-max-microvolt = <1100000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+
+			reg_aldo1: ldo1 {
+				regulator-name = "axp313a-aldo1";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+
+			reg_dldo1: ldo2 {
+				regulator-name = "axp313a-dldo1";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-step-delay-us = <25>;
+				regulator-final-delay-us = <50>;
+				regulator-always-on;
+			};
+		};
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_ph_pins>;
+	status = "okay";
+};
+
+&usbotg {
+	/*
+	 * PHY0 pins are connected to a USB-C socket, but a role switch
+	 * is not implemented: both CC pins are pulled to GND.
+	 * The VBUS pins power the device, so a fixed peripheral mode
+	 * is the best choice.
+	 * The board can be powered via GPIOs, in this case port0 *can*
+	 * act as a host (with a cable/adapter ignoring CC), as VBUS is
+	 * then provided by the GPIOs. Any user of this setup would
+	 * need to adjust the DT accordingly: dr_mode set to "host",
+	 * enabling OHCI0 and EHCI0.
+	 */
+	dr_mode = "peripheral";
+	status = "okay";
+};
+
+&usbphy {
+	status = "okay";
+};
+
+&ehci0 {
+	status = "disabled";
+};
+
+&ehci1 {
+	status = "okay";
+};
+
+&ehci2 {
+	status = "okay";
+};
+
+&ehci3 {
+	status = "okay";
+};
+
+&ohci0 {
+	status = "disabled";
+};
+
+&ohci1 {
+	status = "okay";
+};
+
+&ohci2 {
+	status = "okay";
+};
+
+&ohci3 {
+	status = "okay";
+};
+
+&ir {
+	pinctrl-names = "default";
+	pinctrl-0 = <&ir_rx_pin>;
+	status = "okay";
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pi_pins>;
+	status = "disabled";
+};
+
+&i2c1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c1_pi_pins>;
+	status = "disabled";
+};
+
+&i2c2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c2_pi_pins>;
+	status = "disabled";
+};
+
+&i2c3 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c3_pa_pins>;
+
+	ac200_x: mfd@10 {
+		compatible = "x-powers,ac200";
+		reg = <0x10>;
+		clocks = <&ac200_pwm_clk>;
+		// ephy id
+		nvmem-cells = <&ephy_calibration>;
+		nvmem-cell-names = "calibration";
+
+		ac200_ephy: phy {
+			compatible = "x-powers,ac200-ephy";
+			status = "okay";
+		};
+	};
+};
+
+&i2c4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c4_ph_pins>;
+	status = "disabled";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart2_pi_pins>;
+	status = "disabled";
+};
+
+&uart3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart3_pi_pins>;
+	status = "disabled";
+};
+
+&uart4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart4_pi_pins>;
+	status = "disabled";
+};
+
+&uart5 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart5_ph_pins>;
+	status = "disabled";
+};
+
+&spi0  {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins>, <&spi0_cs0_pin>;
+
+	spidev@0 {
+		status = "disabled";
+		compatible = "rohm,dh2228fv";
+		reg = <0>;
+		spi-max-frequency = <1000000>;
+	};
+
+	flash@0 {
+		status = "okay";
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "jedec,spi-nor";
+		reg = <0>;
+		spi-max-frequency = <40000000>;
+	};
+};
+
+&spi1 {
+	status = "disabled";
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi1_pins>, <&spi1_cs1_pin>;
+
+	spidev@1 {
+		compatible = "rohm,dh2228fv";
+		status = "disabled";
+		reg = <1>;
+		spi-max-frequency = <1000000>;
+	};
+};
+
+&codec {
+	allwinner,audio-routing =
+	        "Line Out", "LINEOUT";
+	status = "okay";
+};
+
+&ahub_dam_plat {
+	status = "okay";
+};
+
+&ahub_dam_mach {
+	status = "okay";
+};
+
+&ahub1_plat {
+	status = "okay";
+};
+
+&ahub1_mach {
+	status = "okay";
+};
+
+&cpu0 {
+	cpu-supply = <&reg_dcdc2>;
+	status = "okay";
+};
+
+&pwm1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm1_pi_pin>;
+};
+
+&pwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm2_pi_pin>;
+};
+
+&pwm3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm3_pi_pin>;
+};
+
+&pwm4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pwm4_pi_pin>;
+};
+
+&emac1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&rmii_pins>;
+	phy-mode = "rmii";
+	phy-handle = <&rmii_phy>;
+	phy-supply = <&reg_dldo1>;
+	allwinner,rx-delay-ps = <3100>;
+	allwinner,tx-delay-ps = <700>;
+	status = "okay";
+};
+
+&mdio1 {
+	rmii_phy: ethernet-phy@1 {
+		compatible = "ethernet-phy-ieee802.3-c22";
+		reg = <1>;
+	};
+};
+
+&r_lradc {
+	vref-supply = <&reg_aldo1>;
+	status = "okay";
+
+	button-500 {
+		label = "KEY_1";
+		linux,code = <KEY_1>;
+		channel = <0>;
+		voltage = <500000>;
+	};
+
+	button-800 {
+		label = "KEY_ENTER";
+		linux,code = <KEY_ENTER>;
+		channel = <0>;
+		voltage = <800000>;
+	};
+};
